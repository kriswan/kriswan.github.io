<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Kris&#39;s Blog</title>
  <subtitle>分享</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://kriswan.github.io/"/>
  <updated>2016-08-30T03:51:45.000Z</updated>
  <id>http://kriswan.github.io/</id>
  
  <author>
    <name>Kris Wan</name>
    <email>kriswansf@gmail.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Java并发结构</title>
    <link href="http://kriswan.github.io/2016/08/29/Java%E5%B9%B6%E5%8F%91%E7%BB%93%E6%9E%84/"/>
    <id>http://kriswan.github.io/2016/08/29/Java并发结构/</id>
    <published>2016-08-29T10:11:52.000Z</published>
    <updated>2016-08-30T03:51:45.000Z</updated>
    
    <content type="html">&lt;blockquote&gt;
&lt;p&gt;原文地址：&lt;a href=&quot;http://gee.cs.oswego.edu/dl/cpj/mechanics.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://gee.cs.oswego.edu/dl/cpj/mechanics.html&lt;/a&gt;&lt;br&gt;声明： 个人英文水平有限，翻译的不对的地方请重拍！&lt;br&gt;Doug Lee的书:Concurrent Programming In Java的网上地址：&lt;br&gt;&lt;a href=&quot;http://gee.cs.oswego.edu/dl/cpj/index.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://gee.cs.oswego.edu/dl/cpj/index.html&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&quot;/images/14724796235520.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;线程&quot;&gt;&lt;a href=&quot;#线程&quot; class=&quot;headerlink&quot; title=&quot;线程&quot;&gt;&lt;/a&gt;线程&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;线程是一个可以彼此间独立执行、同时共享底层系统资源(如文件、共享对象)的调用序列，Thread类是控制和记录线程活动的类。&lt;/li&gt;
&lt;li&gt;每个应用至少包含一个线程（即启动JVM的那个线程）， 其他的内部后台线程也会在JVM初始化的时候启动，线程数量和特性随各个JVM不同会有很大差异，但是，所有的用户线程都是由主线程（或者说它们的父线程）明确构建和启动的。&lt;/li&gt;
&lt;li&gt;下面是一些对线程Thread类相关的重要方法、属性以及使用注意事项的总结， 所有这些都会在本书的其他章节进行讨论和解读。 针对JLS和公开的相关API文档应当咨询更详细和权威的描述。&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;构造&quot;&gt;&lt;a href=&quot;#构造&quot; class=&quot;headerlink&quot; title=&quot;构造&quot;&gt;&lt;/a&gt;构造&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;不同的构造方法接受不同组合的构造参数如下: &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;一个Runnable对象，这种情况下，接下来调用&lt;code&gt;Thread.start()&lt;/code&gt;方法会调用Runnable对象的&lt;code&gt;run()&lt;/code&gt;方法，默认的Thread本身就是实现了Runnable接口的对象，只不过默认的run方法是空；&lt;/li&gt;
&lt;li&gt;一个标示线程的字符串，这个可以用来追踪和调试，除此之外没什么其他用处；&lt;/li&gt;
&lt;li&gt;接受一个&lt;code&gt;ThreadGroup&lt;/code&gt;，新线程都会放在这个线程组里，注意，如果没有访问当前线程组的权限，会抛出SecurityException异常；&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Thread类自身实现了Runnable接口，所以除了构造函数里传入一个Runnable对象，你还可以通过继承Thread类实现一个带有run方法的子类的方式来实现一个线程。但是最好的策略还是定义一个单独的Runnable接口的实现类并作为构造函数的参数传递给Thread类，因为：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在一个单独的Runnable实现类里面实现代码逻辑可以免去潜在的Thread类和Runnable实现类中的同步代码块和同步方法交互的问题。 更具普遍意义的是，这种类型的代码分离有助于我们对具体的处理过程和对应的线程上下文做单独的控制。&lt;/li&gt;
&lt;li&gt;同时，针对同一个Runnable可以提供给多个有不同实例化方式的线程，也可以提供给其他轻量级的线程池框架处理。&lt;/li&gt;
&lt;li&gt;继承Thread类的方式会使得子类无法继承其他的类，不利于扩展。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Thread类有一个可以通过构造函数设置的&lt;code&gt;daemon&lt;/code&gt;属性(但是只能在一个线程启动之前设置)。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;setDaemon方法的意思是设置当前线程为&lt;strong&gt;后台驻留线程&lt;/strong&gt;，JVM会判断，当所有的非&lt;code&gt;daemon&lt;/code&gt;线程都结束时，立即停止所有&lt;code&gt;daemon&lt;/code&gt;线程并退出JVM。&lt;/li&gt;
&lt;li&gt;isDaemon方法会返回当前线程是否是&lt;code&gt;daemon&lt;/code&gt;线程，这个方法的作用不大，即便后台线程在程序退出时经常需要做一些清理工作(&lt;code&gt;daemon&lt;/code&gt;读成&lt;strong&gt;day-mon&lt;/strong&gt;)。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;线程启动&quot;&gt;&lt;a href=&quot;#线程启动&quot; class=&quot;headerlink&quot; title=&quot;线程启动&quot;&gt;&lt;/a&gt;线程启动&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;调用start方法后，会触发Thread实例启动一个独立的活动流去执行实例的run方法。 调用线程(父线程)所持有的同步锁不会被新的线程持有。&lt;/li&gt;
&lt;li&gt;当线程的run方法无论是正常返回还是抛出一个未受检异常(如RuntimeException),线程都会终止。 线程即便终止之后也是==不可重启==，调用start方法多次会抛出InvalidThreadStateException异常。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;isAlive&lt;/code&gt;方法返回&lt;strong&gt;true&lt;/strong&gt;代表线程已经启动但还没有终止。 如果当前线程阻塞了，该方法会返回&lt;code&gt;true&lt;/code&gt;，在这个点上不同的JVM实现会有不同，有的JVM在线程被取消&lt;code&gt;cancelled&lt;/code&gt;的情况下会返回&lt;code&gt;false&lt;/code&gt;。没有方法可以判断一个是&lt;code&gt;is not alive&lt;/code&gt;状态的线程是否曾经被启动过，同样的，一个线程也不能很轻易的判断出是由哪个&lt;strong&gt;父&lt;/strong&gt;线程启动的，虽然可以知道其他在同一个线程组&lt;code&gt;ThreadGroup&lt;/code&gt;里面的线程是谁。&lt;/li&gt;
&lt;/ol&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//ThreadPoolExecutor.java&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//runWorker(Worker w)方法&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt; (task != &lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt; || (task = getTask()) != &lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//这里会循环判断队列里面的任务数是否为空，不为空的情况下，线程池里面的线程一直是为终止状态，达到池化得效果&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;processWorkerExit(w, completedAbruptly);&lt;span class=&quot;comment&quot;&gt;//如果队列里面的任务数为空，在这里面释放线程&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;优先级&quot;&gt;&lt;a href=&quot;#优先级&quot; class=&quot;headerlink&quot; title=&quot;优先级&quot;&gt;&lt;/a&gt;优先级&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;为了可以使得JVM实现跨越不同硬件平台和操作系统，Java语言对线程调度和公平性不做保证，甚至不严格保证线程会一直执行。但是线程是支持通过启发式的设置线程优先级方法来影响线程调度器的执行&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;每个线程都有一个优先级，优先级序号处在&lt;code&gt;Thread.MIN_PRIORITY&lt;/code&gt; 和 &lt;code&gt;Thread.MAX_PRIORITY&lt;/code&gt;之间。&lt;/li&gt;
&lt;li&gt;默认请情况下，每一个新线程都拥有和其创建线程一致的优先级。初始执行main方法的线程默认情况下的优先级为&lt;code&gt;Thread.NORM_PRIORITY&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;可以通过&lt;code&gt;getPriority&lt;/code&gt;方法获取任意线程的当前优先级。&lt;/li&gt;
&lt;li&gt;可以通过&lt;code&gt;setPriority&lt;/code&gt;方法动态设置任意线程的优先级，最大优先级由其所在的线程组的大小限定。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;当存在超过可用CPU核心数的可执行线程时，CPU线程调度器更倾向于优先执行高优先级的线程。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;具体的策略在不同的平台可能会有不同，例如，一些JVM的实现总是会选择最高优先级的线程执行，其他一些JVM会匹配线程的十个优先级到一些系统支持的更小(&amp;lt;10)的优先级类别，这样就会使得不同优先级的线程有可能会被JVM当做同等优先级对待。其他一些混淆声明的优先级或其他的调度策略会保证即便低优先级的线程最终也会有机会得到执行。 同样的，由于计算机系统中其他应用的存在，设置JVM线程的优先级，可能会，但不一定会影响调度器的执行策略。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;优先级并不承载其他的计算机语义和正确性方面的义务。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;尤其是不能用优先级控制来替代线程执行中的锁，优先级只能被用来表示不同线程间的重要性和紧急程度，在线程间竞争获取执行机会非常激烈的的场合下优先级会显得非常有用。程序应该优先按照运行正确的设计理念来设计，即便设置优先级的方法&lt;code&gt;setPriority&lt;/code&gt;被定义为无操作的方法.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;下面的表格列出了一些约定俗成的优先级设置策略的任务类型。 在存在很多并发场景的应用中，相对来说只有非常少的一部分线程在任何时候都是可执行状态(其他的线程都由于各种原因被阻塞了)， 这种场合下控制线程的优先级显得没有多大意义。其他的并发系统的场景中，微小的优先级设置的变化会对最终的执行产生影响。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&quot;text-align:center&quot;&gt;&lt;strong&gt;&lt;code&gt;Range&lt;/code&gt;&lt;/strong&gt;&lt;/th&gt;
&lt;th style=&quot;text-align:center&quot;&gt;&lt;strong&gt;&lt;code&gt;Use&lt;/code&gt;&lt;/strong&gt;&lt;/th&gt;
&lt;th style=&quot;text-align:center&quot;&gt;&lt;strong&gt;&lt;code&gt;Remark&lt;/code&gt;&lt;/strong&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;strong&gt;&lt;code&gt;10&lt;/code&gt;&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;Crisis management&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;危机处理，最高&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;strong&gt;&lt;code&gt;7-9&lt;/code&gt;&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;Interactive, event-dirven&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;交互，事件驱动&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;strong&gt;&lt;code&gt;4-6&lt;/code&gt;&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;IO-bound&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;IO类型&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;strong&gt;&lt;code&gt;2-3&lt;/code&gt;&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;Background computation&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;后台运行&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;strong&gt;&lt;code&gt;1&lt;/code&gt;&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;Run only if noting else on&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;仅当其他线程都不执行的情况下&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&quot;控制方法&quot;&gt;&lt;a href=&quot;#控制方法&quot; class=&quot;headerlink&quot; title=&quot;控制方法&quot;&gt;&lt;/a&gt;控制方法&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;只有很少的几个方法可以用来做线程间的交互：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;每个线程都有一个关联的&lt;code&gt;boolean&lt;/code&gt;变量&lt;code&gt;interruption status&lt;/code&gt;标示出线程的中断状体。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;调用线程的&lt;code&gt;interrupt&lt;/code&gt;方法会把线程的中断状态设置成&lt;code&gt;true&lt;/code&gt;，除非线程正处以下方法的执行状态中：&lt;code&gt;Object.wait(),Thread.sleep(),Thread.join()&lt;/code&gt;，这些情况下&lt;code&gt;interrupt()&lt;/code&gt;方法会导致线程抛出异常&lt;code&gt;InterruptException&lt;/code&gt;，但是线程的&lt;code&gt;interrupt&lt;/code&gt;状态会设置为&lt;code&gt;false&lt;/code&gt;。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;任何线程的中断状态都可以通过&lt;code&gt;isInterrupt&lt;/code&gt;方法来检测。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;如果是通过调用&lt;code&gt;interrupt&lt;/code&gt;方法来中断线程的话，该方法会返回&lt;code&gt;true&lt;/code&gt;，&lt;br&gt;  但是&lt;code&gt;status&lt;/code&gt;状态为false，因为无论是通过调用&lt;code&gt;Thread.interrupted&lt;/code&gt;方法还是处在&lt;br&gt;  &lt;code&gt;Object.wait(),Thread.sleep(),Thread.join()&lt;/code&gt;等方法的处理中系统都会抛出中断异常&lt;br&gt;  &lt;code&gt;InterruptException&lt;/code&gt;。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;调用&lt;code&gt;thread.join()&lt;/code&gt;方法会将调用线程挂起&lt;code&gt;suspend&lt;/code&gt;，并等待目标线程&lt;code&gt;thread&lt;/code&gt;完成。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;当线程的&lt;code&gt;thread.isAlive()&lt;/code&gt;返回&lt;code&gt;false&lt;/code&gt;时，&lt;code&gt;thread.join()&lt;/code&gt;会立即返回。还有一个带有超时时间版本的&lt;code&gt;join(time)&lt;/code&gt;方法，这个方法会在超时时间之后强制返回，即便线程还有没有处理完成。由&lt;code&gt;isAlive()&lt;/code&gt;方法的定义可以看出，对一个还未开始的线程&lt;code&gt;join()&lt;/code&gt;是没有任何意义的。同样的理由&lt;code&gt;join&lt;/code&gt;一个不是你创建的线程也是不明智的。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;最开始的时候，&lt;code&gt;Thread&lt;/code&gt;类是支持一些额外的控制方法的，如&lt;code&gt;suspend,stop,resume,destroy&lt;/code&gt;。现在&lt;code&gt;suspend,resume,stop&lt;/code&gt;方法已经被废弃了，&lt;code&gt;destroy&lt;/code&gt;方法从来就没在任何的发行版本的JDK中实现过，以后估计也不会了。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;现在可以通过&lt;code&gt;wating|notification&lt;/code&gt;技术实现和&lt;code&gt;suspend|resume&lt;/code&gt;方法一样的效果，并且更加安全，后续还会围绕&lt;code&gt;stop&lt;/code&gt;方法产生的问题继续展开讨论。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;静态方法&quot;&gt;&lt;a href=&quot;#静态方法&quot; class=&quot;headerlink&quot; title=&quot;静态方法&quot;&gt;&lt;/a&gt;静态方法&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;一些线程的方法被设计成只适用于当前运行的线程(例如，调用这些方法的的线程，即当前线程)。 为了强化这个意义，这些方法被定义成静态方法&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Thread.currentThread&lt;/code&gt;方法返回一个当前线程的引用，这个引用随后可以用于调用其他的非静态方法会。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Thread.interrupted&lt;/code&gt;方法会清除当前线程的中断状态并返回之前的状态(这也说明，一个线程的中断状态不可能被其他的线程清除)。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Thread.sleep(long millseconds)&lt;/code&gt;方法会导致当前线程挂起一段时间。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;Thread.yield&lt;/code&gt;方法仅仅是提示虚拟机如果有其他的可执行但是不在执行中的线程存在，线程调度器应该优先调度运行这些线程。但是不同的虚拟机可能对这个操作提示有任意的不同的解读。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;尽管没有强制的保证，&lt;code&gt;yield&lt;/code&gt;方法在一些不使用时间分片的提前抢占式调度策略的单核CPU的JVM实现版本中可能会非常有效果。在这种情况下，只有当一个线程阻塞了(执行IO或者sleep)，其他线程才有可能会被重新调度，在这些系统中，执行耗时的非阻塞计算的线程会一直占用线程执行周期，降低应用的响应响应速度。作为一个安全保护机制，执行非阻塞的可能会超过时间处理器的可接受的响应时间的计算的线程或者其他的响应式线程可以插入执行&lt;code&gt;yield&lt;/code&gt;方法(甚至执行sleep)，当然同样可以设置低的优先级，来让出CPU的执行时间。为了尽可能的减少不必要的影响，你还可以偶尔的时不时的调用一下&lt;code&gt;yield&lt;/code&gt;方法。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;在其他一些拥有预抢占式策略的虚拟机实现中，尤其是对于多核CPU来说，调度器可能甚至是提倡忽略&lt;code&gt;yield&lt;/code&gt;方法给出的提醒。&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;线程组&quot;&gt;&lt;a href=&quot;#线程组&quot; class=&quot;headerlink&quot; title=&quot;线程组&quot;&gt;&lt;/a&gt;线程组&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;每一个线程都是作为一个线程组的成员来构造的，默认情况下，这个线程组就是调用线程构造器的线程所在的线程组，线程组嵌套类似于树状结构。 当一个对象构造一个新的线程组时，这个线程组是嵌套在当前线程组下的，&lt;code&gt;getThreadGroup&lt;/code&gt;方法返回任何线程的线程组。&lt;/li&gt;
&lt;li&gt;&lt;p&gt;设计线程组的目的是用来支持动态地限制对线程访问操作的安全策略。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;例如，&lt;code&gt;interrupt&lt;/code&gt;中断一个和当前线程不是同一个线程组的线程是非法的，这个是虚拟机保护机制的一部分，有些问题，例如一个&lt;code&gt;applet&lt;/code&gt;想杀掉一个主屏幕的显示更新线程，通过限制不同线程组之间的访问权限可以阻止它们发生。&lt;br&gt;线程组同样可以设置一个最大的优先级，所有组内的线程都不能超过这个优先级。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;不提倡直接将线程组用于线程编程模型中，大部分的应用中，为达到独立于应用的目的，使用一般的集合类来追踪一组线程对象是更好的选择。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;在并发编程中极少用到的几个线程组的方法中，有一个方法&lt;code&gt;uncaughtException&lt;/code&gt;， 这个方法是当一个线程由于抛出一个未受检异常的时候调用，这个方法一般是会打印出异常栈。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;同步&quot;&gt;&lt;a href=&quot;#同步&quot; class=&quot;headerlink&quot; title=&quot;同步&quot;&gt;&lt;/a&gt;同步&lt;/h2&gt;&lt;h3 id=&quot;对象和锁&quot;&gt;&lt;a href=&quot;#对象和锁&quot; class=&quot;headerlink&quot; title=&quot;对象和锁&quot;&gt;&lt;/a&gt;对象和锁&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;每个&lt;code&gt;Object&lt;/code&gt;和其子类的对象实例都拥有一个锁。&lt;/li&gt;
&lt;li&gt;基础类型如：&lt;code&gt;int,float,long&lt;/code&gt;等并不是对象，只有通过他们的包装类才能被锁住。&lt;/li&gt;
&lt;li&gt;单独的变量不能被同步关键字修饰。&lt;/li&gt;
&lt;li&gt;锁操作只能在方法内使用。&lt;/li&gt;
&lt;li&gt;被&lt;code&gt;volatile&lt;/code&gt;关键字修饰的的字段，执行时会在原子性、可见性、和顺序执行上得到保障。&lt;/li&gt;
&lt;li&gt;基础数据类型的数组对象可以持有锁，但是数组内单个的元素是不能的。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Class&lt;/code&gt;实例是对象，和&lt;code&gt;Class&lt;/code&gt;对象关联的锁一般被用在静态方法中。&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;同步方法和同步块&quot;&gt;&lt;a href=&quot;#同步方法和同步块&quot; class=&quot;headerlink&quot; title=&quot;同步方法和同步块&quot;&gt;&lt;/a&gt;同步方法和同步块&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;synchronized&lt;/code&gt;关键字有两种语法形式，同步方法和同步代码块。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;同步块有一个对象参数，这个对象就是需要锁定的对象。&lt;br&gt;最常用的同步块参数是&lt;code&gt;this&lt;/code&gt;当前对象。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;同步关键字不作为方法签名的一部分。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;所以同步修饰关键字在重写父类的方法时不会自动的继承&lt;br&gt;并且接口内的方法无法用同步修饰符修饰，构造方法也不可以用同步修饰符修饰&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;同步修饰的子类实例方法和父类拥有同样的锁。但是内部类的同步方法和外部类是不同的锁。然而，一个非静态内部类方法可以锁住其外部类。&lt;/li&gt;
&lt;/ol&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; Class Inner&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;synchronized&lt;/span&gt;(OuterClass.&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;) &amp;#123; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		   &lt;span class=&quot;comment&quot;&gt;/* body */&lt;/span&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		   System.out.println(&lt;span class=&quot;string&quot;&gt;&quot;test Inner sync&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;获取和释放锁&quot;&gt;&lt;a href=&quot;#获取和释放锁&quot; class=&quot;headerlink&quot; title=&quot;获取和释放锁&quot;&gt;&lt;/a&gt;获取和释放锁&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;当使用&lt;code&gt;sychronized&lt;/code&gt;关键字的时候，锁操作遵循一个获取和释放协议。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;所有的锁操作都是块结构的，只有当要进入一个同步块或者同步方法的时候才会需要获取锁，退出的时候释放锁，即便是由于异常导致的退出也不能忘记释放锁的操作。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;锁操作是基于一个线程维度的，不是针对每个调用来说的。&lt;blockquote&gt;
&lt;p&gt;当一个线程抵达同步临界点，如果线程本就持有该对象的锁或者该对象的锁没有被其他线程持有，就占有锁并执行通过，否则就阻塞当前的线程执行。&lt;br&gt;重入锁和递归锁和默认的POSIX线程默认的锁策略不同。&lt;br&gt;这种机制对于同样的一个对象，允许一个同步方法针对同样的锁定对象&lt;code&gt;调用&lt;/code&gt;另外一个同步方法。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;针对同一个对象，不同线程的同步块同步方法之间遵循同样的对锁的获取和释放协议。即便一个同步方法在执行，另一个线程也可以同时调用同一个对象的其他非同步方法。也就是说，同步不等于原子操作，但是同步可以用来实现原子操作。&lt;/li&gt;
&lt;li&gt;当一个线程释放一个锁的时候，其他线程就可以获取到这个锁(有可能是同一个线程哦，如果线程释放后立即进入另外一个同步方法中)。&lt;em&gt;&lt;strong&gt;但是对于接下来哪个线程会获取到锁或什么时候一个线程能获取到锁虚拟机对此不作保证&lt;/strong&gt;&lt;/em&gt;。 也即是没有公平性的保证，&lt;em&gt;&lt;strong&gt;同样的，也没有一种机制去确定对于一个给定的锁，当前正在被哪个线程锁持有&lt;/strong&gt;&lt;/em&gt;。&lt;/li&gt;
&lt;li&gt;接下来会讨论到，除了控制锁，同步同样也对底层的内存模型有副作用。&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;静态&quot;&gt;&lt;a href=&quot;#静态&quot; class=&quot;headerlink&quot; title=&quot;静态&quot;&gt;&lt;/a&gt;静态&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;锁定一个对象的意思不是说会对该对象的类和父类的静态字段做访问限制。要对静态字段做访问限制需要通过静态方法和静态块来实现。静态同步锁是通过类对象关联的静态方法来实现的。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;类C的静态锁也可以通过以下方式在实例方法中访问：&lt;code&gt;synchronized(C.class) { /* body */ }&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;JVM内部获取和释放类对象的锁是在类加载和初始化的阶段之间完成的，使用普通类方法和类对象的同步块是不会影响这些JVM的内部机制的，除非是你自己写的一个特殊的类加载器或是你在静态序列初始化阶段同时持多个类对象的锁。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;没有其他的内部JVM的动作会单独的为你使用和创建的类获取锁。但是如果你的子类是&lt;code&gt;java.*&lt;/code&gt;包的，你    需要注意在这些包中的类的锁的策略。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;静态锁关联的类和其他类包括其父类都是不相关的。想通过在子类中增加一个静态方法来实现对父类中静态字段的访问现在是无效的。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;推荐使用明确的类名的静态块实现方式代替&lt;code&gt;getClass()&lt;/code&gt;的方式&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;synchronized&lt;/span&gt;(C.class) &amp;#123; &lt;span class=&quot;comment&quot;&gt;/* 推荐使用 */&lt;/span&gt; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;synchronized&lt;/span&gt;(getClass()) &amp;#123; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;/* 不推荐使用，这里其实锁的是实际运行时的类，&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	不是你想要的类 */&lt;/span&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;监视器&quot;&gt;&lt;a href=&quot;#监视器&quot; class=&quot;headerlink&quot; title=&quot;监视器&quot;&gt;&lt;/a&gt;监视器&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;同每个对象都有一把锁一样，每个对象都有一个只能被这些方法：&lt;code&gt;wait, notify, notifyAll and Thread.interrupt&lt;/code&gt;操控的&lt;strong&gt;线程等待集合&lt;/strong&gt;。同时持有锁和等待集合的对象一般统称为：&lt;strong&gt;监视器&lt;/strong&gt;。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;大部分的其他语言对这个的细节定义都有所不同。java中，&lt;strong&gt;任何对象都可以作为一个监视器&lt;/strong&gt;。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;每一个对象的等待集合都是在内部被JVM操控的。每个集合中都包含了一个被&lt;code&gt;wait&lt;/code&gt;方法阻塞住的线程列表，只有当其他线程调用了对象的&lt;em&gt;通知&lt;/em&gt;方法或wait被释放了之后这些线程才有可能继续执行。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;由于对象的等待集合和同步锁的交互方式决定了，这些方法&lt;code&gt;wait, notify, and notifyAll&lt;/code&gt;只能在对象的同步锁被占有的情况下才能被调用。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;这些约定机制无法在编译期由编译器去校验，所以如果在运行时不遵从这个机制的话会抛出一个运行时的    异常&lt;code&gt;IllegalMonitorStateException&lt;/code&gt;。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;这些方法的执行解释如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;wait&lt;/code&gt;&lt;/strong&gt; 线程&lt;code&gt;T&lt;/code&gt;执行这个方法会产生下列影响：&lt;ol&gt;
&lt;li&gt;如果当前线程被打断，则这个方法会立即退出，抛出&lt;code&gt;InterruptedException&lt;/code&gt;异常，否则该方法一直阻塞。&lt;/li&gt;
&lt;li&gt;JVM会把这个线程放在内部(也即是不提供给外部访问)的和目标对象关联的一个等待集合中。&lt;/li&gt;
&lt;li&gt;目标对象的同步锁被释放，但是所有该线程下持有的其他的锁还是会继续持有。即便这个目标对象的锁由于嵌套同步调用的原因被重入，也照样会被释放，在后者恢复后，锁的状态会被完全重置。&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;notify&lt;/code&gt;&lt;/strong&gt; 线程&lt;code&gt;K&lt;/code&gt;执行这个方法会有下列影响：&lt;ol&gt;
&lt;li&gt;如果在该对象的监视器等待集合中存在线程，JVM任务选择一个线程&lt;code&gt;T&lt;/code&gt;并从等待集合中移除。如果等待集合中存在超过一个的线程的话，JVM对具体选择哪个进行移除操作不做保证。&lt;/li&gt;
&lt;li&gt;被选择的线程&lt;code&gt;T&lt;/code&gt;必须重新去竞争获取目标对象的同步锁，这样总是会导致线程&lt;code&gt;T&lt;/code&gt;阻塞一直到调用&lt;code&gt;notify&lt;/code&gt;的线程&lt;code&gt;K&lt;/code&gt;释放目标对象的锁为止。这期间如果其他的线程&lt;code&gt;P&lt;/code&gt;先抢占到这个锁的话，阻塞会一直继续。&lt;/li&gt;
&lt;li&gt;最后如果线程&lt;code&gt;T&lt;/code&gt;获取到对象的锁，就会从等待的执行点唤醒恢复执行。&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;notifyAll&lt;/code&gt;&lt;/strong&gt; 这个方法和&lt;code&gt;notify&lt;/code&gt;方法的工作机制是一样的，不同之处是，这个方法是针对等待集合中的所有线程都有效果，但是同样的，由于需要竞争获取目标对象的同步锁，所以实际上是一次一个线程执行的。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;interrupt&lt;/code&gt;&lt;/strong&gt;  &lt;ol&gt;
&lt;li&gt;如果一个线程正在挂起等待状态，这时候调用&lt;code&gt;Thread.interrupt&lt;/code&gt;方法，这种情况会产生和&lt;code&gt;notify&lt;/code&gt;机制同样的反应，只不过在重新获取到锁之后会抛出一个&lt;code&gt;InterruptedException&lt;/code&gt;异常，并且线程的的中断状态会被置成&lt;code&gt;false&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;如果&lt;code&gt;interrupt&lt;/code&gt;和&lt;code&gt;notify&lt;/code&gt;在同一时间发生，JVM不保证哪一个会先得到执行，所以两个结果都是有可能的(以后的Java语言规范(JLS)可能对这种情况的结果会有一个确定的保证)。&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;code&gt;timed waits&lt;/code&gt;&lt;/strong&gt; 带过期时间的wait方法&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;带过期时间的wait方法：&lt;code&gt;wait(long msecs), wait(long msecs, int nanosecs)&lt;/code&gt;会在设置的最大时间内将线程维持在等待队列中。这个的执行效果和不带时间限制的wait方法的执行效果是基本一致的，只是说，带过期时间的wait方法会在过期时间到之后如果还没有被&lt;code&gt;notify&lt;/code&gt;的话，等待线程会自动被从等待集合中释放。这两个版本的方法并没有其他的状态上的区别。&lt;/li&gt;
&lt;li&gt;超时时间版的wait方法会在超时时间到之后，随机的一个时间点被唤醒，这是由于线程竞争和CPU调度策略以及定时器的时间粒度等决定的。(对于定时器的时间粒度的影响，JVM并不给出保证，我们观察到的大部分的JVM是：当时间参数设置的小于1毫秒的情况下，响应时间大约在1-20毫秒之内)。&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;Thread.sleep(long msecs)&lt;/code&gt;方法内部其实使用的是&lt;code&gt;wait(long msecs)&lt;/code&gt;方法，但是这个睡眠方法并没有绑定到当前同步块或者同步方法对应的对象的锁。它的实现可以用以下代码来展现：&lt;/p&gt;
  &lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (msecs != &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;)  &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    Object s = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Object(); &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;synchronized&lt;/span&gt;(s) &amp;#123; s.wait(msecs); &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;  当然了，各个系统不必非得按照这种方式实现&lt;code&gt;sleep&lt;/code&gt;方法，同时请注意，&lt;code&gt;sleep(0)&lt;/code&gt;的意思是线            程至少暂停0毫秒，鬼知道这是什么意思！&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
</content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;原文地址：&lt;a href=&quot;http://gee.cs.oswego.edu/dl/cpj/mechanics.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://gee.cs.oswego.edu/dl/cpj
    
    </summary>
    
      <category term="翻译" scheme="http://kriswan.github.io/categories/%E7%BF%BB%E8%AF%91/"/>
    
    
      <category term="Java" scheme="http://kriswan.github.io/tags/Java/"/>
    
      <category term="翻译" scheme="http://kriswan.github.io/tags/%E7%BF%BB%E8%AF%91/"/>
    
      <category term="DougLee" scheme="http://kriswan.github.io/tags/DougLee/"/>
    
  </entry>
  
  <entry>
    <title>Java阻塞队列(BlockingQueue)</title>
    <link href="http://kriswan.github.io/2016/08/15/Java%E9%98%BB%E5%A1%9E%E9%98%9F%E5%88%97-BlockingQueue/"/>
    <id>http://kriswan.github.io/2016/08/15/Java阻塞队列-BlockingQueue/</id>
    <published>2016-08-15T10:45:01.000Z</published>
    <updated>2016-08-29T14:14:44.000Z</updated>
    
    <content type="html">&lt;h3 id=&quot;队列-Queue&quot;&gt;&lt;a href=&quot;#队列-Queue&quot; class=&quot;headerlink&quot; title=&quot;队列 Queue&quot;&gt;&lt;/a&gt;队列 Queue&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;队列是专门设计为存储需要优先处理的对象的集合, 队列中的集合操作方法有两种形式: &lt;strong&gt;&lt;em&gt;1:抛出异常,2:返回特定值&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&quot;/images/14724800810004.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;异常&lt;/th&gt;
&lt;th&gt;特定值&lt;/th&gt;
&lt;th&gt;解释&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;add(e)&lt;/td&gt;
&lt;td&gt;offer(e)&lt;/td&gt;
&lt;td&gt;插入&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;remove(e)&lt;/td&gt;
&lt;td&gt;poll()&lt;/td&gt;
&lt;td&gt;删除&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;element()&lt;/td&gt;
&lt;td&gt;peek&lt;/td&gt;
&lt;td&gt;获取队列头部元素,但是不删除&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
</content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;队列-Queue&quot;&gt;&lt;a href=&quot;#队列-Queue&quot; class=&quot;headerlink&quot; title=&quot;队列 Queue&quot;&gt;&lt;/a&gt;队列 Queue&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;队列是专门设计为存储需要优先处理的对象的集合, 队列中的集合操作方
    
    </summary>
    
      <category term="数据结构" scheme="http://kriswan.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
      <category term="Java" scheme="http://kriswan.github.io/tags/Java/"/>
    
      <category term="数据结构" scheme="http://kriswan.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>记录一次踩坑</title>
    <link href="http://kriswan.github.io/2016/06/25/%E8%AE%B0%E5%BD%95%E4%B8%80%E6%AC%A1%E8%B8%A9%E5%9D%91/"/>
    <id>http://kriswan.github.io/2016/06/25/记录一次踩坑/</id>
    <published>2016-06-25T08:47:33.000Z</published>
    <updated>2016-08-29T13:52:06.000Z</updated>
    
    <content type="html">&lt;p&gt;&lt;img src=&quot;/images/hole.jpg&quot; alt=&quot;atom&quot;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;记录一次去年底的踩坑过程&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;起因介绍&quot;&gt;&lt;a href=&quot;#起因介绍&quot; class=&quot;headerlink&quot; title=&quot;起因介绍&quot;&gt;&lt;/a&gt;起因介绍&lt;/h3&gt;&lt;p&gt;业务系统正在稳当的跑着，结果半夜报警电话不停，机器load报警，起来看到cpu使用率很低，报警是由于内存导致的，非常奇怪本身系统的逻辑很简单，&lt;br&gt;就是保险系统的生单和出保逻辑对外提供一套dubbo的api服务。&lt;/p&gt;
&lt;h3 id=&quot;逐层分析&quot;&gt;&lt;a href=&quot;#逐层分析&quot; class=&quot;headerlink&quot; title=&quot;逐层分析&quot;&gt;&lt;/a&gt;逐层分析&lt;/h3&gt;&lt;p&gt;按理推断即便系统有问题有也应该是业务系统应该报警才对，怎么会是机器在报警，为了验证自己的想法，&lt;br&gt;去看tomcat的gc日志，和自己预期一致，没有发现有fullgc, 系统日志也没有OOM异常，那就奇怪，4g内存，&lt;br&gt;jvm申请3g最大的堆内存，按道理机器不应该报内存不够啊，折腾了半天还是没有发现有什么异常的地方，&lt;br&gt;但是load的报警还在持续，回到刚刚的gc日志，忽然意识到一个问题居然一天之内一次fullgc都没发现，&lt;br&gt;很奇怪啊，按道理系统稳定运行一段时间后，fullgc应该是按照一个稳定的频率出现才对，&lt;br&gt;到服务器上sudo jstat -gcutil pid看了下gc统计日志，居然真是一次都木有啊&lt;/p&gt;
&lt;h3 id=&quot;推理演变&quot;&gt;&lt;a href=&quot;#推理演变&quot; class=&quot;headerlink&quot; title=&quot;推理演变&quot;&gt;&lt;/a&gt;推理演变&lt;/h3&gt;&lt;p&gt;把自己收集到的素材整理下： &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;系统没有&lt;code&gt;FullGC&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;tomcat 内存足够&lt;/li&gt;
&lt;li&gt;虚机load报警&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;这么说来推测一下，一定是有什么地方申请了一块内存但是没有释放，最起码是System.gc()没起效果&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;如果系统本身一直是在年轻代进行垃圾回收,那就意味着一定不会触发fullGC, 通过观察gc日志和对系统本身使用的&lt;br&gt;了解,我推断是由于使用了堆外内存导致的, 公司所有的中间件里面底层都是依赖netty来构建的,dubbo,asynchttp,&lt;br&gt;而系统本身就是犹如一个高速公路一样,只是做数据的传输工作,应用本身基本上没有本地缓存,而且强依赖外部接口(保险平台),&lt;br&gt;dubbo,asynchttp这些中间件的使用率非常频繁, &lt;/p&gt;
&lt;p&gt;netty本身是会显式的调用System.gc()进行垃圾回收的,再联想到公司默认的jvm配置-XX:+DisableExplicitGC,这就不奇怪了,&lt;br&gt;本身如果系统自己有fullGC的话,那就是系统自身的fullGC来回收,但是这条路也不同,这就导致来堆外内存没有释放, &lt;/p&gt;
&lt;p&gt;所以结论是: netty不停的申请堆外内存,而又得不到释放,导致系统load压力一致在涨&lt;/p&gt;
&lt;h3 id=&quot;验证&quot;&gt;&lt;a href=&quot;#验证&quot; class=&quot;headerlink&quot; title=&quot;验证&quot;&gt;&lt;/a&gt;验证&lt;/h3&gt;&lt;p&gt;&lt;code&gt;-XX:+DisableExplicitGC&lt;/code&gt; 将这个参数去掉, 观察系统10分钟,&lt;code&gt;sudo jstat -gcutil pid&lt;/code&gt; 发现有fullGC了, 系统的load慢慢也下来了&lt;/p&gt;
&lt;h3 id=&quot;批评自己&quot;&gt;&lt;a href=&quot;#批评自己&quot; class=&quot;headerlink&quot; title=&quot;批评自己&quot;&gt;&lt;/a&gt;批评自己&lt;/h3&gt;&lt;p&gt;其实上面的验证方法不太符合工程学实现的要求, 我们是通过推理来验证自己的想法, 还应该讲tomcat的gc dump出来,通过分析工具分析系统的哪一个线程和代码会有可能有问题,这才是比较科学的分析方法&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/images/hole.jpg&quot; alt=&quot;atom&quot;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;记录一次去年底的踩坑过程&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;起因介绍&quot;&gt;&lt;a href=&quot;#起因介绍&quot; class=&quot;headerlin
    
    </summary>
    
      <category term="Java" scheme="http://kriswan.github.io/categories/Java/"/>
    
    
      <category term="Java" scheme="http://kriswan.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Alfred介绍</title>
    <link href="http://kriswan.github.io/2016/06/09/Alfred%E4%BB%8B%E7%BB%8D/"/>
    <id>http://kriswan.github.io/2016/06/09/Alfred介绍/</id>
    <published>2016-06-09T13:43:07.000Z</published>
    <updated>2016-08-29T13:52:24.000Z</updated>
    
    <content type="html">&lt;p&gt;&lt;img src=&quot;/images/Alfred-icon.jpg&quot; alt=&quot;/images/Alfred-icon.jpg&quot;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;以前只是听说alfred比mac自带的搜索工具spotlight要强大很多，下载下来发现其实也没体验到有多强大，最近这几天闲来无聊，把玩mac的时候尝试了下alfred的其他功能，不得不说太强大了，so powerful !&lt;/p&gt;
&lt;p&gt;Alfred is an award-winning app for Mac OS X which boosts your efficiency with hotkeys, keywords, text expansion and more. Search your Mac and the web, and be more productive with custom actions to control your Mac.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;基础功能&quot;&gt;&lt;a href=&quot;#基础功能&quot; class=&quot;headerlink&quot; title=&quot;基础功能&quot;&gt;&lt;/a&gt;基础功能&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;打开应用程序&lt;/code&gt;, 覆盖了spotlight的所有功能， and there is more&lt;/li&gt;
&lt;li&gt;&lt;code&gt;简单搜索&lt;/code&gt;，直接在输入框里面输入你需要的关键词，回车即提交Google搜索&lt;/li&gt;
&lt;li&gt;&lt;code&gt;定位文件&lt;/code&gt;，ctrl-space 呼出Alfred后，键入空格，输入你要查找文件名，即可定位文件，回车打开，command+回车打开文件所在文件夹&lt;/li&gt;
&lt;li&gt;&lt;code&gt;复杂操作文件&lt;/code&gt;：通过find、open、in等关键词搜索文件。find是定位文件，open是定位并打开文件，in是在文件中进行全文检索，三种检索方式基本上可以找到任何你想找的文件&lt;/li&gt;
&lt;li&gt;&lt;code&gt;操作Shell&lt;/code&gt;：输入&lt;code&gt;&amp;gt;&lt;/code&gt;即可直接运行shell命令。比如&lt;code&gt;&amp;gt; cat *.py | grep print，可以直接打开终端并查找当前py文件中包含 print 的语句。&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;控制itunes播放&lt;/code&gt;，输入iTunes，会出现一个 iTunes mini play，打开可以通过 Alfred 控制音乐播放。用快捷键也能完成这个功能：shift+option+command+p&lt;/li&gt;
&lt;li&gt;输入email，后面跟邮件地址，可以直接打开写邮件的界面&lt;/li&gt;
&lt;li&gt;&lt;code&gt;定义文字片段和粘贴板&lt;/code&gt;，在 Alfred 的设置-Features 选中Clipboard，在Snippets里定义自己常用的文字片段，比如代码、地址等等等，之后以&lt;code&gt;option+command+l&lt;/code&gt; (&lt;em&gt;这个快捷键是我自己定义的，原先的和其他的快捷键有冲突&lt;/em&gt;)呼出界面，输入文字片段的关键字回车即可。&lt;em&gt;&lt;u&gt;这里可以保存很长时间的粘贴板的内容，赞！！！&lt;/u&gt;&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;自定义搜索&lt;/code&gt;，这个稍微复杂些，打开设置窗口，点击Features-Custom Search，在右侧栏添加自定义搜索。举几个例子帮助大家理解下规则：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;搜索iOS App：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Search URL：&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;itunes://ax.search.itunes.apple.com/WebObjects/MZSearch.woa/wa/search?term=&amp;#123;query&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Title：iOS App&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;搜索Mac app:&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Search URL:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;macappstore://ax.search.itunes.apple.com/WebObjects/MZSearch.woa/wa/search?q=&amp;#123;query&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Title: mac app&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;keywords: mac&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;workflow-插件&quot;&gt;&lt;a href=&quot;#workflow-插件&quot; class=&quot;headerlink&quot; title=&quot;workflow 插件&quot;&gt;&lt;/a&gt;workflow 插件&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;alfred给予了用户很大的自由度去对其进行扩展，这就是workflow插件机制，用户可以按照一定的开发规范，开发各自的任务插件，比如打电话、发短信、播放音乐，搜索天气等等…是不是非常的强大！&lt;/p&gt;
&lt;p&gt;With Alfred’s Powerpack and workflows, you can extend Alfred and get things done in your own way. Replace repetitive tasks with workflows, and boost your productivity.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;先看看我的workflow&quot;&gt;&lt;a href=&quot;#先看看我的workflow&quot; class=&quot;headerlink&quot; title=&quot;先看看我的workflow&quot;&gt;&lt;/a&gt;先看看我的workflow&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;/images/myalfred_workflow.png&quot; alt=&quot;myalfredworkflow&quot;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;有非常多的这种workflow可以供我们下载使用：当然我们也可以去Google，一搜一大堆，或者直接安装一个叫&lt;code&gt;workflow search&lt;/code&gt;的workflow,直接在alfred上搜，下面提供两个比较常用的搜索地址：&lt;br&gt;&lt;a href=&quot;https://www.alfredapp.com/workflows&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://www.alfredapp.com/workflows&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://www.alfredworkflow.com&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.alfredworkflow.com&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&quot;workflow-search&quot;&gt;&lt;a href=&quot;#workflow-search&quot; class=&quot;headerlink&quot; title=&quot;workflow search&quot;&gt;&lt;/a&gt;workflow search&lt;/h4&gt;&lt;p&gt;这个插件可以随时直接在搜索框中搜索可用的workflow,并下载，关键字是：&lt;code&gt;wf&lt;/code&gt;&lt;br&gt;&lt;img src=&quot;/images/workflow_search.png&quot; alt=&quot;workflow_search&quot;&gt;&lt;/p&gt;
&lt;h4 id=&quot;baidu-weather&quot;&gt;&lt;a href=&quot;#baidu-weather&quot; class=&quot;headerlink&quot; title=&quot;baidu weather&quot;&gt;&lt;/a&gt;baidu weather&lt;/h4&gt;&lt;p&gt;直接查看当前城市的天气状况，关键字：&lt;code&gt;tq&lt;/code&gt;&lt;br&gt;&lt;img src=&quot;/images/baidu_weather.png&quot; alt=&quot;baidu_weather&quot;&gt;&lt;/p&gt;
&lt;h4 id=&quot;air-quality&quot;&gt;&lt;a href=&quot;#air-quality&quot; class=&quot;headerlink&quot; title=&quot;air quality&quot;&gt;&lt;/a&gt;air quality&lt;/h4&gt;&lt;p&gt;查看当前城市的空气质量, 关键字： &lt;code&gt;air&lt;/code&gt;&lt;br&gt;&lt;img src=&quot;/images/air_quality.png&quot; alt=&quot;air_quality&quot;&gt;&lt;/p&gt;
&lt;h4 id=&quot;copy-path&quot;&gt;&lt;a href=&quot;#copy-path&quot; class=&quot;headerlink&quot; title=&quot;copy path&quot;&gt;&lt;/a&gt;copy path&lt;/h4&gt;&lt;p&gt;这个workflow 直接做成快捷键的方式，在finder里面选中文件后，直接快捷键：&lt;code&gt;ctrl-shift-c&lt;/code&gt; 即可拷贝当前文件的绝对路径&lt;br&gt;&lt;img src=&quot;/images/copy_path.png&quot; alt=&quot;copy_path&quot;&gt;&lt;/p&gt;
&lt;h4 id=&quot;有道翻译&quot;&gt;&lt;a href=&quot;#有道翻译&quot; class=&quot;headerlink&quot; title=&quot;有道翻译&quot;&gt;&lt;/a&gt;有道翻译&lt;/h4&gt;&lt;p&gt;直接在搜索框中翻译，自动转换中英文， 关键字： &lt;code&gt;yd&lt;/code&gt;&lt;br&gt;&lt;img src=&quot;/images/youdao.png&quot; alt=&quot;youdao&quot;&gt;&lt;/p&gt;
&lt;h4 id=&quot;知乎日报&quot;&gt;&lt;a href=&quot;#知乎日报&quot; class=&quot;headerlink&quot; title=&quot;知乎日报&quot;&gt;&lt;/a&gt;知乎日报&lt;/h4&gt;&lt;p&gt;直接查看知乎日报的热门文章列表， 关键字： &lt;code&gt;zh&lt;/code&gt;&lt;br&gt;&lt;img src=&quot;/images/zhihudaily.png&quot; alt=&quot;zhihudaily&quot;&gt;&lt;/p&gt;
&lt;h4 id=&quot;人民币金额大写&quot;&gt;&lt;a href=&quot;#人民币金额大写&quot; class=&quot;headerlink&quot; title=&quot;人民币金额大写&quot;&gt;&lt;/a&gt;人民币金额大写&lt;/h4&gt;&lt;p&gt;直接转换人民币金额的大写中文， 关键字： &lt;code&gt;cny&lt;/code&gt;&lt;br&gt;&lt;img src=&quot;/images/cny.png&quot; alt=&quot;cny&quot;&gt;&lt;/p&gt;
&lt;h4 id=&quot;stackoverflow-搜索&quot;&gt;&lt;a href=&quot;#stackoverflow-搜索&quot; class=&quot;headerlink&quot; title=&quot;stackoverflow 搜索&quot;&gt;&lt;/a&gt;stackoverflow 搜索&lt;/h4&gt;&lt;p&gt;直接搜索stackoverflow上的相关答案信息，关键字： &lt;code&gt;.so&lt;/code&gt;&lt;br&gt;&lt;img src=&quot;/images/stackoverflow_wf.png&quot; alt=&quot;stackoverflow&quot;&gt;&lt;/p&gt;
&lt;h4 id=&quot;电话呼叫&quot;&gt;&lt;a href=&quot;#电话呼叫&quot; class=&quot;headerlink&quot; title=&quot;电话呼叫&quot;&gt;&lt;/a&gt;电话呼叫&lt;/h4&gt;&lt;p&gt;直接呼叫iphone上的联系人： 关键字: &lt;code&gt;call&lt;/code&gt; 这个貌似不支持电话薄的查询，需要每次都输入电话号码，比较麻烦&lt;br&gt;&lt;img src=&quot;/images/call.png&quot; alt=&quot;call&quot;&gt;&lt;br&gt;&lt;img src=&quot;/images/calling.png&quot; alt=&quot;calling&quot;&gt;&lt;/p&gt;
&lt;h4 id=&quot;evernote-搜索&quot;&gt;&lt;a href=&quot;#evernote-搜索&quot; class=&quot;headerlink&quot; title=&quot;evernote 搜索&quot;&gt;&lt;/a&gt;evernote 搜索&lt;/h4&gt;&lt;p&gt;搜索印象笔记中的内容，同时可以新建笔记，&lt;br&gt;关键字：en 搜索笔记，ennew 新建笔记&lt;br&gt;&lt;img src=&quot;/images/evernote.png&quot; alt=&quot;evernote&quot;&gt;&lt;/p&gt;
&lt;h4 id=&quot;百度地图搜索&quot;&gt;&lt;a href=&quot;#百度地图搜索&quot; class=&quot;headerlink&quot; title=&quot;百度地图搜索&quot;&gt;&lt;/a&gt;百度地图搜索&lt;/h4&gt;&lt;p&gt;搜索百度地图，&lt;br&gt;关键字： setl: 设置当前城市， bmap 定位具体地点&lt;br&gt;&lt;img src=&quot;/images/baidumap.png&quot; alt=&quot;baidumap&quot;&gt;&lt;/p&gt;
&lt;h4 id=&quot;结语&quot;&gt;&lt;a href=&quot;#结语&quot; class=&quot;headerlink&quot; title=&quot;结语&quot;&gt;&lt;/a&gt;结语&lt;/h4&gt;&lt;blockquote class=&quot;blockquote-center&quot;&gt;&lt;p&gt;alfred 的一般基本功能已经能满足日常大部分的使用了，而且比spotlight要好用的多，付费的powerpak－workflow进一步提升了这个工具的逼格，把玩过后，我只想说，不要太牛掰啊！&lt;/p&gt;
&lt;/blockquote&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/images/Alfred-icon.jpg&quot; alt=&quot;/images/Alfred-icon.jpg&quot;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;以前只是听说alfred比mac自带的搜索工具spotlight要强大很多，下载下来发现其实也没体验到
    
    </summary>
    
      <category term="DevTools" scheme="http://kriswan.github.io/categories/DevTools/"/>
    
    
      <category term="DevTools" scheme="http://kriswan.github.io/tags/DevTools/"/>
    
  </entry>
  
  <entry>
    <title>Atom快捷键整理</title>
    <link href="http://kriswan.github.io/2016/06/08/Atom%E5%BF%AB%E6%8D%B7%E9%94%AE%E6%95%B4%E7%90%86/"/>
    <id>http://kriswan.github.io/2016/06/08/Atom快捷键整理/</id>
    <published>2016-06-08T03:27:29.000Z</published>
    <updated>2016-08-29T13:52:29.000Z</updated>
    
    <content type="html">&lt;p&gt;&lt;img src=&quot;/images/atom-light-640x360.jpg&quot; alt=&quot;atom&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;Atom快捷键&quot;&gt;&lt;a href=&quot;#Atom快捷键&quot; class=&quot;headerlink&quot; title=&quot;Atom快捷键&quot;&gt;&lt;/a&gt;Atom快捷键&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;最近在用文本编辑器Atom, 这里整理下这个工具的一些比较常用的快捷键&lt;br&gt;这里只针对平时用的频率比较高的Atom的一些快捷键做整理&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;ctrl-shift-U&lt;/code&gt; 调出切换编码选项 &lt;em&gt;&lt;u&gt;切换编码哦&lt;/u&gt;&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;文件切换&quot;&gt;&lt;a href=&quot;#文件切换&quot; class=&quot;headerlink&quot; title=&quot;文件切换&quot;&gt;&lt;/a&gt;文件切换&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;alt-cmd-s&lt;/code&gt; 保存所有打开的文件&lt;/li&gt;
&lt;li&gt;&lt;code&gt;cmd-o&lt;/code&gt; 打开文件目录&lt;/li&gt;
&lt;li&gt;&lt;code&gt;cmd-\&lt;/code&gt; 显示或隐藏目录树&lt;/li&gt;
&lt;li&gt;&lt;code&gt;cmd-t&lt;/code&gt; 查找文件&lt;/li&gt;
&lt;li&gt;&lt;code&gt;cmd-b&lt;/code&gt; 在打开的文件之间切换&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ctrl-shift-c&lt;/code&gt; 复制当前文件绝对路径&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;目录树操作&quot;&gt;&lt;a href=&quot;#目录树操作&quot; class=&quot;headerlink&quot; title=&quot;目录树操作&quot;&gt;&lt;/a&gt;目录树操作&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;ctrl-0&lt;/code&gt; 焦点切换到目录树(再按一次或者Esc退出目录树)&lt;ul&gt;
&lt;li&gt;&lt;code&gt;a&lt;/code&gt; 添加文件&lt;/li&gt;
&lt;li&gt;&lt;code&gt;d&lt;/code&gt; 将当前文件另存为(duplicate)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;i&lt;/code&gt; 显示(隐藏)版本控制忽略的文件&lt;/li&gt;
&lt;li&gt;&lt;code&gt;delete&lt;/code&gt; 删除文件&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;alt-right 和 alt-left&lt;/code&gt; 展开(隐藏)所有目录&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ctrl-al-] 和 ctrl-al-[&lt;/code&gt; 同上&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ctrl-[ 和 ctrl-]&lt;/code&gt; 展开(隐藏)当前目录&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ctrl-f 和 ctrl-b&lt;/code&gt; 同上&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;导航&quot;&gt;&lt;a href=&quot;#导航&quot; class=&quot;headerlink&quot; title=&quot;导航&quot;&gt;&lt;/a&gt;导航&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;ctrl-p&lt;/code&gt; 前一行&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ctrl-n&lt;/code&gt; 后一行&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ctrl-f&lt;/code&gt; 前进一个字符&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ctrl-b&lt;/code&gt; 后退一个字符&lt;/li&gt;
&lt;li&gt;&lt;code&gt;cmd-right, ctrl-E&lt;/code&gt; 移动到一行结束&lt;/li&gt;
&lt;li&gt;&lt;code&gt;cmd-left, ctrl-A&lt;/code&gt; 移动到一行开始&lt;/li&gt;
&lt;li&gt;&lt;code&gt;cmd-up&lt;/code&gt; 移动到文件开始&lt;/li&gt;
&lt;li&gt;&lt;code&gt;cmd-down&lt;/code&gt; 移动到文件结束&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ctrl-g&lt;/code&gt; 移动到指定行 &lt;code&gt;行号&lt;/code&gt; 处&lt;/li&gt;
&lt;li&gt;&lt;code&gt;cmd-r&lt;/code&gt; 在方法之间跳转&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;文本选取&quot;&gt;&lt;a href=&quot;#文本选取&quot; class=&quot;headerlink&quot; title=&quot;文本选取&quot;&gt;&lt;/a&gt;文本选取&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;ctrl-shift-P&lt;/code&gt; 选取至上一行&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ctrl-shift-N&lt;/code&gt; 选取至下一样&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ctrl-shift-E, cmd-shift-right&lt;/code&gt; 选取至本行结束&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ctrl-shift-A, cmd-shift-left&lt;/code&gt; 选取至本行开始&lt;/li&gt;
&lt;li&gt;&lt;code&gt;cmd-shift-up&lt;/code&gt; 选取至文件开始&lt;/li&gt;
&lt;li&gt;&lt;code&gt;cmd-shift-down&lt;/code&gt; 选取至文件结尾&lt;/li&gt;
&lt;li&gt;&lt;code&gt;cmd-click&lt;/code&gt; 增加新光标 &lt;em&gt;&lt;u&gt;这个帅气&lt;/u&gt;&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;cmd-shift-L&lt;/code&gt; 将多行选取改为多行光标 &lt;em&gt;&lt;u&gt;可以利用这个搞多行编辑&lt;/u&gt;&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;cmd-D&lt;/code&gt; 选取文档中和当前单词相同的下一处 &lt;em&gt;&lt;u&gt;黑科技啊&lt;/u&gt;&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ctrl-cmd-G&lt;/code&gt; 选取文档中所有和当前光标单词相同的位置&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;文本编辑&quot;&gt;&lt;a href=&quot;#文本编辑&quot; class=&quot;headerlink&quot; title=&quot;文本编辑&quot;&gt;&lt;/a&gt;文本编辑&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;cmd-K, cmd-U&lt;/code&gt; 使当前字符大写&lt;/li&gt;
&lt;li&gt;&lt;code&gt;cmd-K, cmd-L&lt;/code&gt; 使当前字符小写&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ctrl-shift-K&lt;/code&gt; 删除当前行&lt;/li&gt;
&lt;li&gt;&lt;code&gt;cmd-backspace&lt;/code&gt; 删除到当前行开始&lt;/li&gt;
&lt;li&gt;&lt;code&gt;cmd-fn-backspace&lt;/code&gt; 删除到当前行结束&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;括号跳转&quot;&gt;&lt;a href=&quot;#括号跳转&quot; class=&quot;headerlink&quot; title=&quot;括号跳转&quot;&gt;&lt;/a&gt;括号跳转&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;ctrl-m&lt;/code&gt; 相应括号之间，html tag之间等跳转&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ctrl-cmd-m&lt;/code&gt; 括号(tag)之间文本选取&lt;/li&gt;
&lt;li&gt;&lt;code&gt;alt-cmd-.&lt;/code&gt; 关闭当前XML/HTML tag&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;查找&quot;&gt;&lt;a href=&quot;#查找&quot; class=&quot;headerlink&quot; title=&quot;查找&quot;&gt;&lt;/a&gt;查找&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;cmd-F&lt;/code&gt; 在buffer中查找&lt;/li&gt;
&lt;li&gt;&lt;code&gt;cmd-shift-f&lt;/code&gt; 在整个工程中查找&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;代码操作&quot;&gt;&lt;a href=&quot;#代码操作&quot; class=&quot;headerlink&quot; title=&quot;代码操作&quot;&gt;&lt;/a&gt;代码操作&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;alt-cmd-[&lt;/code&gt; 折叠&lt;/li&gt;
&lt;li&gt;&lt;code&gt;alt-cmd-]&lt;/code&gt; 展开&lt;/li&gt;
&lt;li&gt;&lt;code&gt;alt-cmd-shift-{&lt;/code&gt; 折叠全部&lt;/li&gt;
&lt;li&gt;&lt;code&gt;alt-cmd-shift-}&lt;/code&gt; 展开全部&lt;/li&gt;
&lt;li&gt;&lt;code&gt;cmd-k cmd-N&lt;/code&gt; 指定折叠层级 N为层级数&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ctrl-space&lt;/code&gt; 提示补全信息&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;文件类型选择&quot;&gt;&lt;a href=&quot;#文件类型选择&quot; class=&quot;headerlink&quot; title=&quot;文件类型选择&quot;&gt;&lt;/a&gt;文件类型选择&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;ctrl-shift-L&lt;/code&gt; 选择文本类型  &lt;em&gt;&lt;u&gt;选择当前文件的文本类型哦&lt;/u&gt;&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ctrl-shift-M&lt;/code&gt; Markdown预览&lt;/li&gt;
&lt;li&gt;&lt;code&gt;alt-shift-S&lt;/code&gt; 代码片段查找&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;格式化beautify&quot;&gt;&lt;a href=&quot;#格式化beautify&quot; class=&quot;headerlink&quot; title=&quot;格式化beautify&quot;&gt;&lt;/a&gt;格式化beautify&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;ctrl-alt-b&lt;/code&gt; 格式化&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;MacOS快捷键&quot;&gt;&lt;a href=&quot;#MacOS快捷键&quot; class=&quot;headerlink&quot; title=&quot;MacOS快捷键&quot;&gt;&lt;/a&gt;MacOS快捷键&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;mac系统上的快捷键做了一次整理，方便自己&lt;br&gt;鼠标扔掉 ?&lt;br&gt;触摸板扔掉 ？&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&quot;/images/macbookpro.jpg&quot; alt=&quot;macbookpro&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;系统标示符&quot;&gt;&lt;a href=&quot;#系统标示符&quot; class=&quot;headerlink&quot; title=&quot;系统标示符&quot;&gt;&lt;/a&gt;系统标示符&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;Mac 菜单和键盘通常使用符号来代表某些按键，其中包括以下修饰键：&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;Command ⌘&lt;/li&gt;
&lt;li&gt;Shift ⇧&lt;/li&gt;
&lt;li&gt;Option ⌥&lt;/li&gt;
&lt;li&gt;Control ⌃&lt;/li&gt;
&lt;li&gt;Caps Lock ⇪&lt;/li&gt;
&lt;li&gt;Fn&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;系统常用快捷键&quot;&gt;&lt;a href=&quot;#系统常用快捷键&quot; class=&quot;headerlink&quot; title=&quot;系统常用快捷键&quot;&gt;&lt;/a&gt;系统常用快捷键&lt;/h3&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;快捷键&lt;/th&gt;
&lt;th&gt;描述&lt;/th&gt;
&lt;th&gt;备注&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Command-G&lt;/td&gt;
&lt;td&gt;再次查找：查找之前所找到项目出现的下一个位置。要查找其出现的上一个位置，请按 Command-Shift-G。&lt;/td&gt;
&lt;td&gt;这个有用啊&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Command-M&lt;/td&gt;
&lt;td&gt;将最前端的窗口最小化至 Dock。要最小化最前端应用的所有窗口，请按 Command-Option-M。&lt;/td&gt;
&lt;td&gt;看片的时候有用哦&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Command-H&lt;/td&gt;
&lt;td&gt;隐藏最前端应用的窗口。要查看最前端的应用但隐藏所有其他应用，请按 Command-Option-H。&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Option-Command-Esc&lt;/td&gt;
&lt;td&gt;强制退出：选择要强制退出的应用。或者，按住 Command-Shift-Option-Esc 3 秒钟可仅强制最前端的应用退出。&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Shift-Command-3&lt;/td&gt;
&lt;td&gt;屏幕快照：拍摄整个屏幕的屏幕快照&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Command-逗号 (,)&lt;/td&gt;
&lt;td&gt;偏好设置：打开最前端应用的偏好设置&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&quot;系统设置快捷键&quot;&gt;&lt;a href=&quot;#系统设置快捷键&quot; class=&quot;headerlink&quot; title=&quot;系统设置快捷键&quot;&gt;&lt;/a&gt;系统设置快捷键&lt;/h3&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;快捷键&lt;/th&gt;
&lt;th&gt;描述&lt;/th&gt;
&lt;th&gt;备注&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;电源按钮&lt;/td&gt;
&lt;td&gt;轻按可打开 Mac 或将 Mac 从睡眠状态唤醒。 按住此按钮 5 秒钟会强制 Mac 关机。&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Control–Command–电源按钮&lt;/td&gt;
&lt;td&gt;强制 Mac 重新启动。&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Control–Shift–（电源按钮或介质推出键）&lt;/td&gt;
&lt;td&gt;将显示器置于睡眠状态。&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Control–Command–介质推出键&lt;/td&gt;
&lt;td&gt;退出所有应用，然后重新启动 Mac。如果任何打开的文稿有未存储的更改，系统将询问您是否要存储这些更改。&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Control–Option–Command–（电源按钮或介质推出键）&lt;/td&gt;
&lt;td&gt;退出所有应用，然后关闭 Mac。如果任何打开的文稿有未存储的更改，系统将询问您是否要存储这些更改。&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Shift-Command-Q&lt;/td&gt;
&lt;td&gt;注销您的 OS X 用户帐户。系统将提示您确认。&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/images/atom-light-640x360.jpg&quot; alt=&quot;atom&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;Atom快捷键&quot;&gt;&lt;a href=&quot;#Atom快捷键&quot; class=&quot;headerlink&quot; title=&quot;Atom快捷键&quot;&gt;&lt;/a&gt;Atom
    
    </summary>
    
      <category term="DevTools" scheme="http://kriswan.github.io/categories/DevTools/"/>
    
    
      <category term="DevTools" scheme="http://kriswan.github.io/tags/DevTools/"/>
    
  </entry>
  
  <entry>
    <title>分布式事物(－)</title>
    <link href="http://kriswan.github.io/2016/06/02/%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E7%89%A9-%EF%BC%8D/"/>
    <id>http://kriswan.github.io/2016/06/02/分布式事物-－/</id>
    <published>2016-06-02T11:08:29.000Z</published>
    <updated>2016-06-09T05:19:26.000Z</updated>
    
    <content type="html">&lt;blockquote&gt;
&lt;p&gt;关于分布式事务的一点学习总结&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;设计模型&quot;&gt;&lt;a href=&quot;#设计模型&quot; class=&quot;headerlink&quot; title=&quot;设计模型&quot;&gt;&lt;/a&gt;设计模型&lt;/h3&gt;&lt;p&gt;采用类似TCC的事务模型，每个事务参与者都提供try, confirm, cancel的逻辑。在每个事务参与者的业务库的同一个实例都放一个事务所使用的库，简称事务库。&lt;/p&gt;
&lt;h4 id=&quot;Try状态&quot;&gt;&lt;a href=&quot;#Try状态&quot; class=&quot;headerlink&quot; title=&quot;Try状态&quot;&gt;&lt;/a&gt;Try状态&lt;/h4&gt;&lt;p&gt;尝试执行，比如对数据进行校验，检查事务是否可以进行等。并且在事务库里创建一条记录。此时记录中的状态字段记录为PENDING&lt;/p&gt;
&lt;h4 id=&quot;Confirm状态&quot;&gt;&lt;a href=&quot;#Confirm状态&quot; class=&quot;headerlink&quot; title=&quot;Confirm状态&quot;&gt;&lt;/a&gt;Confirm状态&lt;/h4&gt;&lt;p&gt;如果所有事务参与者的TRY都返回则表示可以进行，则提交事务。提交事务时在同一个本地事务里修改TRY阶段创建记录的状态为CONFIRM&lt;/p&gt;
&lt;h4 id=&quot;Cancel状态&quot;&gt;&lt;a href=&quot;#Cancel状态&quot; class=&quot;headerlink&quot; title=&quot;Cancel状态&quot;&gt;&lt;/a&gt;Cancel状态&lt;/h4&gt;&lt;p&gt;如果有任何一个事务参与者TRY阶段失败则发起CANCEL操作，并且在同一个本地事务里修改事务记录为CANCEL&lt;/p&gt;
&lt;h3 id=&quot;事物冲突&quot;&gt;&lt;a href=&quot;#事物冲突&quot; class=&quot;headerlink&quot; title=&quot;事物冲突&quot;&gt;&lt;/a&gt;事物冲突&lt;/h3&gt;&lt;p&gt;在分布式环境中，可能对同一个数据进行并发操作，这样就会带来冲突。比如两个并发执行的事务可能对同一个订单进行修改，这可能造成冲突。这里的解决办法是我们给每种业务都分配一个business id，然后每个操作的资源都有一个resource id(比如这里就是订单号)。当一个事务要执行的时候我们可以判断对于同一个business id和resource id，是不是有未完成的事务(状态是PENDING)，如果有则拒绝事务执行。&lt;/p&gt;
&lt;h3 id=&quot;说明&quot;&gt;&lt;a href=&quot;#说明&quot; class=&quot;headerlink&quot; title=&quot;说明&quot;&gt;&lt;/a&gt;说明&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;每个事务开始时候会获取一个全局唯一的事务号(transaction id)，该id会传递给所有的事务参与者并记录到事务参与者的事务记录中&lt;/li&gt;
&lt;li&gt;事务协调器会根据事务记录中的状态对各事务参与者进行重试操作。比如主事务记录中状态是CONFIRM，则要重试到所有事务参与者的状态都到CONFIRM为止&lt;/li&gt;
&lt;/ul&gt;
</content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;关于分布式事务的一点学习总结&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;设计模型&quot;&gt;&lt;a href=&quot;#设计模型&quot; class=&quot;headerlink&quot; title=&quot;设计模型&quot;&gt;&lt;/a&gt;设计模型&lt;/h3&gt;&lt;p&gt;采用类似TCC的事务模型，
    
    </summary>
    
      <category term="分布式" scheme="http://kriswan.github.io/categories/%E5%88%86%E5%B8%83%E5%BC%8F/"/>
    
    
      <category term="分布式" scheme="http://kriswan.github.io/tags/%E5%88%86%E5%B8%83%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>关于流控RateLimit</title>
    <link href="http://kriswan.github.io/2016/05/22/%E5%85%B3%E4%BA%8E%E6%B5%81%E6%8E%A7RateLimit/"/>
    <id>http://kriswan.github.io/2016/05/22/关于流控RateLimit/</id>
    <published>2016-05-22T14:51:43.000Z</published>
    <updated>2016-08-29T13:51:59.000Z</updated>
    
    <content type="html">&lt;p&gt;&lt;img src=&quot;/images/SmoothWarmingUpRatelimit.png&quot; alt=&quot;SmoothWarmingUpRatelimit&quot;&gt;&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;关于流控的一点总结&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;flow-need-to-be-controled&quot;&gt;&lt;a href=&quot;#flow-need-to-be-controled&quot; class=&quot;headerlink&quot; title=&quot;flow need to be controled&quot;&gt;&lt;/a&gt;flow need to be controled&lt;/h3&gt;&lt;img src=&quot;/2016/05/22/关于流控RateLimit/water-flow.jpg&quot; alt=&quot;water is comming !&quot; title=&quot;water is comming !&quot;&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/images/SmoothWarmingUpRatelimit.png&quot; alt=&quot;SmoothWarmingUpRatelimit&quot;&gt;&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;关于流控的一点总结&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;fl
    
    </summary>
    
      <category term="Java" scheme="http://kriswan.github.io/categories/Java/"/>
    
    
      <category term="Java" scheme="http://kriswan.github.io/tags/Java/"/>
    
      <category term="Guava" scheme="http://kriswan.github.io/tags/Guava/"/>
    
  </entry>
  
  <entry>
    <title>Hexo介绍</title>
    <link href="http://kriswan.github.io/2016/05/13/Hexo%E4%BB%8B%E7%BB%8D/"/>
    <id>http://kriswan.github.io/2016/05/13/Hexo介绍/</id>
    <published>2016-05-13T10:54:15.000Z</published>
    <updated>2016-06-10T03:10:03.000Z</updated>
    
    <content type="html">&lt;p&gt;&lt;img src=&quot;/images/hexo_logo.png&quot; alt=&quot;hexo_logo&quot;&gt;&lt;/p&gt;
&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;documentatoin&lt;/a&gt; for more info. If you get any problems when using Hexo, you can find the answer in &lt;a href=&quot;https://hexo.io/docs/troubleshooting.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;troubleshooting&lt;/a&gt; or you can ask me on &lt;a href=&quot;https://github.com/hexojs/hexo/issues&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&quot;hexo-一些相关的命令&quot;&gt;&lt;a href=&quot;#hexo-一些相关的命令&quot; class=&quot;headerlink&quot; title=&quot;hexo 一些相关的命令&quot;&gt;&lt;/a&gt;hexo 一些相关的命令&lt;/h2&gt;&lt;blockquote class=&quot;blockquote-center&quot;&gt;&lt;p&gt;这里会介绍一些hexo相关的命令 &lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;一些博客链接&quot;&gt;&lt;a href=&quot;#一些博客链接&quot; class=&quot;headerlink&quot; title=&quot;一些博客链接&quot;&gt;&lt;/a&gt;一些博客链接&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;http://ibruce.info/2013/11/22/hexo-your-blog/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;搭建博客连接:http://ibruce.info/2013/11/22/hexo-your-blog/&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;Create-a-new-post&quot;&gt;&lt;a href=&quot;#Create-a-new-post&quot; class=&quot;headerlink&quot; title=&quot;Create a new post&quot;&gt;&lt;/a&gt;Create a new post&lt;/h3&gt;&lt;p&gt;新建一篇文章&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ hexo new &lt;span class=&quot;string&quot;&gt;&quot;My New Post&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;More info: &lt;a href=&quot;https://hexo.io/docs/writing.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Writing&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;Run-server&quot;&gt;&lt;a href=&quot;#Run-server&quot; class=&quot;headerlink&quot; title=&quot;Run server&quot;&gt;&lt;/a&gt;Run server&lt;/h3&gt;&lt;p&gt;本地服务器启动，可以在本地看到博客的情况，方便测试&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ hexo server&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;More info: &lt;a href=&quot;https://hexo.io/docs/server.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Server&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;Generate-static-files&quot;&gt;&lt;a href=&quot;#Generate-static-files&quot; class=&quot;headerlink&quot; title=&quot;Generate static files&quot;&gt;&lt;/a&gt;Generate static files&lt;/h3&gt;&lt;p&gt;生成hexo静态文件&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ hexo generate&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;More info: &lt;a href=&quot;https://hexo.io/docs/generating.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Server&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;Clean-public-folder-files&quot;&gt;&lt;a href=&quot;#Clean-public-folder-files&quot; class=&quot;headerlink&quot; title=&quot;Clean public folder files&quot;&gt;&lt;/a&gt;Clean public folder files&lt;/h3&gt;&lt;p&gt;清除public文件夹下的已经生成的静态文件&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ hexo clean&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h3 id=&quot;Deploy-to-remote-sites&quot;&gt;&lt;a href=&quot;#Deploy-to-remote-sites&quot; class=&quot;headerlink&quot; title=&quot;Deploy to remote sites&quot;&gt;&lt;/a&gt;Deploy to remote sites&lt;/h3&gt;&lt;p&gt;部署到github上的master分支上去&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ hexo deploy&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;More info: &lt;a href=&quot;https://hexo.io/docs/deployment.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Deployment&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;Hexo-的一些独特的标签-tag&quot;&gt;&lt;a href=&quot;#Hexo-的一些独特的标签-tag&quot; class=&quot;headerlink&quot; title=&quot;Hexo 的一些独特的标签 tag&quot;&gt;&lt;/a&gt;Hexo 的一些独特的标签 tag&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;/images/tags.gif&quot; alt=&quot;blank-tags&quot;&gt;&lt;/p&gt;
&lt;blockquote class=&quot;blockquote-center&quot;&gt;&lt;p&gt;Now, We’ll talk a little bit hexo tag plugins, To help you munipulate you blog easily!&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;居中引言-centerquote&quot;&gt;&lt;a href=&quot;#居中引言-centerquote&quot; class=&quot;headerlink&quot; title=&quot;居中引言 centerquote&quot;&gt;&lt;/a&gt;居中引言 centerquote&lt;/h3&gt;
{% centerquote %} 引言放这里 {% endcenterquote %}

&lt;blockquote class=&quot;blockquote-center&quot;&gt;&lt;p&gt;引言放这里 &lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;左对齐引言-blockquote&quot;&gt;&lt;a href=&quot;#左对齐引言-blockquote&quot; class=&quot;headerlink&quot; title=&quot;左对齐引言 blockquote&quot;&gt;&lt;/a&gt;左对齐引言 blockquote&lt;/h3&gt;
{% blockquote David Levithan, Wide Awake http://wanders.com.cn 万的个人网站 %}
摘要引言放这里
{% endblockquote %}

&lt;p&gt;引言：&lt;br&gt;&lt;blockquote&gt;&lt;p&gt;Do not just seek happiness for yourself. Seek happiness for all. Through kindness. Through mercy.&lt;/p&gt;
&lt;footer&gt;&lt;strong&gt;David Levithan, Wide Awake&lt;/strong&gt;&lt;cite&gt;&lt;a href=&quot;http://wanders.com.cn&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;万的个人网站&lt;/a&gt;&lt;/cite&gt;&lt;/footer&gt;&lt;/blockquote&gt;&lt;/p&gt;
&lt;h3 id=&quot;插入图片&quot;&gt;&lt;a href=&quot;#插入图片&quot; class=&quot;headerlink&quot; title=&quot;插入图片&quot;&gt;&lt;/a&gt;插入图片&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;![/images/blank-tags.png](/images/blank-tags.png)&lt;/code&gt;  这个是标准的markdown的插入图片的语法&lt;/li&gt;
&lt;li&gt; {% asset_img water-flow.jpg water is comming ! %}  这种标签标示的时候&lt;code&gt;water-flow.jpg&lt;/code&gt;必须要在文章同级目录下的同名文件夹下&lt;br&gt;图片：&lt;br&gt;&lt;img src=&quot;/images/blank-tags.jpg&quot; alt=&quot;/images/blank-tags.jpg&quot;&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;插入视频-add-a-youtubu-video&quot;&gt;&lt;a href=&quot;#插入视频-add-a-youtubu-video&quot; class=&quot;headerlink&quot; title=&quot;插入视频 add a youtubu video&quot;&gt;&lt;/a&gt;插入视频 add a youtubu video&lt;/h3&gt; {% youtube wgdBVIX9ifA %} 
&lt;p&gt;这里是视频id=wgdBVIX9ifA:&lt;br&gt;&lt;div class=&quot;video-container&quot;&gt;&lt;iframe src=&quot;//www.youtube.com/embed/wgdBVIX9ifA&quot; frameborder=&quot;0&quot; allowfullscreen&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/p&gt;
&lt;h3 id=&quot;嵌入一段代码-代码是根路径下的文件：gulpfile-js&quot;&gt;&lt;a href=&quot;#嵌入一段代码-代码是根路径下的文件：gulpfile-js&quot; class=&quot;headerlink&quot; title=&quot;嵌入一段代码,代码是根路径下的文件：gulpfile.js&quot;&gt;&lt;/a&gt;嵌入一段代码,代码是根路径下的文件：gulpfile.js&lt;/h3&gt; {% include_code [gulpfile] [lang:javascript] gulpfile.js %} 
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;figcaption&gt;&lt;span&gt;[gulpfile] []&lt;/span&gt;&lt;a href=&quot;/downloads/code/gulpfile.js&quot;&gt;view raw&lt;/a&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; gulp = &lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;gulp&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; minifycss = &lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;gulp-minify-css&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; uglify = &lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;gulp-uglify&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; htmlmin = &lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;gulp-htmlmin&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; htmlclean = &lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;gulp-htmlclean&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 压缩 public 目录 css&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;gulp.task(&lt;span class=&quot;string&quot;&gt;&#39;minify-css&#39;&lt;/span&gt;, &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;{&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; gulp.src(&lt;span class=&quot;string&quot;&gt;&#39;./public/**/*.css&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        .pipe(minifycss())&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        .pipe(gulp.dest(&lt;span class=&quot;string&quot;&gt;&#39;./public&#39;&lt;/span&gt;));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;});&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 压缩 public 目录 html&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;gulp.task(&lt;span class=&quot;string&quot;&gt;&#39;minify-html&#39;&lt;/span&gt;, &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;{&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; gulp.src(&lt;span class=&quot;string&quot;&gt;&#39;./public/**/*.html&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    .pipe(htmlclean())&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    .pipe(htmlmin({&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;         removeComments: &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;         minifyJS: &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;         minifyCSS: &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;         minifyURLs: &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    }))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    .pipe(gulp.dest(&lt;span class=&quot;string&quot;&gt;&#39;./public&#39;&lt;/span&gt;))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;});&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 压缩 public/js 目录 js&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;gulp.task(&lt;span class=&quot;string&quot;&gt;&#39;minify-js&#39;&lt;/span&gt;, &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;{&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; gulp.src(&lt;span class=&quot;string&quot;&gt;&#39;./public/**/*.js&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        .pipe(uglify())&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        .pipe(gulp.dest(&lt;span class=&quot;string&quot;&gt;&#39;./public&#39;&lt;/span&gt;));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;});&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 执行 gulp 命令时执行的任务&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;gulp.task(&lt;span class=&quot;string&quot;&gt;&#39;default&#39;&lt;/span&gt;, [&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&#39;minify-html&#39;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&#39;minify-css&#39;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&#39;minify-js&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;]);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;给代码片段加入一个URL-codeblock&quot;&gt;&lt;a href=&quot;#给代码片段加入一个URL-codeblock&quot; class=&quot;headerlink&quot; title=&quot;给代码片段加入一个URL codeblock&quot;&gt;&lt;/a&gt;给代码片段加入一个URL codeblock&lt;/h3&gt;
  {% codeblock _.compact http://underscorejs.org/#compact Underscore.js %}
    code put here
  {% endcodeblock %}

&lt;figure class=&quot;highlight plain&quot;&gt;&lt;figcaption&gt;&lt;span&gt;_.compact&lt;/span&gt;&lt;a href=&quot;http://underscorejs.org/#compact&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Underscore.js&lt;/a&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;_.compact([0, 1, false, 2, &amp;apos;&amp;apos;, 3]);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;=&amp;gt; [1, 2, 3]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;普通段落引言&quot;&gt;&lt;a href=&quot;#普通段落引言&quot; class=&quot;headerlink&quot; title=&quot;普通段落引言&quot;&gt;&lt;/a&gt;普通段落引言&lt;/h3&gt; {% pullquote [qut] %}{% endpullquote %}
&lt;blockquote class=&quot;pullquote [qut]&quot;&gt;&lt;p&gt;you wanna quote something, you’d better place it here!&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;嵌入一个网页-add-a-iframe&quot;&gt;&lt;a href=&quot;#嵌入一个网页-add-a-iframe&quot; class=&quot;headerlink&quot; title=&quot;嵌入一个网页 add a iframe&quot;&gt;&lt;/a&gt;嵌入一个网页 add a iframe&lt;/h3&gt; {% iframe http://www.bing.com 100% 100% %} 
&lt;p&gt;页面：&lt;br&gt;&lt;iframe src=&quot;http://www.bing.com&quot; width=&quot;100%&quot; height=&quot;100%&quot; frameborder=&quot;0&quot; allowfullscreen&gt;&lt;/iframe&gt;&lt;/p&gt;
&lt;h3 id=&quot;原始文字-raw&quot;&gt;&lt;a href=&quot;#原始文字-raw&quot; class=&quot;headerlink&quot; title=&quot;原始文字 raw&quot;&gt;&lt;/a&gt;原始文字 raw&lt;/h3&gt; {% raw %} what ever you put here {% endraw %} 

 If certain content is causing processing issues in your posts, wrap it with the raw tag to avoid rendering errors.

&lt;h3 id=&quot;邮件-mail-to-me&quot;&gt;&lt;a href=&quot;#邮件-mail-to-me&quot; class=&quot;headerlink&quot; title=&quot;邮件 mail to me&quot;&gt;&lt;/a&gt;邮件 mail to me&lt;/h3&gt;&lt;a href=&quot;&amp;#x6d;&amp;#97;&amp;#x69;&amp;#x6c;&amp;#x74;&amp;#111;&amp;#58;&amp;#x6b;&amp;#x72;&amp;#x69;&amp;#115;&amp;#x77;&amp;#97;&amp;#110;&amp;#x73;&amp;#102;&amp;#x40;&amp;#103;&amp;#x6d;&amp;#97;&amp;#x69;&amp;#x6c;&amp;#46;&amp;#99;&amp;#111;&amp;#x6d;&quot;&gt;&amp;#x6b;&amp;#x72;&amp;#x69;&amp;#115;&amp;#x77;&amp;#97;&amp;#110;&amp;#x73;&amp;#102;&amp;#x40;&amp;#103;&amp;#x6d;&amp;#97;&amp;#x69;&amp;#x6c;&amp;#46;&amp;#99;&amp;#111;&amp;#x6d;&lt;/a&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/images/hexo_logo.png&quot; alt=&quot;hexo_logo&quot;&gt;&lt;/p&gt;
&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Hexo&lt;/a&gt;! T
    
    </summary>
    
      <category term="hexo" scheme="http://kriswan.github.io/categories/hexo/"/>
    
    
      <category term="hexo" scheme="http://kriswan.github.io/tags/hexo/"/>
    
  </entry>
  
</feed>
