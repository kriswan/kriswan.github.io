{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/Staticfile","path":"Staticfile","modified":0,"renderable":0},{"_id":"source/CNAME","path":"CNAME","modified":0,"renderable":0},{"_id":"source/favicon.ico","path":"favicon.ico","modified":0,"renderable":0},{"_id":"source/robots.txt","path":"robots.txt","modified":0,"renderable":0},{"_id":"source/images/14724800810004.jpg","path":"images/14724800810004.jpg","modified":0,"renderable":0},{"_id":"source/images/Alfred-icon.jpg","path":"images/Alfred-icon.jpg","modified":0,"renderable":0},{"_id":"source/images/atom-light-640x360.jpg","path":"images/atom-light-640x360.jpg","modified":0,"renderable":0},{"_id":"source/images/SmoothWarmingUpRatelimit.png","path":"images/SmoothWarmingUpRatelimit.png","modified":0,"renderable":0},{"_id":"source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":0,"renderable":0},{"_id":"source/images/calling.png","path":"images/calling.png","modified":0,"renderable":0},{"_id":"source/images/copy_path.png","path":"images/copy_path.png","modified":0,"renderable":0},{"_id":"source/images/hexo_logo.png","path":"images/hexo_logo.png","modified":0,"renderable":0},{"_id":"source/images/tags.gif","path":"images/tags.gif","modified":0,"renderable":0},{"_id":"themes/next/source/404.html","path":"404.html","modified":0,"renderable":1},{"_id":"themes/next/source/favicon.ico","path":"favicon.ico","modified":0,"renderable":1},{"_id":"source/images/14724796235520.jpg","path":"images/14724796235520.jpg","modified":0,"renderable":0},{"_id":"source/images/call.png","path":"images/call.png","modified":0,"renderable":0},{"_id":"source/images/cny.png","path":"images/cny.png","modified":0,"renderable":0},{"_id":"source/images/hole.jpg","path":"images/hole.jpg","modified":0,"renderable":0},{"_id":"source/images/macbookpro.jpg","path":"images/macbookpro.jpg","modified":0,"renderable":0},{"_id":"themes/next/source/favicon_spicy.ico","path":"favicon_spicy.ico","modified":0,"renderable":1},{"_id":"source/images/Java-Queue.jpg","path":"images/Java-Queue.jpg","modified":0,"renderable":0},{"_id":"source/images/baidu_weather.png","path":"images/baidu_weather.png","modified":0,"renderable":0},{"_id":"source/images/blank-tags.jpg","path":"images/blank-tags.jpg","modified":0,"renderable":0},{"_id":"source/images/youdao.png","path":"images/youdao.png","modified":0,"renderable":0},{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"themes/next/source/fonts/OFL.txt","path":"fonts/OFL.txt","modified":0,"renderable":1},{"_id":"themes/next/source/fonts/Gafata-Regular.ttf","path":"fonts/Gafata-Regular.ttf","modified":0,"renderable":1},{"_id":"themes/next/source/images/avatar_2.png","path":"images/avatar_2.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/alipay_qcode12x12.png","path":"images/alipay_qcode12x12.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/avatar.png","path":"images/avatar.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon.ico","path":"images/favicon.ico","modified":0,"renderable":1},{"_id":"themes/next/source/images/placeholder.gif","path":"images/placeholder.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/loading.gif","path":"images/loading.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/searchicon.png","path":"images/searchicon.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/wechat_payqrcode.jpg","path":"images/wechat_payqrcode.jpg","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":0,"renderable":1},{"_id":"source/images/workflow_search.png","path":"images/workflow_search.png","modified":0,"renderable":0},{"_id":"source/images/Java-Queue-method.jpg","path":"images/Java-Queue-method.jpg","modified":0,"renderable":0},{"_id":"themes/next/source/vendors/font-awesome/HELP-US-OUT.txt","path":"vendors/font-awesome/HELP-US-OUT.txt","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/bower.json","path":"vendors/font-awesome/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/jquery_lazyload/README.md","path":"vendors/jquery_lazyload/README.md","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/jquery_lazyload/CONTRIBUTING.md","path":"vendors/jquery_lazyload/CONTRIBUTING.md","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/jquery_lazyload/bower.json","path":"vendors/jquery_lazyload/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/jquery_lazyload/jquery.lazyload.js","path":"vendors/jquery_lazyload/jquery.lazyload.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/jquery_lazyload/jquery.scrollstop.js","path":"vendors/jquery_lazyload/jquery.scrollstop.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/velocity/bower.json","path":"vendors/velocity/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/velocity/velocity.ui.min.js","path":"vendors/velocity/velocity.ui.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/velocity/velocity.ui.js","path":"vendors/velocity/velocity.ui.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/velocity/velocity.min.js","path":"vendors/velocity/velocity.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/bootstrap.js","path":"js/src/bootstrap.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/motion.js","path":"js/src/motion.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/hook-duoshuo.js","path":"js/src/hook-duoshuo.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/scrollspy.js","path":"js/src/scrollspy.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/post-details.js","path":"js/src/post-details.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/utils.js","path":"js/src/utils.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/affix.js","path":"js/src/affix.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fastclick/bower.json","path":"vendors/fastclick/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fastclick/README.md","path":"vendors/fastclick/README.md","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fastclick/LICENSE","path":"vendors/fastclick/LICENSE","modified":0,"renderable":1},{"_id":"source/images/evernote.png","path":"images/evernote.png","modified":0,"renderable":0},{"_id":"source/images/stackoverflow_wf.png","path":"images/stackoverflow_wf.png","modified":0,"renderable":0},{"_id":"source/images/myalfred_workflow.png","path":"images/myalfred_workflow.png","modified":0,"renderable":0},{"_id":"themes/next/source/vendors/jquery/index.js","path":"vendors/jquery/index.js","modified":0,"renderable":1},{"_id":"source/images/air_quality.png","path":"images/air_quality.png","modified":0,"renderable":0},{"_id":"themes/next/source/vendors/fancybox/source/blank.gif","path":"vendors/fancybox/source/blank.gif","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_loading.gif","path":"vendors/fancybox/source/fancybox_loading.gif","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_loading@2x.gif","path":"vendors/fancybox/source/fancybox_loading@2x.gif","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_overlay.png","path":"vendors/fancybox/source/fancybox_overlay.png","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_sprite.png","path":"vendors/fancybox/source/fancybox_sprite.png","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_sprite@2x.png","path":"vendors/fancybox/source/fancybox_sprite@2x.png","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/jquery.fancybox.css","path":"vendors/fancybox/source/jquery.fancybox.css","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/jquery.fancybox.pack.js","path":"vendors/fancybox/source/jquery.fancybox.pack.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/css/font-awesome.css.map","path":"vendors/font-awesome/css/font-awesome.css.map","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/jquery.fancybox.js","path":"vendors/fancybox/source/jquery.fancybox.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/css/font-awesome.css","path":"vendors/font-awesome/css/font-awesome.css","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/css/font-awesome.min.css","path":"vendors/font-awesome/css/font-awesome.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/ua-parser-js/dist/ua-parser.min.js","path":"vendors/ua-parser-js/dist/ua-parser.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/ua-parser-js/dist/ua-parser.pack.js","path":"vendors/ua-parser-js/dist/ua-parser.pack.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.woff2","path":"vendors/font-awesome/fonts/fontawesome-webfont.woff2","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/schemes/pisces.js","path":"js/src/schemes/pisces.js","modified":0,"renderable":1},{"_id":"source/images/baidumap.png","path":"images/baidumap.png","modified":0,"renderable":0},{"_id":"themes/next/source/vendors/fastclick/lib/fastclick.js","path":"vendors/fastclick/lib/fastclick.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fastclick/lib/fastclick.min.js","path":"vendors/fastclick/lib/fastclick.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.eot","path":"vendors/font-awesome/fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/fonts/FontAwesome.otf","path":"vendors/font-awesome/fonts/FontAwesome.otf","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.woff","path":"vendors/font-awesome/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/velocity/velocity.js","path":"vendors/velocity/velocity.js","modified":0,"renderable":1},{"_id":"source/images/zhihudaily.png","path":"images/zhihudaily.png","modified":0,"renderable":0},{"_id":"themes/next/source/vendors/fancybox/source/helpers/fancybox_buttons.png","path":"vendors/fancybox/source/helpers/fancybox_buttons.png","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-buttons.css","path":"vendors/fancybox/source/helpers/jquery.fancybox-buttons.css","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-media.js","path":"vendors/fancybox/source/helpers/jquery.fancybox-media.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-thumbs.css","path":"vendors/fancybox/source/helpers/jquery.fancybox-thumbs.css","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-thumbs.js","path":"vendors/fancybox/source/helpers/jquery.fancybox-thumbs.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-buttons.js","path":"vendors/fancybox/source/helpers/jquery.fancybox-buttons.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.ttf","path":"vendors/font-awesome/fonts/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"source/images/winteriscomming.jpg","path":"images/winteriscomming.jpg","modified":0,"renderable":0},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.svg","path":"vendors/font-awesome/fonts/fontawesome-webfont.svg","modified":0,"renderable":1},{"_id":"source/images/Screen Shot 2016-08-10 at 18.48.12.png","path":"images/Screen Shot 2016-08-10 at 18.48.12.png","modified":0,"renderable":0}],"Cache":[{"_id":"source/Staticfile","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1464004154000},{"_id":"source/.DS_Store","hash":"c7aa9313c36a8d54ee6120de0d6c52b04510ef74","modified":1465481726000},{"_id":"source/CNAME","hash":"f24ab51d0bcb3d05172f368295ea8c6cc93f44f6","modified":1463996252000},{"_id":"source/gulpfile.js","hash":"0bdf7ccfba8046ab04eef1b9fe3d2a60cc1aeaf3","modified":1465382097000},{"_id":"source/favicon.ico","hash":"9f138807a9899dc1bd77b4a61e2c0b513867240d","modified":1463996252000},{"_id":"themes/next/_config.yml","hash":"70df94228d477052d752412dcd736dc20cc9f665","modified":1465984567000},{"_id":"source/robots.txt","hash":"74a108ac2fbc0dd1a87ede359aefc462e602c266","modified":1463996252000},{"_id":"themes/next/README.md","hash":"500b5606eb6a09c979d16128f8b00f4bf9bc95ac","modified":1463996252000},{"_id":"themes/next/bower.json","hash":"f89c6700a11d81e067cc97273ca6bf96cb88c8f9","modified":1463996252000},{"_id":"themes/next/README.en.md","hash":"565ba52b3825b85a9f05b41183caca7f18b741d4","modified":1463996252000},{"_id":"themes/next/gulpfile.coffee","hash":"26e5b1b945704c8bc78b928feede895c4c111c95","modified":1463996252000},{"_id":"themes/next/package.json","hash":"63e9c0f1dd9e5d7f51b4ae383981ef939a2ed45d","modified":1463996252000},{"_id":"source/_posts/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1471424752000},{"_id":"source/_posts/Alfred介绍.md","hash":"46be0e62a99beaada9a9e45a6ef5480c7ae6e959","modified":1472478744000},{"_id":"source/_posts/Atom快捷键整理.md","hash":"b7cb94ab39ea6d442cc7c933c574fcfa06b2effd","modified":1472478749000},{"_id":"source/_posts/Hexo介绍.md","hash":"1dd16f17e68f0b0809ed705d6ad7356709dbf0c6","modified":1465528203000},{"_id":"source/_posts/Java并发结构.md","hash":"8517191718453462f84c074371f98075fc3e1e88","modified":1472529105000},{"_id":"source/_posts/Java阻塞队列-BlockingQueue.md","hash":"516de51595e49c81416722d555e24a8273250291","modified":1472480084000},{"_id":"source/_posts/关于流控RateLimit.md","hash":"e3616413b719ecf68fecbe16ce0acb300f520aac","modified":1472478719000},{"_id":"source/_posts/分布式事物-－.md","hash":"f2a41ccc8c25d3036e341beea693d8c0a8d25413","modified":1465449566000},{"_id":"source/_posts/记录一次踩坑.md","hash":"0fecd6c58c8c2a1ac6fa207af1a121f6772dde13","modified":1472478726000},{"_id":"source/categories/index.md","hash":"a5dd2f9dd4262558f77c76902356bd22beca1e87","modified":1463996252000},{"_id":"source/about/index.md","hash":"b95fa0e9a14cf38408943865c7f67c52d45dde38","modified":1463996252000},{"_id":"source/images/14724800810004.jpg","hash":"120be529a2fc32265cd6b8b6b8ad40fb38186bd4","modified":1472480081000},{"_id":"source/images/Alfred-icon.jpg","hash":"f3e1c737614aaf384676d0b803ac709e4921b4a6","modified":1465481192000},{"_id":"source/images/atom-light-640x360.jpg","hash":"f8302e404b32339b62473322b0d1370ccd68b92a","modified":1465481656000},{"_id":"source/images/SmoothWarmingUpRatelimit.png","hash":"fae11cf2f2ceaac48abd578116ba941144c34718","modified":1465488292000},{"_id":"source/images/algolia_logo.svg","hash":"90035272fa31a3f65b3c0e2cb8a633876ef457dc","modified":1465533339000},{"_id":"source/images/calling.png","hash":"a36a52dc1ff2a600a371d992bdb377557f977585","modified":1465486981000},{"_id":"source/images/copy_path.png","hash":"4948b874015412d43d4a5f4663ca1642ff5d74f0","modified":1465487672000},{"_id":"source/images/hexo_logo.png","hash":"8bea36d15be97749c60aaa505a850da45ba5f0bc","modified":1465488036000},{"_id":"source/images/tags.gif","hash":"7cb1730463ec3812d4aff06801898148138ce643","modified":1465491583000},{"_id":"source/tags/index.md","hash":"bacf1178d151b675612c2500a8f4e052e21b94d7","modified":1463996252000},{"_id":"themes/next/languages/de.yml","hash":"786afba25cfc98845a20d9901823ebeebcd1cbbf","modified":1463996252000},{"_id":"themes/next/languages/default.yml","hash":"9db835c0543ade5a89bc80ec5a898203227cf3d8","modified":1463996252000},{"_id":"themes/next/languages/en.yml","hash":"f03799cbdb5a33064ead080bcac4baca1f6bc5f9","modified":1463996252000},{"_id":"themes/next/languages/fr-FR.yml","hash":"1a084623c39de74301f3e92f9388a3a815a542ca","modified":1463996252000},{"_id":"themes/next/languages/id.yml","hash":"147c01e41b931085ad14250fa900c2249dcbbdd7","modified":1463996252000},{"_id":"themes/next/languages/ja.yml","hash":"a2c7b6301b5474aab798946fb700289df237c3cf","modified":1463996252000},{"_id":"themes/next/languages/pt.yml","hash":"ca239b39bf65c9462e59d51b12f0fe566d453197","modified":1463996252000},{"_id":"themes/next/languages/ru.yml","hash":"cc7b964a46587aea0e57b0a5269d8fd25570858e","modified":1463996252000},{"_id":"themes/next/languages/zh-Hans.yml","hash":"bea452bc49aed171a210d09bd6cddc4e846ea8ab","modified":1463996252000},{"_id":"themes/next/languages/zh-hk.yml","hash":"519ab3d817ec3bc5bfc91159c494b6b3c170bea7","modified":1463996252000},{"_id":"themes/next/languages/zh-tw.yml","hash":"6b1f345aaefc13e6723dc8a6741b59ac05c20dfd","modified":1463996252000},{"_id":"themes/next/layout/_layout.swig","hash":"d2919b927e4beedbe710f9a5943a55ccc586d718","modified":1465982260000},{"_id":"themes/next/layout/archive.swig","hash":"b5b59d70fc1563f482fa07afd435752774ad5981","modified":1463996252000},{"_id":"themes/next/layout/category.swig","hash":"6422d196ceaff4220d54b8af770e7e957f3364ad","modified":1463996252000},{"_id":"themes/next/layout/index.swig","hash":"427d0b95b854e311ae363088ab39a393bf8fdc8b","modified":1463996252000},{"_id":"themes/next/layout/page.swig","hash":"8019d02232a6dd1a665b6a4d2daef8e5dd2f0049","modified":1463996252000},{"_id":"themes/next/layout/post.swig","hash":"e2e512142961ddfe77eba29eaa88f4a2ee43ae18","modified":1463996252000},{"_id":"themes/next/layout/tag.swig","hash":"07cf49c49c39a14dfbe9ce8e7d7eea3d4d0a4911","modified":1463996252000},{"_id":"themes/next/scripts/merge-configs.js","hash":"0c56be2e85c694247cfa327ea6d627b99ca265e8","modified":1463996252000},{"_id":"themes/next/source/404.html","hash":"054a7d792ca28089e3686e109044c633de9724ee","modified":1463996252000},{"_id":"themes/next/source/favicon.ico","hash":"9f138807a9899dc1bd77b4a61e2c0b513867240d","modified":1463996252000},{"_id":"themes/next/test/intern.js","hash":"11fa8a4f5c3b4119a179ae0a2584c8187f907a73","modified":1463996252000},{"_id":"themes/next/test/.jshintrc","hash":"096ed6df627373edd820f24d46b8baf528dee61d","modified":1463996252000},{"_id":"themes/next/test/helpers.js","hash":"a1f5de25154c3724ffc24a91ddc576cdbd60864f","modified":1463996252000},{"_id":"source/images/14724796235520.jpg","hash":"28a538a35189c0077a09878012421bb86453187c","modified":1472479623000},{"_id":"source/images/call.png","hash":"b4b13538c497ce3b0da4f539ef96bdc998bac275","modified":1465486970000},{"_id":"source/images/cny.png","hash":"6d35d9e537ca80154b83e7d8d79af1bb031af30c","modified":1465487191000},{"_id":"source/images/hole.jpg","hash":"a7bc63280225c797e59380060c9b27ef7cf06403","modified":1466845998000},{"_id":"source/images/macbookpro.jpg","hash":"92b516470bb6fe074ea6f0fc8750c0c48a5d569a","modified":1465481878000},{"_id":"themes/next/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1463996252000},{"_id":"themes/next/source/favicon_spicy.ico","hash":"9693455b58320ee18ea9fae0980f3612ee64ea9e","modified":1463996252000},{"_id":"source/downloads/code/gulpfile.js","hash":"05de1700abcd51237147553e3d7a748ffa6bdc9d","modified":1463996252000},{"_id":"source/images/Java-Queue.jpg","hash":"cf1fc65609d54728d0d1be3b7789d1b44a091617","modified":1471260714000},{"_id":"source/images/baidu_weather.png","hash":"e4eee4312ab9e22980c5a4ebbc5ce8d8edcc5b24","modified":1465486128000},{"_id":"source/images/blank-tags.jpg","hash":"0005020c1e130ce210bc1ef62020e40b019513d2","modified":1465490441000},{"_id":"source/images/youdao.png","hash":"278ce43e9455b19dfc00e3d99865988cf8c10821","modified":1465487275000},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"43c3433155ccd9abcbe7dce2e6bfa1f3a66af18b","modified":1463996252000},{"_id":"themes/next/layout/_macro/post.swig","hash":"d9fdea3779087a5c38ddb51e577c02e146dad81a","modified":1463996252000},{"_id":"themes/next/layout/_macro/reward.swig","hash":"37e5b7c42ec17b9b6b786c5512bcc481a21c974e","modified":1463996252000},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"b883289054ee54a374caad5d4883591beb94bd8b","modified":1463996252000},{"_id":"themes/next/layout/_macro/wechat-subscriber.swig","hash":"85327c2174d09c6d69c9033592e6c8f7eb7ac3ba","modified":1463996252000},{"_id":"themes/next/layout/_partials/comments.swig","hash":"82a9bc2ba60ce68419128ff60624bd74b15dfb78","modified":1463996252000},{"_id":"themes/next/layout/_partials/duoshuo-hot-articles.swig","hash":"f09a6bf4883dd5739ef2b428d6bb33a8ee06b0d8","modified":1463996252000},{"_id":"themes/next/layout/_partials/footer.swig","hash":"0ce71d8322ea7dea82d9371fa2fe13949aa870e3","modified":1463996252000},{"_id":"themes/next/layout/_partials/head.swig","hash":"f83b1c55bedd2c1a3eb734c72c6997795a4e5f99","modified":1465537972000},{"_id":"themes/next/layout/_partials/header.swig","hash":"7cf870d94d45eeb57c725197b9803e04320eed5d","modified":1465981678000},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"9e8e21d194ef44d271b1cca0bc1448c14d7edf4f","modified":1463996252000},{"_id":"themes/next/layout/_partials/search.swig","hash":"c12bcc118c332300a974aed7d2f36c2b15388738","modified":1465982029000},{"_id":"themes/next/layout/_scripts/baidu-push.swig","hash":"82d060fe055d6e423bbc9199f82dfe5c68e74779","modified":1463996252000},{"_id":"themes/next/layout/_scripts/boostrap.swig","hash":"03aaebe9d50f6acb007ec38cc04acd1cfceb404d","modified":1463996252000},{"_id":"themes/next/layout/_scripts/commons.swig","hash":"766b2bdda29523ed6cd8d7aa197f996022f8fd94","modified":1463996252000},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"0b91cadecead8e0b5211cc42b085998d94af503a","modified":1463996252000},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"535fc542781021c4326dec24d8495cbb1387634a","modified":1463996252000},{"_id":"themes/next/scripts/tags/full-image.js","hash":"3acce36db0feb11a982c6c799aa6b6b47df2827c","modified":1463996252000},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"49252824cd53184dc9b97b2f2d87ff28e1b3ef27","modified":1463996252000},{"_id":"themes/next/source/css/main.styl","hash":"20702c48d6053c92c5bcdbc68e8d0ef1369848a0","modified":1463996252000},{"_id":"themes/next/source/fonts/OFL.txt","hash":"aa7ccd61aecf5a0ac78ea8067ec0efde6e93643c","modified":1463996252000},{"_id":"themes/next/source/fonts/Gafata-Regular.ttf","hash":"9545ab317c98176451a4c32f0c985e551fcd994d","modified":1463996252000},{"_id":"themes/next/source/images/avatar_2.png","hash":"9e07ca909183fa471c11a6bbeedd817d212f294a","modified":1435126151000},{"_id":"themes/next/source/images/alipay_qcode12x12.png","hash":"48eecd82f6484a02e29ac48258a244ccae0fd811","modified":1463996252000},{"_id":"themes/next/source/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1463996252000},{"_id":"themes/next/source/images/avatar.png","hash":"02f1762c20264b6b388092b70fe806eeea9212a9","modified":1463996252000},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1463996252000},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1463996252000},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1463996252000},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1463996252000},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1463996252000},{"_id":"themes/next/source/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1463996252000},{"_id":"themes/next/source/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1463996252000},{"_id":"themes/next/source/images/favicon.ico","hash":"9f138807a9899dc1bd77b4a61e2c0b513867240d","modified":1463996252000},{"_id":"themes/next/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1463996252000},{"_id":"themes/next/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1463996252000},{"_id":"themes/next/source/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1463996252000},{"_id":"themes/next/source/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1463996252000},{"_id":"themes/next/source/images/wechat_payqrcode.jpg","hash":"6a382bbf201f29f835bea1af39e27e0b783ddcd6","modified":1463996252000},{"_id":"themes/next/source/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1463996252000},{"_id":"source/_posts/关于流控RateLimit/water-flow.jpg","hash":"abf246cc9a7176b2a9fb561ebe7a00a2290de83b","modified":1463996252000},{"_id":"source/images/workflow_search.png","hash":"3ce19889f9b41503f0cdc1bec5660c1614520ba0","modified":1465486057000},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1463996252000},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1463996252000},{"_id":"themes/next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1463996252000},{"_id":"themes/next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1463996252000},{"_id":"themes/next/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1463996252000},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1463996252000},{"_id":"source/images/Java-Queue-method.jpg","hash":"e66d2e1883511bcba8fcde2af3c05da164e0c5d0","modified":1471260814000},{"_id":"themes/next/layout/_partials/head/external-fonts.swig","hash":"7ce76358411184482bb0934e70037949dd0da8ca","modified":1463996252000},{"_id":"themes/next/layout/_partials/search/algolia.swig","hash":"78ba68f6f936197dd4d0be56bb21faa247dd5ff0","modified":1465982521000},{"_id":"themes/next/layout/_partials/search/swiftype.swig","hash":"959b7e04a96a5596056e4009b73b6489c117597e","modified":1463996252000},{"_id":"themes/next/layout/_partials/search/tinysou.swig","hash":"eefe2388ff3d424694045eda21346989b123977c","modified":1463996252000},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"ff5523d5dacaa77a55a24e50e6e6530c3b98bfad","modified":1465531623000},{"_id":"themes/next/layout/_partials/share/add-this.swig","hash":"c07f7b2f264e5215b8ed42d67e8cef2477558364","modified":1463996252000},{"_id":"themes/next/layout/_partials/share/baidushare.swig","hash":"7ca5cb4daa58b3504e17f3e02975e794bc634658","modified":1463996252000},{"_id":"themes/next/layout/_partials/share/duoshuo_share.swig","hash":"89c5a5240ecb223acfe1d12377df5562a943fd5d","modified":1463996252000},{"_id":"themes/next/layout/_partials/share/jiathis.swig","hash":"63315fcf210799f894208c9f512737096df84962","modified":1463996252000},{"_id":"themes/next/layout/_scripts/pages/post-details.swig","hash":"069d1357c717572256e5cdee09574ebce529cbae","modified":1463996252000},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"a44acf9b0d0f44ef3dfc767376a95c984cc127de","modified":1463996252000},{"_id":"themes/next/layout/_scripts/third-party/algolia_search.swig","hash":"b01a4a7f4d4d71bc5d31f10f466e717d1280282f","modified":1465984033000},{"_id":"themes/next/layout/_scripts/third-party/analytics.swig","hash":"0a89c04055bade7baa5962f1d5aefe438d83a244","modified":1463996252000},{"_id":"themes/next/layout/_scripts/third-party/comments.swig","hash":"907b931d775d32405d02a25b3b0a3ac03bf804d0","modified":1463996252000},{"_id":"themes/next/layout/_scripts/third-party/lean-analytics.swig","hash":"069bb17fb1db3bc7c85c88efa3ed94ab6becbe2c","modified":1463996252000},{"_id":"themes/next/layout/_scripts/third-party/localsearch.swig","hash":"1561bd0c107d725252c6d746e9ac177fc18f93bf","modified":1463996252000},{"_id":"themes/next/layout/_scripts/third-party/mathjax.swig","hash":"5bafc33f57508d1d04a9930165240f6e9efa8d6d","modified":1463996252000},{"_id":"themes/next/layout/_scripts/third-party/tinysou.swig","hash":"cb3a5d36dbe1630bab84e03a52733a46df7c219b","modified":1463996252000},{"_id":"themes/next/source/css/_custom/custom.styl","hash":"78c858b6fb538505991f49a19c263a57a0bcc9b7","modified":1465983837000},{"_id":"themes/next/source/css/_mixins/base.styl","hash":"78a83c38f69a8747bb74e420e6c9eeef1ea76525","modified":1463996252000},{"_id":"themes/next/source/css/_mixins/Pisces.styl","hash":"715d5b40dc52f319fe4bff0325beb874774d9bd9","modified":1463996252000},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"c8d35a6b9e3bff6d8fdb66de853065af9d37562d","modified":1463996252000},{"_id":"themes/next/source/css/_variables/custom.styl","hash":"04234e536f2f2bfade26f040ead9b6515729e65c","modified":1463996252000},{"_id":"themes/next/source/css/_variables/base.styl","hash":"17624186f7a1f28daddea258d044f8e03b2f4bea","modified":1463996252000},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"3ead77befa064d6327dc7afd0a5af7be59a5f196","modified":1463996252000},{"_id":"themes/next/source/vendors/fancybox/.bower.json","hash":"cc40a9b11e52348e554c84e4a5c058056f6b7aeb","modified":1463996252000},{"_id":"themes/next/source/vendors/fancybox/.gitattributes","hash":"2db21acfbd457452462f71cc4048a943ee61b8e0","modified":1463996252000},{"_id":"themes/next/source/vendors/font-awesome/.gitignore","hash":"69d152fa46b517141ec3b1114dd6134724494d83","modified":1463996252000},{"_id":"themes/next/source/vendors/font-awesome/.bower.json","hash":"7da985a99674e54f514d4fd9fcd3bcea6e7e41d5","modified":1463996252000},{"_id":"themes/next/source/vendors/font-awesome/.npmignore","hash":"dcf470ab3a358103bb896a539cc03caeda10fa8b","modified":1463996252000},{"_id":"themes/next/source/vendors/font-awesome/HELP-US-OUT.txt","hash":"69a4c537d167b68a0ccf1c6febd138aeffca60d6","modified":1463996252000},{"_id":"themes/next/source/vendors/font-awesome/bower.json","hash":"279a8a718ab6c930a67c41237f0aac166c1b9440","modified":1463996252000},{"_id":"themes/next/source/vendors/jquery/.bower.json","hash":"91745c2cc6c946c7275f952b2b0760b880cea69e","modified":1463996252000},{"_id":"themes/next/source/vendors/jquery_lazyload/README.md","hash":"895d50fa29759af7835256522e9dd7dac597765c","modified":1463996252000},{"_id":"themes/next/source/vendors/jquery_lazyload/CONTRIBUTING.md","hash":"4891864c24c28efecd81a6a8d3f261145190f901","modified":1463996252000},{"_id":"themes/next/source/vendors/jquery_lazyload/.bower.json","hash":"b7638afc93e9cd350d0783565ee9a7da6805ad8e","modified":1463996252000},{"_id":"themes/next/source/vendors/jquery_lazyload/bower.json","hash":"65bc85d12197e71c40a55c0cd7f6823995a05222","modified":1463996252000},{"_id":"themes/next/source/vendors/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1463996252000},{"_id":"themes/next/source/vendors/velocity/.bower.json","hash":"05f960846f1c7a93dab1d3f9a1121e86812e8c88","modified":1463996252000},{"_id":"themes/next/source/vendors/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1463996252000},{"_id":"themes/next/source/vendors/velocity/bower.json","hash":"2ec99573e84c7117368beccb9e94b6bf35d2db03","modified":1463996252000},{"_id":"themes/next/source/vendors/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1463996252000},{"_id":"themes/next/source/vendors/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1463996252000},{"_id":"themes/next/source/vendors/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1463996252000},{"_id":"themes/next/source/js/src/bootstrap.js","hash":"39bf93769d9080fa01a9a875183b43198f79bc19","modified":1463996252000},{"_id":"themes/next/source/js/src/motion.js","hash":"269414e84df544a4ccb88519f6abae4943db3c67","modified":1463996252000},{"_id":"themes/next/source/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1463996252000},{"_id":"themes/next/source/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1463996252000},{"_id":"themes/next/source/js/src/post-details.js","hash":"2038f54e289b6da5def09689e69f623187147be5","modified":1463996252000},{"_id":"themes/next/source/js/src/utils.js","hash":"e5cb720894c4bc28ca8f10b33df127fb394018d9","modified":1463996252000},{"_id":"themes/next/source/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1463996252000},{"_id":"themes/next/source/vendors/fastclick/bower.json","hash":"13379463c7463b4b96d13556b46faa4cc38d81e6","modified":1463996252000},{"_id":"themes/next/source/vendors/fastclick/README.md","hash":"1decd8e1adad2cd6db0ab50cf56de6035156f4ea","modified":1463996252000},{"_id":"themes/next/source/vendors/fastclick/LICENSE","hash":"dcd5b6b43095d9e90353a28b09cb269de8d4838e","modified":1463996252000},{"_id":"themes/next/source/vendors/fastclick/.bower.json","hash":"93ebd5b35e632f714dcf1753e1f6db77ec74449b","modified":1463996252000},{"_id":"source/images/evernote.png","hash":"2414f1ffbc62f4b69c20ea7ceb5a87a2df8c45dd","modified":1465486600000},{"_id":"source/images/stackoverflow_wf.png","hash":"90ea0c1c7853a4ccbeb97871b7b047475e6550f0","modified":1465487544000},{"_id":"source/images/myalfred_workflow.png","hash":"461bb10e5a387b3dca4cb25343337a765c356bd8","modified":1465485152000},{"_id":"themes/next/source/vendors/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1463996252000},{"_id":"source/images/air_quality.png","hash":"a6b2ea85baeb284bd94f05836151c8390d76c85e","modified":1465487329000},{"_id":"themes/next/layout/_scripts/third-party/analytics/baidu-analytics.swig","hash":"7c43d66da93cde65b473a7d6db2a86f9a42647d6","modified":1463996252000},{"_id":"themes/next/layout/_scripts/third-party/analytics/cnzz-analytics.swig","hash":"44e761721e8ad787ef571a3cc57bbc12d318a2a3","modified":1463996252000},{"_id":"themes/next/layout/_scripts/third-party/analytics/facebook-sdk.swig","hash":"334176d838ee528e58468d8bc74ff3a6d3f25b2b","modified":1463996252000},{"_id":"themes/next/layout/_scripts/third-party/analytics/busuanzi-counter.swig","hash":"4fcbf57c4918528ab51d3d042cff92cf5aefb599","modified":1463996252000},{"_id":"themes/next/layout/_scripts/third-party/analytics/google-analytics.swig","hash":"30a23fa7e816496fdec0e932aa42e2d13098a9c2","modified":1463996252000},{"_id":"themes/next/layout/_scripts/third-party/analytics/tencent-analytics.swig","hash":"3658414379e0e8a34c45c40feadc3edc8dc55f88","modified":1463996252000},{"_id":"themes/next/layout/_scripts/third-party/comments/disqus.swig","hash":"3491d3cebabc8a28857200db28a1be65aad6adc2","modified":1463996252000},{"_id":"themes/next/layout/_scripts/third-party/comments/duoshuo.swig","hash":"8c7af79407d223486fba72b8150fe045a553bf70","modified":1463996252000},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"b49efc66bd055a2d0be7deabfcb02ee72a9a28c8","modified":1463996252000},{"_id":"themes/next/source/css/_common/components/buttons.styl","hash":"0dfb4b3ba3180d7285e66f270e1d3fa0f132c3d2","modified":1463996252000},{"_id":"themes/next/source/css/_common/components/comments.styl","hash":"471f1627891aca5c0e1973e09fbcb01e1510d193","modified":1463996252000},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"10994990d6e0b4d965a728a22cf7f6ee29cae9f6","modified":1463996252000},{"_id":"themes/next/source/css/_common/components/pagination.styl","hash":"711c8830886619d4f4a0598b0cde5499dce50c62","modified":1463996252000},{"_id":"themes/next/source/css/_common/components/tag-cloud.styl","hash":"dd8a3b22fc2f222ac6e6c05bd8a773fb039169c0","modified":1463996252000},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"2186be20e317505cd31886f1291429cc21f76703","modified":1463996252000},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"5304f99581da3a31de3ecec959b7adf9002fde83","modified":1463996252000},{"_id":"themes/next/source/css/_common/scaffolding/helpers.styl","hash":"54c90cf7bdbf5c596179d8dae6e671bad1292662","modified":1463996252000},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"ece571f38180febaf02ace8187ead8318a300ea7","modified":1463996252000},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"013619c472c7e4b08311c464fcbe9fcf5edde603","modified":1463996252000},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"64f5d56c08d74a338813df1265580ca0cbf0190b","modified":1463996252000},{"_id":"themes/next/source/css/_schemes/Mist/_base.styl","hash":"c2d079788d6fc2e9a191ccdae94e50d55bf849dc","modified":1463996252000},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"5ae7906dc7c1d9468c7f4b4a6feddddc555797a1","modified":1463996252000},{"_id":"themes/next/source/css/_schemes/Mist/_logo.styl","hash":"38e5df90c8689a71c978fd83ba74af3d4e4e5386","modified":1463996252000},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"f8ac267450b299926fab1132c4fa206cc23d4658","modified":1463996252000},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expanded.styl","hash":"4303776991ef28f5742ca51c7dffe6f12f0acf34","modified":1463996252000},{"_id":"themes/next/source/css/_schemes/Mist/_search.styl","hash":"15e72cd43c0691f0eb4f4887744e6e8beca9e8f5","modified":1465536227000},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"d0bdcb7c46bfba81a33fcd057ee09d6badb1cb0e","modified":1463996252000},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"c2c6c4f6434b4f94aac2af5861cd769427f0ee10","modified":1463996252000},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"6ed60cc621bac096c0ed7534fa25b1a52dc571d4","modified":1463996252000},{"_id":"themes/next/source/css/_schemes/Muse/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1463996252000},{"_id":"themes/next/source/css/_schemes/Muse/_logo.styl","hash":"8829bc556ca38bfec4add4f15a2f028092ac6d46","modified":1463996252000},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"a0e2030a606c934fb2c5c7373aaae04a1caac4c5","modified":1463996252000},{"_id":"themes/next/source/css/_schemes/Pisces/_brand.styl","hash":"be22ad34f546a07f6d56b424338cdd898683eea4","modified":1463996252000},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"8d7cecde4933900c7df2db9d0a98f5f82f88dc93","modified":1463996252000},{"_id":"themes/next/source/css/_schemes/Pisces/_full-image.styl","hash":"938d39eedc6e3d33918c1145a5bf1e79991d3fcf","modified":1463996252000},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"d4b7bd610ca03dbb2f5b66631c0e84a79fb4660b","modified":1463996252000},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"d09280e5b79f3b573edb30f30c7a5f03ac640986","modified":1463996252000},{"_id":"themes/next/source/css/_schemes/Pisces/_posts.styl","hash":"2f878213cb24c5ddc18877f6d15ec5c5f57745ac","modified":1463996252000},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"1b10ba2d3ad0c063c418dc94a0b7e0db4b342c53","modified":1463996252000},{"_id":"themes/next/source/vendors/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1463996252000},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1463996252000},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1463996252000},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1463996252000},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1463996252000},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1463996252000},{"_id":"themes/next/source/vendors/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1463996252000},{"_id":"themes/next/source/vendors/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1463996252000},{"_id":"themes/next/source/vendors/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1463996252000},{"_id":"themes/next/source/vendors/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1463996252000},{"_id":"themes/next/source/vendors/font-awesome/css/font-awesome.css","hash":"3b87c2560832748cd06f9bfd2fd6ea8edbdae8c7","modified":1463996252000},{"_id":"themes/next/source/vendors/font-awesome/css/font-awesome.min.css","hash":"05ea25bc9b3ac48993e1fee322d3bc94b49a6e22","modified":1463996252000},{"_id":"themes/next/source/vendors/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1463996252000},{"_id":"themes/next/source/vendors/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1463996252000},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.woff2","hash":"574ea2698c03ae9477db2ea3baf460ee32f1a7ea","modified":1463996252000},{"_id":"themes/next/source/js/src/schemes/pisces.js","hash":"7506e7490c69a200831393c38d25e91c156bd471","modified":1463996252000},{"_id":"source/images/baidumap.png","hash":"284ed4dd6638664be054bb02fa88c1ee9ab9001c","modified":1465486761000},{"_id":"themes/next/source/vendors/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1463996252000},{"_id":"themes/next/source/vendors/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1463996252000},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.eot","hash":"b3c2f08e73320135b69c23a3908b87a12053a2f6","modified":1463996252000},{"_id":"themes/next/source/vendors/font-awesome/fonts/FontAwesome.otf","hash":"0112e96f327d413938d37c1693806f468ffdbace","modified":1463996252000},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.woff","hash":"507970402e328b2baeb05bde73bf9ded4e2c3a2d","modified":1463996252000},{"_id":"themes/next/source/vendors/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1463996252000},{"_id":"source/images/zhihudaily.png","hash":"df65c69b4920b5a160ffb2784017b8882c341d9b","modified":1465486404000},{"_id":"themes/next/source/css/_common/components/footer/footer.styl","hash":"8994ffcce84deac0471532f270f97c44fea54dc0","modified":1463996252000},{"_id":"themes/next/source/css/_common/components/header/header.styl","hash":"ae1ca14e51de67b07dba8f61ec79ee0e2e344574","modified":1463996252000},{"_id":"themes/next/source/css/_common/components/header/headerband.styl","hash":"d27448f199fc2f9980b601bc22b87f08b5d64dd1","modified":1463996252000},{"_id":"themes/next/source/css/_common/components/header/menu.styl","hash":"e8316fbc22f024efe9e4c350dabd2cc2d079b8c4","modified":1463996252000},{"_id":"themes/next/source/css/_common/components/header/site-meta.styl","hash":"6c00f6e0978f4d8f9a846a15579963728aaa6a17","modified":1463996252000},{"_id":"themes/next/source/css/_common/components/header/site-nav.styl","hash":"49c2b2c14a1e7fcc810c6be4b632975d0204c281","modified":1463996252000},{"_id":"themes/next/source/css/_common/components/pages/archive.styl","hash":"7778920dd105fa4de3a7ab206eeba30b1a7bac45","modified":1463996252000},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"4eff5b252d7b614e500fc7d52c97ce325e57d3ab","modified":1463996252000},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"3c46efd6601e268093ce6d7b1471d18501878f0d","modified":1463996252000},{"_id":"themes/next/source/css/_common/components/pages/post-detail.styl","hash":"9bf4362a4d0ae151ada84b219d39fbe5bb8c790e","modified":1463996252000},{"_id":"themes/next/source/css/_common/components/highlight/highlight.styl","hash":"4da051c7f3924fa2db1e73c55b2baf1c2c150255","modified":1463996252000},{"_id":"themes/next/source/css/_common/components/highlight/theme.styl","hash":"90f8f9706cd7fe829cf06e9959a65fd3f8b994fa","modified":1463996252000},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"8fae54591877a73dff0b29b2be2e8935e3c63575","modified":1463996252000},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"2cdc094ecf907a02fce25ad4a607cd5c40da0f2b","modified":1463996252000},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"b25132fe6a7ad67059a2c3afc60feabb479bdd75","modified":1463996252000},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"387ce23bba52b22a586b2dfb4ec618fe1ffd3926","modified":1463996252000},{"_id":"themes/next/source/css/_common/components/post/post-meta.styl","hash":"d543d1377c1f61b70e3adb6da0eb12797552e5f2","modified":1463996252000},{"_id":"themes/next/source/css/_common/components/post/post-more-link.styl","hash":"15063d79b5befc21820baf05d6f20cc1c1787477","modified":1463996252000},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"cbca4842a54950e2934b3b8f3cd940f122111aef","modified":1463996252000},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"e792c8dc41561c96d128e9b421187f1c3dc978a0","modified":1463996252000},{"_id":"themes/next/source/css/_common/components/post/post-title.styl","hash":"963105a531403d7aad6d9e5e23e3bfabb8ec065a","modified":1463996252000},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"a352ae5b1f8857393bf770d2e638bf15f0c9585d","modified":1463996252000},{"_id":"themes/next/source/css/_common/components/post/post-type.styl","hash":"10251257aceecb117233c9554dcf8ecfef8e2104","modified":1463996252000},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"4eb18b12fa0ea6c35925d9a64f64e2a7dae8c7fd","modified":1463996252000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"2e7ec9aaa3293941106b1bdd09055246aa3c3dc6","modified":1463996252000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author.styl","hash":"920343e41c124221a17f050bbb989494d44f7a24","modified":1463996252000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"c44f6a553ec7ea5508f2054a13be33a62a15d3a9","modified":1463996252000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-feed-link.styl","hash":"9486ddd2cb255227db102d09a7df4cae0fabad72","modified":1463996252000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"45fa7193435a8eae9960267438750b4c9fa9587f","modified":1463996252000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"7690b9596ec3a49befbe529a5a2649abec0faf76","modified":1463996252000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"2d3abbc85b979a648e0e579e45f16a6eba49d1e7","modified":1463996252000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar.styl","hash":"234facd038f144bd0fe09a31ed1357c5d74c517f","modified":1463996252000},{"_id":"themes/next/source/css/_common/components/sidebar/site-state.styl","hash":"3623e7fa4324ec1307370f33d8f287a9e20a5578","modified":1463996252000},{"_id":"themes/next/source/css/_common/components/third-party/baidushare.styl","hash":"93b08815c4d17e2b96fef8530ec1f1064dede6ef","modified":1463996252000},{"_id":"themes/next/source/css/_common/components/third-party/busuanzi-counter.styl","hash":"b03f891883446f3a5548b7cc90d29c77e62f1053","modified":1463996252000},{"_id":"themes/next/source/css/_common/components/third-party/duoshuo.styl","hash":"2340dd9b3202c61d73cc708b790fac5adddbfc7f","modified":1463996252000},{"_id":"themes/next/source/css/_common/components/third-party/jiathis.styl","hash":"327b5f63d55ec26f7663185c1a778440588d9803","modified":1463996252000},{"_id":"themes/next/source/css/_common/components/third-party/localsearch.styl","hash":"795d94561888d31cb7a6ff4a125596809ea69b7d","modified":1463996252000},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"3afc459442c132c480d1d832f1a872f1070bb048","modified":1463996252000},{"_id":"themes/next/source/css/_common/components/tags/full-image.styl","hash":"618f73450cf541f88a4fddc3d22898aee49d105d","modified":1463996252000},{"_id":"themes/next/source/css/_common/components/tags/blockquote-center.styl","hash":"c2abe4d87148e23e15d49ee225bc650de60baf46","modified":1463996252000},{"_id":"themes/next/source/css/_common/components/tags/group-pictures.styl","hash":"4851b981020c5cbc354a1af9b831a2dcb3cf9d39","modified":1463996252000},{"_id":"themes/next/source/css/_common/components/tags/tags.styl","hash":"8e66c2635d48e11de616bb29c4b1323698eebc0a","modified":1463996252000},{"_id":"themes/next/source/css/_schemes/Mist/outline/outline.styl","hash":"5dc4859c66305f871e56cba78f64bfe3bf1b5f01","modified":1463996252000},{"_id":"themes/next/source/css/_schemes/Mist/sidebar/sidebar-blogroll.styl","hash":"8b8e8cbce98a9296c8fd77f512ae85d945f65d40","modified":1463996252000},{"_id":"themes/next/source/css/_schemes/Muse/sidebar/sidebar-blogroll.styl","hash":"8b8e8cbce98a9296c8fd77f512ae85d945f65d40","modified":1463996252000},{"_id":"themes/next/source/vendors/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1463996252000},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1463996252000},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1463996252000},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1463996252000},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1463996252000},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1463996252000},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.ttf","hash":"27cf1f2ec59aece6938c7bb2feb0e287ea778ff9","modified":1463996252000},{"_id":"source/images/winteriscomming.jpg","hash":"508edaac5539a773a07ddb72b52c7e0219093336","modified":1463996252000},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.svg","hash":"2b3c8ba7008cc014d8fb37abc6f9f49aeda83824","modified":1463996252000},{"_id":"source/images/Screen Shot 2016-08-10 at 18.48.12.png","hash":"f483991d49d6c9f4c2e6e5b99b0877dc21ccba93","modified":1470826092000},{"_id":"public/gulpfile.js","hash":"0bdf7ccfba8046ab04eef1b9fe3d2a60cc1aeaf3","modified":1472529378694},{"_id":"public/downloads/code/gulpfile.js","hash":"05de1700abcd51237147553e3d7a748ffa6bdc9d","modified":1472529378694},{"_id":"public/baidusitemap.xml","hash":"857cde8c03c8d1ae64cf2f593e36275aca50dbc3","modified":1472529378694},{"_id":"public/atom.xml","hash":"eb549f1d45acc6884783baae0bee08a5e29f8eb8","modified":1472529378694},{"_id":"public/search.xml","hash":"97435f5d57ea90440706bb053aea31034f7d7a2d","modified":1472529378694},{"_id":"public/sitemap.xml","hash":"7e3bf0dd45f3380e0fe181d0d0ee15a8abbf946c","modified":1472529378694},{"_id":"public/categories/index.html","hash":"34c785b77dd834a09c4bb7f358ce35bd22ebba1c","modified":1472529378733},{"_id":"public/tags/index.html","hash":"c214c322655a7c8f07c3e0f09d94250e5e15651d","modified":1472529378733},{"_id":"public/archives/2016/05/index.html","hash":"7ef9abf970b0a761a5cd311cbae77ebe9439412c","modified":1472529378734},{"_id":"public/archives/2016/08/index.html","hash":"37f21ac78c37ca47da00886abd44f7d3872b56ad","modified":1472529378734},{"_id":"public/categories/DevTools/index.html","hash":"ecd6ef4957417588487895e5f1ad2537874ea140","modified":1472529378734},{"_id":"public/categories/hexo/index.html","hash":"be4cf6019a0ef43c7f3f7ebfeb533faac85f5fee","modified":1472529378734},{"_id":"public/categories/翻译/index.html","hash":"cda6b180f54f38579c3e8862f67358bdfbdb39b8","modified":1472529378734},{"_id":"public/categories/数据结构/index.html","hash":"623fa9ab562e86152012fa78556c7f6a609de0da","modified":1472529378734},{"_id":"public/categories/Java/index.html","hash":"e211bc63530bbb790fd181277af773a04c9b0e1c","modified":1472529378734},{"_id":"public/categories/分布式/index.html","hash":"6098b466391a840c9cf58b55ae4bb7c01d76169d","modified":1472529378734},{"_id":"public/tags/DevTools/index.html","hash":"08173df0f7cc11378f21cc76bb8a4451c7bc0fd7","modified":1472529378734},{"_id":"public/tags/hexo/index.html","hash":"501bd9f44cb894f1701f68f9fb2a9edea163c23e","modified":1472529378734},{"_id":"public/tags/翻译/index.html","hash":"4c7a19ab8f61889cc2ca33d25743b7d62a7e5da9","modified":1472529378734},{"_id":"public/tags/DougLee/index.html","hash":"c5bc0825d4fb1ce4819107f415d51cf1a9d6ddab","modified":1472529378734},{"_id":"public/tags/数据结构/index.html","hash":"37f27e96ebaf5f6b3e483d90fe019aa336303f3a","modified":1472529378734},{"_id":"public/tags/Guava/index.html","hash":"eb5aaf66911da43f9491b208fa6d0d6635fb643e","modified":1472529378734},{"_id":"public/tags/分布式/index.html","hash":"e1d9ef7c49373b3f5ff8d25f86465f39d4fb19cd","modified":1472529378734},{"_id":"public/about/index.html","hash":"098b6e6e198d940afef02e90f88267114f15edba","modified":1472529378734},{"_id":"public/2016/08/29/Java并发结构/index.html","hash":"12474527947a7839b586e0ef900620254baf348e","modified":1472529378734},{"_id":"public/2016/08/15/Java阻塞队列-BlockingQueue/index.html","hash":"6a6c455f9e6c6736940e67ea45089bd25cf2bab4","modified":1472529378734},{"_id":"public/2016/06/25/记录一次踩坑/index.html","hash":"b57493a2a89ff7c7dc95dc699d095e8ba7c2df73","modified":1472529378734},{"_id":"public/2016/06/09/Alfred介绍/index.html","hash":"17c662d8ccc3c47af2c94e1a6ca14199f4471763","modified":1472529378735},{"_id":"public/2016/06/08/Atom快捷键整理/index.html","hash":"70a99c7b2baaf60ffd0896b5009717bc679649b1","modified":1472529378735},{"_id":"public/2016/06/02/分布式事物-－/index.html","hash":"3967720b1950a95dd1f595b81eaf63f92fe719dd","modified":1472529378735},{"_id":"public/2016/05/22/关于流控RateLimit/index.html","hash":"92446dc4ebebbcaeddaa9a7c822cb41cac3ceee6","modified":1472529378735},{"_id":"public/2016/05/13/Hexo介绍/index.html","hash":"bc47617fff5863f5bdfbe60ee7570d3fa7469f36","modified":1472529378735},{"_id":"public/archives/index.html","hash":"da6e4ba5cfea3c096e7662ff6fde1eea0e2f1a4a","modified":1472529378735},{"_id":"public/archives/2016/index.html","hash":"30354c2bfaa5546ea7907875ae538f8a5188ca02","modified":1472529378735},{"_id":"public/archives/2016/06/index.html","hash":"4afc1a3d38270ffed1339129ddc1b528cdeef605","modified":1472529378735},{"_id":"public/index.html","hash":"efb6ebd917533d13780baa50d832c3fea058a1fa","modified":1472529378735},{"_id":"public/page/2/index.html","hash":"24fd876b7e1293025a4719d81407e9b18de3a5b4","modified":1472529378735},{"_id":"public/tags/Java/index.html","hash":"2aadbe936045e35e5017609916401de044dba211","modified":1472529378735},{"_id":"public/Staticfile","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1472529378735},{"_id":"public/CNAME","hash":"f24ab51d0bcb3d05172f368295ea8c6cc93f44f6","modified":1472529378747},{"_id":"public/favicon.ico","hash":"9f138807a9899dc1bd77b4a61e2c0b513867240d","modified":1472529378747},{"_id":"public/robots.txt","hash":"74a108ac2fbc0dd1a87ede359aefc462e602c266","modified":1472529378747},{"_id":"public/images/14724800810004.jpg","hash":"120be529a2fc32265cd6b8b6b8ad40fb38186bd4","modified":1472529378747},{"_id":"public/images/Alfred-icon.jpg","hash":"f3e1c737614aaf384676d0b803ac709e4921b4a6","modified":1472529378747},{"_id":"public/images/atom-light-640x360.jpg","hash":"f8302e404b32339b62473322b0d1370ccd68b92a","modified":1472529378747},{"_id":"public/images/SmoothWarmingUpRatelimit.png","hash":"fae11cf2f2ceaac48abd578116ba941144c34718","modified":1472529378748},{"_id":"public/images/algolia_logo.svg","hash":"90035272fa31a3f65b3c0e2cb8a633876ef457dc","modified":1472529378748},{"_id":"public/images/calling.png","hash":"a36a52dc1ff2a600a371d992bdb377557f977585","modified":1472529378748},{"_id":"public/images/copy_path.png","hash":"4948b874015412d43d4a5f4663ca1642ff5d74f0","modified":1472529378748},{"_id":"public/images/hexo_logo.png","hash":"8bea36d15be97749c60aaa505a850da45ba5f0bc","modified":1472529378748},{"_id":"public/images/tags.gif","hash":"7cb1730463ec3812d4aff06801898148138ce643","modified":1472529378748},{"_id":"public/fonts/OFL.txt","hash":"aa7ccd61aecf5a0ac78ea8067ec0efde6e93643c","modified":1472529378748},{"_id":"public/fonts/Gafata-Regular.ttf","hash":"9545ab317c98176451a4c32f0c985e551fcd994d","modified":1472529378748},{"_id":"public/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1472529378748},{"_id":"public/images/avatar_2.png","hash":"9e07ca909183fa471c11a6bbeedd817d212f294a","modified":1472529378748},{"_id":"public/images/avatar.png","hash":"02f1762c20264b6b388092b70fe806eeea9212a9","modified":1472529378748},{"_id":"public/images/alipay_qcode12x12.png","hash":"48eecd82f6484a02e29ac48258a244ccae0fd811","modified":1472529378748},{"_id":"public/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1472529378748},{"_id":"public/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1472529378748},{"_id":"public/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1472529378749},{"_id":"public/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1472529378749},{"_id":"public/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1472529378749},{"_id":"public/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1472529378749},{"_id":"public/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1472529378749},{"_id":"public/images/favicon.ico","hash":"9f138807a9899dc1bd77b4a61e2c0b513867240d","modified":1472529378749},{"_id":"public/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1472529378749},{"_id":"public/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1472529378749},{"_id":"public/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1472529378750},{"_id":"public/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1472529378750},{"_id":"public/images/wechat_payqrcode.jpg","hash":"6a382bbf201f29f835bea1af39e27e0b783ddcd6","modified":1472529378750},{"_id":"public/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1472529378750},{"_id":"public/vendors/font-awesome/HELP-US-OUT.txt","hash":"69a4c537d167b68a0ccf1c6febd138aeffca60d6","modified":1472529378750},{"_id":"public/vendors/fastclick/LICENSE","hash":"dcd5b6b43095d9e90353a28b09cb269de8d4838e","modified":1472529378750},{"_id":"public/vendors/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1472529378750},{"_id":"public/vendors/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1472529378750},{"_id":"public/vendors/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1472529378750},{"_id":"public/vendors/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1472529378750},{"_id":"public/vendors/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1472529378750},{"_id":"public/vendors/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1472529378750},{"_id":"public/vendors/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1472529378750},{"_id":"public/vendors/font-awesome/fonts/fontawesome-webfont.woff2","hash":"574ea2698c03ae9477db2ea3baf460ee32f1a7ea","modified":1472529378750},{"_id":"public/vendors/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1472529378750},{"_id":"public/images/14724796235520.jpg","hash":"28a538a35189c0077a09878012421bb86453187c","modified":1472529379485},{"_id":"public/images/call.png","hash":"b4b13538c497ce3b0da4f539ef96bdc998bac275","modified":1472529379488},{"_id":"public/images/cny.png","hash":"6d35d9e537ca80154b83e7d8d79af1bb031af30c","modified":1472529379493},{"_id":"public/images/macbookpro.jpg","hash":"92b516470bb6fe074ea6f0fc8750c0c48a5d569a","modified":1472529379493},{"_id":"public/images/hole.jpg","hash":"a7bc63280225c797e59380060c9b27ef7cf06403","modified":1472529379494},{"_id":"public/favicon_spicy.ico","hash":"9693455b58320ee18ea9fae0980f3612ee64ea9e","modified":1472529379494},{"_id":"public/vendors/font-awesome/fonts/fontawesome-webfont.eot","hash":"b3c2f08e73320135b69c23a3908b87a12053a2f6","modified":1472529379494},{"_id":"public/vendors/font-awesome/fonts/FontAwesome.otf","hash":"0112e96f327d413938d37c1693806f468ffdbace","modified":1472529379494},{"_id":"public/vendors/font-awesome/fonts/fontawesome-webfont.woff","hash":"507970402e328b2baeb05bde73bf9ded4e2c3a2d","modified":1472529379494},{"_id":"public/2016/05/22/关于流控RateLimit/water-flow.jpg","hash":"abf246cc9a7176b2a9fb561ebe7a00a2290de83b","modified":1472529379494},{"_id":"public/404.html","hash":"054a7d792ca28089e3686e109044c633de9724ee","modified":1472529379506},{"_id":"public/vendors/font-awesome/bower.json","hash":"64394a2a9aa00f8e321d8daa5e51a420f0e96dad","modified":1472529379506},{"_id":"public/vendors/jquery_lazyload/README.html","hash":"bde24335f6bc09d8801c0dcd7274f71b466552bd","modified":1472529379506},{"_id":"public/vendors/jquery_lazyload/bower.json","hash":"ae3c3b61e6e7f9e1d7e3585ad854380ecc04cf53","modified":1472529379506},{"_id":"public/vendors/jquery_lazyload/CONTRIBUTING.html","hash":"a6358170d346af13b1452ac157b60505bec7015c","modified":1472529379506},{"_id":"public/vendors/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1472529379506},{"_id":"public/vendors/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1472529379506},{"_id":"public/vendors/velocity/bower.json","hash":"0ef14e7ccdfba5db6eb3f8fc6aa3b47282c36409","modified":1472529379506},{"_id":"public/vendors/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1472529379506},{"_id":"public/js/src/bootstrap.js","hash":"39bf93769d9080fa01a9a875183b43198f79bc19","modified":1472529379506},{"_id":"public/js/src/motion.js","hash":"269414e84df544a4ccb88519f6abae4943db3c67","modified":1472529379506},{"_id":"public/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1472529379506},{"_id":"public/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1472529379506},{"_id":"public/js/src/post-details.js","hash":"2038f54e289b6da5def09689e69f623187147be5","modified":1472529379506},{"_id":"public/js/src/utils.js","hash":"e5cb720894c4bc28ca8f10b33df127fb394018d9","modified":1472529379506},{"_id":"public/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1472529379506},{"_id":"public/vendors/fastclick/bower.json","hash":"4dcecf83afddba148464d5339c93f6d0aa9f42e9","modified":1472529379506},{"_id":"public/vendors/fastclick/README.html","hash":"da3c74d484c73cc7df565e8abbfa4d6a5a18d4da","modified":1472529379506},{"_id":"public/vendors/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1472529379506},{"_id":"public/vendors/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1472529379506},{"_id":"public/js/src/schemes/pisces.js","hash":"7506e7490c69a200831393c38d25e91c156bd471","modified":1472529379506},{"_id":"public/vendors/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1472529379506},{"_id":"public/vendors/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1472529379506},{"_id":"public/vendors/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1472529379507},{"_id":"public/vendors/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1472529379507},{"_id":"public/vendors/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1472529379507},{"_id":"public/vendors/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1472529379507},{"_id":"public/vendors/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1472529379507},{"_id":"public/css/main.css","hash":"ae387cd1cfa391d390a595a8295297ee6d72495a","modified":1472529379507},{"_id":"public/vendors/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1472529379507},{"_id":"public/vendors/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1472529379507},{"_id":"public/vendors/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1472529379507},{"_id":"public/vendors/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1472529379507},{"_id":"public/vendors/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1472529379507},{"_id":"public/vendors/font-awesome/css/font-awesome.css","hash":"3b87c2560832748cd06f9bfd2fd6ea8edbdae8c7","modified":1472529379507},{"_id":"public/vendors/font-awesome/css/font-awesome.min.css","hash":"05ea25bc9b3ac48993e1fee322d3bc94b49a6e22","modified":1472529379507},{"_id":"public/vendors/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1472529379507},{"_id":"public/vendors/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1472529379507},{"_id":"public/images/Java-Queue.jpg","hash":"cf1fc65609d54728d0d1be3b7789d1b44a091617","modified":1472529379507},{"_id":"public/images/baidu_weather.png","hash":"e4eee4312ab9e22980c5a4ebbc5ce8d8edcc5b24","modified":1472529379507},{"_id":"public/images/blank-tags.jpg","hash":"0005020c1e130ce210bc1ef62020e40b019513d2","modified":1472529379507},{"_id":"public/images/youdao.png","hash":"278ce43e9455b19dfc00e3d99865988cf8c10821","modified":1472529379509},{"_id":"public/vendors/font-awesome/fonts/fontawesome-webfont.ttf","hash":"27cf1f2ec59aece6938c7bb2feb0e287ea778ff9","modified":1472529379509},{"_id":"public/images/workflow_search.png","hash":"3ce19889f9b41503f0cdc1bec5660c1614520ba0","modified":1472529379518},{"_id":"public/images/Java-Queue-method.jpg","hash":"e66d2e1883511bcba8fcde2af3c05da164e0c5d0","modified":1472529379525},{"_id":"public/images/evernote.png","hash":"2414f1ffbc62f4b69c20ea7ceb5a87a2df8c45dd","modified":1472529379530},{"_id":"public/images/stackoverflow_wf.png","hash":"90ea0c1c7853a4ccbeb97871b7b047475e6550f0","modified":1472529379531},{"_id":"public/images/myalfred_workflow.png","hash":"461bb10e5a387b3dca4cb25343337a765c356bd8","modified":1472529379531},{"_id":"public/vendors/font-awesome/fonts/fontawesome-webfont.svg","hash":"2b3c8ba7008cc014d8fb37abc6f9f49aeda83824","modified":1472529379531},{"_id":"public/images/air_quality.png","hash":"a6b2ea85baeb284bd94f05836151c8390d76c85e","modified":1472529379538},{"_id":"public/images/baidumap.png","hash":"284ed4dd6638664be054bb02fa88c1ee9ab9001c","modified":1472529379555},{"_id":"public/images/zhihudaily.png","hash":"df65c69b4920b5a160ffb2784017b8882c341d9b","modified":1472529379561},{"_id":"public/images/winteriscomming.jpg","hash":"508edaac5539a773a07ddb72b52c7e0219093336","modified":1472529379571},{"_id":"public/images/Screen Shot 2016-08-10 at 18.48.12.png","hash":"f483991d49d6c9f4c2e6e5b99b0877dc21ccba93","modified":1472529379582}],"Category":[{"name":"DevTools","_id":"cisgxyz4s0006r7cbs6cnq0km"},{"name":"hexo","_id":"cisgxyz50000br7cbbtktitic"},{"name":"翻译","_id":"cisgxyz59000mr7cboq1ndr0u"},{"name":"数据结构","_id":"cisgxyz5b000qr7cb0fo71pr8"},{"name":"Java","_id":"cisgxyz5c000tr7cba01prs9b"},{"name":"分布式","_id":"cisgxyz5d000wr7cbvj0zdavw"}],"Data":[],"Page":[{"_content":"var gulp = require('gulp');\nvar minifycss = require('gulp-minify-css');\nvar uglify = require('gulp-uglify');\nvar htmlmin = require('gulp-htmlmin');\nvar htmlclean = require('gulp-htmlclean');\n\n// 压缩 public 目录 css\ngulp.task('minify-css', function() {\n    return gulp.src('./public/**/*.css')\n        .pipe(minifycss())\n        .pipe(gulp.dest('./public'));\n});\n// 压缩 public 目录 html\ngulp.task('minify-html', function() {\n    return gulp.src('./public/**/*.html')\n        .pipe(htmlclean())\n        .pipe(htmlmin({\n            removeComments: true,\n            minifyJS: true,\n            minifyCSS: true,\n            minifyURLs: true,\n        }))\n        .pipe(gulp.dest('./public'))\n});\n// 压缩 public/js 目录 js\ngulp.task('minify-js', function() {\n    return gulp.src('./public/**/*.js')\n        .pipe(uglify())\n        .pipe(gulp.dest('./public'));\n});\n// 执行 gulp 命令时执行的任务\ngulp.task('default', [\n    'minify-html', 'minify-css', 'minify-js'\n]);\n","source":"gulpfile.js","raw":"var gulp = require('gulp');\nvar minifycss = require('gulp-minify-css');\nvar uglify = require('gulp-uglify');\nvar htmlmin = require('gulp-htmlmin');\nvar htmlclean = require('gulp-htmlclean');\n\n// 压缩 public 目录 css\ngulp.task('minify-css', function() {\n    return gulp.src('./public/**/*.css')\n        .pipe(minifycss())\n        .pipe(gulp.dest('./public'));\n});\n// 压缩 public 目录 html\ngulp.task('minify-html', function() {\n    return gulp.src('./public/**/*.html')\n        .pipe(htmlclean())\n        .pipe(htmlmin({\n            removeComments: true,\n            minifyJS: true,\n            minifyCSS: true,\n            minifyURLs: true,\n        }))\n        .pipe(gulp.dest('./public'))\n});\n// 压缩 public/js 目录 js\ngulp.task('minify-js', function() {\n    return gulp.src('./public/**/*.js')\n        .pipe(uglify())\n        .pipe(gulp.dest('./public'));\n});\n// 执行 gulp 命令时执行的任务\ngulp.task('default', [\n    'minify-html', 'minify-css', 'minify-js'\n]);\n","date":"2016-06-08T10:34:57.000Z","updated":"2016-06-08T10:34:57.000Z","path":"gulpfile.js","layout":"false","title":"","comments":1,"_id":"cisgxyz3a0000r7cbdcvt2dim","content":"var gulp = require('gulp');\nvar minifycss = require('gulp-minify-css');\nvar uglify = require('gulp-uglify');\nvar htmlmin = require('gulp-htmlmin');\nvar htmlclean = require('gulp-htmlclean');\n\n// 压缩 public 目录 css\ngulp.task('minify-css', function() {\n    return gulp.src('./public/**/*.css')\n        .pipe(minifycss())\n        .pipe(gulp.dest('./public'));\n});\n// 压缩 public 目录 html\ngulp.task('minify-html', function() {\n    return gulp.src('./public/**/*.html')\n        .pipe(htmlclean())\n        .pipe(htmlmin({\n            removeComments: true,\n            minifyJS: true,\n            minifyCSS: true,\n            minifyURLs: true,\n        }))\n        .pipe(gulp.dest('./public'))\n});\n// 压缩 public/js 目录 js\ngulp.task('minify-js', function() {\n    return gulp.src('./public/**/*.js')\n        .pipe(uglify())\n        .pipe(gulp.dest('./public'));\n});\n// 执行 gulp 命令时执行的任务\ngulp.task('default', [\n    'minify-html', 'minify-css', 'minify-js'\n]);\n","excerpt":"","more":"var gulp = require('gulp');\nvar minifycss = require('gulp-minify-css');\nvar uglify = require('gulp-uglify');\nvar htmlmin = require('gulp-htmlmin');\nvar htmlclean = require('gulp-htmlclean');\n\n// 压缩 public 目录 css\ngulp.task('minify-css', function() {\n    return gulp.src('./public/**/*.css')\n        .pipe(minifycss())\n        .pipe(gulp.dest('./public'));\n});\n// 压缩 public 目录 html\ngulp.task('minify-html', function() {\n    return gulp.src('./public/**/*.html')\n        .pipe(htmlclean())\n        .pipe(htmlmin({\n            removeComments: true,\n            minifyJS: true,\n            minifyCSS: true,\n            minifyURLs: true,\n        }))\n        .pipe(gulp.dest('./public'))\n});\n// 压缩 public/js 目录 js\ngulp.task('minify-js', function() {\n    return gulp.src('./public/**/*.js')\n        .pipe(uglify())\n        .pipe(gulp.dest('./public'));\n});\n// 执行 gulp 命令时执行的任务\ngulp.task('default', [\n    'minify-html', 'minify-css', 'minify-js'\n]);\n"},{"title":"categories","date":"2016-05-22T16:09:55.000Z","type":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2016-05-23 00:09:55\ntype: \"categories\"\n---\n","updated":"2016-05-23T09:37:32.000Z","path":"categories/index.html","comments":1,"layout":"page","_id":"cisgxyz4n0002r7cbzcgxr4qk","content":"","excerpt":"","more":""},{"title":"about","date":"2016-05-17T10:10:32.000Z","_content":"\n### Me\nMy name is kris wan\nIf you have something for me \nFeel free to comment...\n\n### Work\nI am currently working for a company located in beijing china called qunar \nwhich is probably the largest online travel info platform in china !\n\n### Code\n{% codeblock lang:java %}\nSystem.out.println('Hello there!');\nLife life = new Life(\"fun\",\"honor\");\nlife.live(\"long enough to understand the meaning of life...\")\nlife.end();\n{% endcodeblock %}\n\n### Motto\n{% blockquote David Levithan, Wide Awake %}\nDo not just seek happiness for yourself. Seek happiness for all. Through kindness. Through mercy.\n{% endblockquote %}\n\n### Favorites\ncoding\nwatching tv show (game of thrones)\nother things about to get funny\n![/images/winteriscomming.jpg](/images/winteriscomming.jpg)\n","source":"about/index.md","raw":"---\ntitle: about\ndate: 2016-05-17 18:10:32\n---\n\n### Me\nMy name is kris wan\nIf you have something for me \nFeel free to comment...\n\n### Work\nI am currently working for a company located in beijing china called qunar \nwhich is probably the largest online travel info platform in china !\n\n### Code\n{% codeblock lang:java %}\nSystem.out.println('Hello there!');\nLife life = new Life(\"fun\",\"honor\");\nlife.live(\"long enough to understand the meaning of life...\")\nlife.end();\n{% endcodeblock %}\n\n### Motto\n{% blockquote David Levithan, Wide Awake %}\nDo not just seek happiness for yourself. Seek happiness for all. Through kindness. Through mercy.\n{% endblockquote %}\n\n### Favorites\ncoding\nwatching tv show (game of thrones)\nother things about to get funny\n![/images/winteriscomming.jpg](/images/winteriscomming.jpg)\n","updated":"2016-05-23T09:37:32.000Z","path":"about/index.html","comments":1,"layout":"page","_id":"cisgxyz4p0004r7cbdm071dkc","content":"<h3 id=\"Me\"><a href=\"#Me\" class=\"headerlink\" title=\"Me\"></a>Me</h3><p>My name is kris wan<br>If you have something for me<br>Feel free to comment…</p>\n<h3 id=\"Work\"><a href=\"#Work\" class=\"headerlink\" title=\"Work\"></a>Work</h3><p>I am currently working for a company located in beijing china called qunar<br>which is probably the largest online travel info platform in china !</p>\n<h3 id=\"Code\"><a href=\"#Code\" class=\"headerlink\" title=\"Code\"></a>Code</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">System.out.println(<span class=\"string\">'Hello there!'</span>);</span><br><span class=\"line\">Life life = <span class=\"keyword\">new</span> Life(<span class=\"string\">\"fun\"</span>,<span class=\"string\">\"honor\"</span>);</span><br><span class=\"line\">life.live(<span class=\"string\">\"long enough to understand the meaning of life...\"</span>)</span><br><span class=\"line\">life.end();</span><br></pre></td></tr></table></figure>\n<h3 id=\"Motto\"><a href=\"#Motto\" class=\"headerlink\" title=\"Motto\"></a>Motto</h3><blockquote><p>Do not just seek happiness for yourself. Seek happiness for all. Through kindness. Through mercy.</p>\n<footer><strong>David Levithan</strong><cite>Wide Awake</cite></footer></blockquote>\n<h3 id=\"Favorites\"><a href=\"#Favorites\" class=\"headerlink\" title=\"Favorites\"></a>Favorites</h3><p>coding<br>watching tv show (game of thrones)<br>other things about to get funny<br><img src=\"/images/winteriscomming.jpg\" alt=\"/images/winteriscomming.jpg\"></p>\n","excerpt":"","more":"<h3 id=\"Me\"><a href=\"#Me\" class=\"headerlink\" title=\"Me\"></a>Me</h3><p>My name is kris wan<br>If you have something for me<br>Feel free to comment…</p>\n<h3 id=\"Work\"><a href=\"#Work\" class=\"headerlink\" title=\"Work\"></a>Work</h3><p>I am currently working for a company located in beijing china called qunar<br>which is probably the largest online travel info platform in china !</p>\n<h3 id=\"Code\"><a href=\"#Code\" class=\"headerlink\" title=\"Code\"></a>Code</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">System.out.println(<span class=\"string\">'Hello there!'</span>);</span><br><span class=\"line\">Life life = <span class=\"keyword\">new</span> Life(<span class=\"string\">\"fun\"</span>,<span class=\"string\">\"honor\"</span>);</span><br><span class=\"line\">life.live(<span class=\"string\">\"long enough to understand the meaning of life...\"</span>)</span><br><span class=\"line\">life.end();</span><br></pre></td></tr></table></figure>\n<h3 id=\"Motto\"><a href=\"#Motto\" class=\"headerlink\" title=\"Motto\"></a>Motto</h3><blockquote><p>Do not just seek happiness for yourself. Seek happiness for all. Through kindness. Through mercy.</p>\n<footer><strong>David Levithan</strong><cite>Wide Awake</cite></footer></blockquote>\n<h3 id=\"Favorites\"><a href=\"#Favorites\" class=\"headerlink\" title=\"Favorites\"></a>Favorites</h3><p>coding<br>watching tv show (game of thrones)<br>other things about to get funny<br><img src=\"/images/winteriscomming.jpg\" alt=\"/images/winteriscomming.jpg\"></p>\n"},{"title":"tags","date":"2016-05-22T16:11:02.000Z","type":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2016-05-23 00:11:02\ntype: \"tags\"\n---\n","updated":"2016-05-23T09:37:32.000Z","path":"tags/index.html","comments":1,"layout":"page","_id":"cisgxyz8m001fr7cbqbwnabch","content":"","excerpt":"","more":""},{"_content":"var gulp = require('gulp');\nvar minifycss = require('gulp-minify-css');\nvar uglify = require('gulp-uglify');\nvar htmlmin = require('gulp-htmlmin');\nvar htmlclean = require('gulp-htmlclean');\n\n// 压缩 public 目录 css\ngulp.task('minify-css', function() {\n    return gulp.src('./public/**/*.css')\n        .pipe(minifycss())\n        .pipe(gulp.dest('./public'));\n});\n// 压缩 public 目录 html\ngulp.task('minify-html', function() {\n  return gulp.src('./public/**/*.html')\n    .pipe(htmlclean())\n    .pipe(htmlmin({\n         removeComments: true,\n         minifyJS: true,\n         minifyCSS: true,\n         minifyURLs: true,\n    }))\n    .pipe(gulp.dest('./public'))\n});\n// 压缩 public/js 目录 js\ngulp.task('minify-js', function() {\n    return gulp.src('./public/**/*.js')\n        .pipe(uglify())\n        .pipe(gulp.dest('./public'));\n});\n// 执行 gulp 命令时执行的任务\ngulp.task('default', [\n    'minify-html','minify-css','minify-js'\n]);\n","source":"downloads/code/gulpfile.js","raw":"var gulp = require('gulp');\nvar minifycss = require('gulp-minify-css');\nvar uglify = require('gulp-uglify');\nvar htmlmin = require('gulp-htmlmin');\nvar htmlclean = require('gulp-htmlclean');\n\n// 压缩 public 目录 css\ngulp.task('minify-css', function() {\n    return gulp.src('./public/**/*.css')\n        .pipe(minifycss())\n        .pipe(gulp.dest('./public'));\n});\n// 压缩 public 目录 html\ngulp.task('minify-html', function() {\n  return gulp.src('./public/**/*.html')\n    .pipe(htmlclean())\n    .pipe(htmlmin({\n         removeComments: true,\n         minifyJS: true,\n         minifyCSS: true,\n         minifyURLs: true,\n    }))\n    .pipe(gulp.dest('./public'))\n});\n// 压缩 public/js 目录 js\ngulp.task('minify-js', function() {\n    return gulp.src('./public/**/*.js')\n        .pipe(uglify())\n        .pipe(gulp.dest('./public'));\n});\n// 执行 gulp 命令时执行的任务\ngulp.task('default', [\n    'minify-html','minify-css','minify-js'\n]);\n","date":"2016-05-23T09:37:32.000Z","updated":"2016-05-23T09:37:32.000Z","path":"downloads/code/gulpfile.js","layout":"false","title":"","comments":1,"_id":"cisgxyz98001gr7cbbu713pj8","content":"var gulp = require('gulp');\nvar minifycss = require('gulp-minify-css');\nvar uglify = require('gulp-uglify');\nvar htmlmin = require('gulp-htmlmin');\nvar htmlclean = require('gulp-htmlclean');\n\n// 压缩 public 目录 css\ngulp.task('minify-css', function() {\n    return gulp.src('./public/**/*.css')\n        .pipe(minifycss())\n        .pipe(gulp.dest('./public'));\n});\n// 压缩 public 目录 html\ngulp.task('minify-html', function() {\n  return gulp.src('./public/**/*.html')\n    .pipe(htmlclean())\n    .pipe(htmlmin({\n         removeComments: true,\n         minifyJS: true,\n         minifyCSS: true,\n         minifyURLs: true,\n    }))\n    .pipe(gulp.dest('./public'))\n});\n// 压缩 public/js 目录 js\ngulp.task('minify-js', function() {\n    return gulp.src('./public/**/*.js')\n        .pipe(uglify())\n        .pipe(gulp.dest('./public'));\n});\n// 执行 gulp 命令时执行的任务\ngulp.task('default', [\n    'minify-html','minify-css','minify-js'\n]);\n","excerpt":"","more":"var gulp = require('gulp');\nvar minifycss = require('gulp-minify-css');\nvar uglify = require('gulp-uglify');\nvar htmlmin = require('gulp-htmlmin');\nvar htmlclean = require('gulp-htmlclean');\n\n// 压缩 public 目录 css\ngulp.task('minify-css', function() {\n    return gulp.src('./public/**/*.css')\n        .pipe(minifycss())\n        .pipe(gulp.dest('./public'));\n});\n// 压缩 public 目录 html\ngulp.task('minify-html', function() {\n  return gulp.src('./public/**/*.html')\n    .pipe(htmlclean())\n    .pipe(htmlmin({\n         removeComments: true,\n         minifyJS: true,\n         minifyCSS: true,\n         minifyURLs: true,\n    }))\n    .pipe(gulp.dest('./public'))\n});\n// 压缩 public/js 目录 js\ngulp.task('minify-js', function() {\n    return gulp.src('./public/**/*.js')\n        .pipe(uglify())\n        .pipe(gulp.dest('./public'));\n});\n// 执行 gulp 命令时执行的任务\ngulp.task('default', [\n    'minify-html','minify-css','minify-js'\n]);\n"}],"Post":[{"title":"Alfred介绍","date":"2016-06-09T13:43:07.000Z","_content":"\n![/images/Alfred-icon.jpg](/images/Alfred-icon.jpg)\n\n> 以前只是听说alfred比mac自带的搜索工具spotlight要强大很多，下载下来发现其实也没体验到有多强大，最近这几天闲来无聊，把玩mac的时候尝试了下alfred的其他功能，不得不说太强大了，so powerful !\n>\n> Alfred is an award-winning app for Mac OS X which boosts your efficiency with hotkeys, keywords, text expansion and more. Search your Mac and the web, and be more productive with custom actions to control your Mac.\n\n\n## 基础功能\n- `打开应用程序`, 覆盖了spotlight的所有功能， and there is more\n- `简单搜索`，直接在输入框里面输入你需要的关键词，回车即提交Google搜索\n- `定位文件`，ctrl-space 呼出Alfred后，键入空格，输入你要查找文件名，即可定位文件，回车打开，command+回车打开文件所在文件夹\n- `复杂操作文件`：通过find、open、in等关键词搜索文件。find是定位文件，open是定位并打开文件，in是在文件中进行全文检索，三种检索方式基本上可以找到任何你想找的文件\n- `操作Shell`：输入`>`即可直接运行shell命令。比如`> cat *.py | grep print，可以直接打开终端并查找当前py文件中包含 print 的语句。`\n- `控制itunes播放`，输入iTunes，会出现一个 iTunes mini play，打开可以通过 Alfred 控制音乐播放。用快捷键也能完成这个功能：shift+option+command+p\n- 输入email，后面跟邮件地址，可以直接打开写邮件的界面\n- `定义文字片段和粘贴板`，在 Alfred 的设置-Features 选中Clipboard，在Snippets里定义自己常用的文字片段，比如代码、地址等等等，之后以`option+command+l` (*这个快捷键是我自己定义的，原先的和其他的快捷键有冲突*)呼出界面，输入文字片段的关键字回车即可。*<u>这里可以保存很长时间的粘贴板的内容，赞！！！</u>*\n- `自定义搜索`，这个稍微复杂些，打开设置窗口，点击Features-Custom Search，在右侧栏添加自定义搜索。举几个例子帮助大家理解下规则：\n  - 搜索iOS App：\n  ```\n  Search URL：\n  itunes://ax.search.itunes.apple.com/WebObjects/MZSearch.woa/wa/search?term={query}\n  Title：iOS App \n  ```\n  - 搜索Mac app:\n  ```\n  Search URL:\n  macappstore://ax.search.itunes.apple.com/WebObjects/MZSearch.woa/wa/search?q={query}\n  Title: mac app\n  keywords: mac\n  ```\n\n\n## workflow 插件\n> alfred给予了用户很大的自由度去对其进行扩展，这就是workflow插件机制，用户可以按照一定的开发规范，开发各自的任务插件，比如打电话、发短信、播放音乐，搜索天气等等...是不是非常的强大！\n>\n> With Alfred's Powerpack and workflows, you can extend Alfred and get things done in your own way. Replace repetitive tasks with workflows, and boost your productivity.\n\n### 先看看我的workflow\n![myalfredworkflow](/images/myalfred_workflow.png)\n\n> 有非常多的这种workflow可以供我们下载使用：当然我们也可以去Google，一搜一大堆，或者直接安装一个叫`workflow search`的workflow,直接在alfred上搜，下面提供两个比较常用的搜索地址：\n> https://www.alfredapp.com/workflows\n> http://www.alfredworkflow.com\n\n#### workflow search\n这个插件可以随时直接在搜索框中搜索可用的workflow,并下载，关键字是：`wf`\n![workflow_search](/images/workflow_search.png)\n#### baidu weather\n直接查看当前城市的天气状况，关键字：`tq`\n![baidu_weather](/images/baidu_weather.png)\n#### air quality\n查看当前城市的空气质量, 关键字： `air`\n![air_quality](/images/air_quality.png)\n#### copy path\n这个workflow 直接做成快捷键的方式，在finder里面选中文件后，直接快捷键：`ctrl-shift-c` 即可拷贝当前文件的绝对路径\n![copy_path](/images/copy_path.png)\n#### 有道翻译\n直接在搜索框中翻译，自动转换中英文， 关键字： `yd`\n![youdao](/images/youdao.png)\n#### 知乎日报\n直接查看知乎日报的热门文章列表， 关键字： `zh`\n![zhihudaily](/images/zhihudaily.png)\n#### 人民币金额大写\n直接转换人民币金额的大写中文， 关键字： `cny`\n![cny](/images/cny.png)\n#### stackoverflow 搜索\n直接搜索stackoverflow上的相关答案信息，关键字： `.so`\n![stackoverflow](/images/stackoverflow_wf.png)\n#### 电话呼叫\n直接呼叫iphone上的联系人： 关键字: `call` 这个貌似不支持电话薄的查询，需要每次都输入电话号码，比较麻烦\n![call](/images/call.png)\n![calling](/images/calling.png)\n#### evernote 搜索\n搜索印象笔记中的内容，同时可以新建笔记，\n关键字：en 搜索笔记，ennew 新建笔记\n![evernote](/images/evernote.png)\n#### 百度地图搜索\n搜索百度地图，\n关键字： setl: 设置当前城市， bmap 定位具体地点\n![baidumap](/images/baidumap.png)\n\n#### 结语\n{% centerquote %}\nalfred 的一般基本功能已经能满足日常大部分的使用了，而且比spotlight要好用的多，付费的powerpak－workflow进一步提升了这个工具的逼格，把玩过后，我只想说，不要太牛掰啊！\n{% endcenterquote %}\n\n\n","source":"_posts/Alfred介绍.md","raw":"---\ntitle: Alfred介绍\ndate: 2016-06-09 21:43:07\ntags: DevTools\ncategories: DevTools\n---\n\n![/images/Alfred-icon.jpg](/images/Alfred-icon.jpg)\n\n> 以前只是听说alfred比mac自带的搜索工具spotlight要强大很多，下载下来发现其实也没体验到有多强大，最近这几天闲来无聊，把玩mac的时候尝试了下alfred的其他功能，不得不说太强大了，so powerful !\n>\n> Alfred is an award-winning app for Mac OS X which boosts your efficiency with hotkeys, keywords, text expansion and more. Search your Mac and the web, and be more productive with custom actions to control your Mac.\n\n\n## 基础功能\n- `打开应用程序`, 覆盖了spotlight的所有功能， and there is more\n- `简单搜索`，直接在输入框里面输入你需要的关键词，回车即提交Google搜索\n- `定位文件`，ctrl-space 呼出Alfred后，键入空格，输入你要查找文件名，即可定位文件，回车打开，command+回车打开文件所在文件夹\n- `复杂操作文件`：通过find、open、in等关键词搜索文件。find是定位文件，open是定位并打开文件，in是在文件中进行全文检索，三种检索方式基本上可以找到任何你想找的文件\n- `操作Shell`：输入`>`即可直接运行shell命令。比如`> cat *.py | grep print，可以直接打开终端并查找当前py文件中包含 print 的语句。`\n- `控制itunes播放`，输入iTunes，会出现一个 iTunes mini play，打开可以通过 Alfred 控制音乐播放。用快捷键也能完成这个功能：shift+option+command+p\n- 输入email，后面跟邮件地址，可以直接打开写邮件的界面\n- `定义文字片段和粘贴板`，在 Alfred 的设置-Features 选中Clipboard，在Snippets里定义自己常用的文字片段，比如代码、地址等等等，之后以`option+command+l` (*这个快捷键是我自己定义的，原先的和其他的快捷键有冲突*)呼出界面，输入文字片段的关键字回车即可。*<u>这里可以保存很长时间的粘贴板的内容，赞！！！</u>*\n- `自定义搜索`，这个稍微复杂些，打开设置窗口，点击Features-Custom Search，在右侧栏添加自定义搜索。举几个例子帮助大家理解下规则：\n  - 搜索iOS App：\n  ```\n  Search URL：\n  itunes://ax.search.itunes.apple.com/WebObjects/MZSearch.woa/wa/search?term={query}\n  Title：iOS App \n  ```\n  - 搜索Mac app:\n  ```\n  Search URL:\n  macappstore://ax.search.itunes.apple.com/WebObjects/MZSearch.woa/wa/search?q={query}\n  Title: mac app\n  keywords: mac\n  ```\n\n\n## workflow 插件\n> alfred给予了用户很大的自由度去对其进行扩展，这就是workflow插件机制，用户可以按照一定的开发规范，开发各自的任务插件，比如打电话、发短信、播放音乐，搜索天气等等...是不是非常的强大！\n>\n> With Alfred's Powerpack and workflows, you can extend Alfred and get things done in your own way. Replace repetitive tasks with workflows, and boost your productivity.\n\n### 先看看我的workflow\n![myalfredworkflow](/images/myalfred_workflow.png)\n\n> 有非常多的这种workflow可以供我们下载使用：当然我们也可以去Google，一搜一大堆，或者直接安装一个叫`workflow search`的workflow,直接在alfred上搜，下面提供两个比较常用的搜索地址：\n> https://www.alfredapp.com/workflows\n> http://www.alfredworkflow.com\n\n#### workflow search\n这个插件可以随时直接在搜索框中搜索可用的workflow,并下载，关键字是：`wf`\n![workflow_search](/images/workflow_search.png)\n#### baidu weather\n直接查看当前城市的天气状况，关键字：`tq`\n![baidu_weather](/images/baidu_weather.png)\n#### air quality\n查看当前城市的空气质量, 关键字： `air`\n![air_quality](/images/air_quality.png)\n#### copy path\n这个workflow 直接做成快捷键的方式，在finder里面选中文件后，直接快捷键：`ctrl-shift-c` 即可拷贝当前文件的绝对路径\n![copy_path](/images/copy_path.png)\n#### 有道翻译\n直接在搜索框中翻译，自动转换中英文， 关键字： `yd`\n![youdao](/images/youdao.png)\n#### 知乎日报\n直接查看知乎日报的热门文章列表， 关键字： `zh`\n![zhihudaily](/images/zhihudaily.png)\n#### 人民币金额大写\n直接转换人民币金额的大写中文， 关键字： `cny`\n![cny](/images/cny.png)\n#### stackoverflow 搜索\n直接搜索stackoverflow上的相关答案信息，关键字： `.so`\n![stackoverflow](/images/stackoverflow_wf.png)\n#### 电话呼叫\n直接呼叫iphone上的联系人： 关键字: `call` 这个貌似不支持电话薄的查询，需要每次都输入电话号码，比较麻烦\n![call](/images/call.png)\n![calling](/images/calling.png)\n#### evernote 搜索\n搜索印象笔记中的内容，同时可以新建笔记，\n关键字：en 搜索笔记，ennew 新建笔记\n![evernote](/images/evernote.png)\n#### 百度地图搜索\n搜索百度地图，\n关键字： setl: 设置当前城市， bmap 定位具体地点\n![baidumap](/images/baidumap.png)\n\n#### 结语\n{% centerquote %}\nalfred 的一般基本功能已经能满足日常大部分的使用了，而且比spotlight要好用的多，付费的powerpak－workflow进一步提升了这个工具的逼格，把玩过后，我只想说，不要太牛掰啊！\n{% endcenterquote %}\n\n\n","slug":"Alfred介绍","published":1,"updated":"2016-08-29T13:52:24.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cisgxyz4h0001r7cbpbrkijbw","content":"<p><img src=\"/images/Alfred-icon.jpg\" alt=\"/images/Alfred-icon.jpg\"></p>\n<blockquote>\n<p>以前只是听说alfred比mac自带的搜索工具spotlight要强大很多，下载下来发现其实也没体验到有多强大，最近这几天闲来无聊，把玩mac的时候尝试了下alfred的其他功能，不得不说太强大了，so powerful !</p>\n<p>Alfred is an award-winning app for Mac OS X which boosts your efficiency with hotkeys, keywords, text expansion and more. Search your Mac and the web, and be more productive with custom actions to control your Mac.</p>\n</blockquote>\n<h2 id=\"基础功能\"><a href=\"#基础功能\" class=\"headerlink\" title=\"基础功能\"></a>基础功能</h2><ul>\n<li><code>打开应用程序</code>, 覆盖了spotlight的所有功能， and there is more</li>\n<li><code>简单搜索</code>，直接在输入框里面输入你需要的关键词，回车即提交Google搜索</li>\n<li><code>定位文件</code>，ctrl-space 呼出Alfred后，键入空格，输入你要查找文件名，即可定位文件，回车打开，command+回车打开文件所在文件夹</li>\n<li><code>复杂操作文件</code>：通过find、open、in等关键词搜索文件。find是定位文件，open是定位并打开文件，in是在文件中进行全文检索，三种检索方式基本上可以找到任何你想找的文件</li>\n<li><code>操作Shell</code>：输入<code>&gt;</code>即可直接运行shell命令。比如<code>&gt; cat *.py | grep print，可以直接打开终端并查找当前py文件中包含 print 的语句。</code></li>\n<li><code>控制itunes播放</code>，输入iTunes，会出现一个 iTunes mini play，打开可以通过 Alfred 控制音乐播放。用快捷键也能完成这个功能：shift+option+command+p</li>\n<li>输入email，后面跟邮件地址，可以直接打开写邮件的界面</li>\n<li><code>定义文字片段和粘贴板</code>，在 Alfred 的设置-Features 选中Clipboard，在Snippets里定义自己常用的文字片段，比如代码、地址等等等，之后以<code>option+command+l</code> (<em>这个快捷键是我自己定义的，原先的和其他的快捷键有冲突</em>)呼出界面，输入文字片段的关键字回车即可。<em><u>这里可以保存很长时间的粘贴板的内容，赞！！！</u></em></li>\n<li><p><code>自定义搜索</code>，这个稍微复杂些，打开设置窗口，点击Features-Custom Search，在右侧栏添加自定义搜索。举几个例子帮助大家理解下规则：</p>\n<ul>\n<li><p>搜索iOS App：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Search URL：</span><br><span class=\"line\">itunes://ax.search.itunes.apple.com/WebObjects/MZSearch.woa/wa/search?term=&#123;query&#125;</span><br><span class=\"line\">Title：iOS App</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>搜索Mac app:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Search URL:</span><br><span class=\"line\">macappstore://ax.search.itunes.apple.com/WebObjects/MZSearch.woa/wa/search?q=&#123;query&#125;</span><br><span class=\"line\">Title: mac app</span><br><span class=\"line\">keywords: mac</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"workflow-插件\"><a href=\"#workflow-插件\" class=\"headerlink\" title=\"workflow 插件\"></a>workflow 插件</h2><blockquote>\n<p>alfred给予了用户很大的自由度去对其进行扩展，这就是workflow插件机制，用户可以按照一定的开发规范，开发各自的任务插件，比如打电话、发短信、播放音乐，搜索天气等等…是不是非常的强大！</p>\n<p>With Alfred’s Powerpack and workflows, you can extend Alfred and get things done in your own way. Replace repetitive tasks with workflows, and boost your productivity.</p>\n</blockquote>\n<h3 id=\"先看看我的workflow\"><a href=\"#先看看我的workflow\" class=\"headerlink\" title=\"先看看我的workflow\"></a>先看看我的workflow</h3><p><img src=\"/images/myalfred_workflow.png\" alt=\"myalfredworkflow\"></p>\n<blockquote>\n<p>有非常多的这种workflow可以供我们下载使用：当然我们也可以去Google，一搜一大堆，或者直接安装一个叫<code>workflow search</code>的workflow,直接在alfred上搜，下面提供两个比较常用的搜索地址：<br><a href=\"https://www.alfredapp.com/workflows\" target=\"_blank\" rel=\"external\">https://www.alfredapp.com/workflows</a><br><a href=\"http://www.alfredworkflow.com\" target=\"_blank\" rel=\"external\">http://www.alfredworkflow.com</a></p>\n</blockquote>\n<h4 id=\"workflow-search\"><a href=\"#workflow-search\" class=\"headerlink\" title=\"workflow search\"></a>workflow search</h4><p>这个插件可以随时直接在搜索框中搜索可用的workflow,并下载，关键字是：<code>wf</code><br><img src=\"/images/workflow_search.png\" alt=\"workflow_search\"></p>\n<h4 id=\"baidu-weather\"><a href=\"#baidu-weather\" class=\"headerlink\" title=\"baidu weather\"></a>baidu weather</h4><p>直接查看当前城市的天气状况，关键字：<code>tq</code><br><img src=\"/images/baidu_weather.png\" alt=\"baidu_weather\"></p>\n<h4 id=\"air-quality\"><a href=\"#air-quality\" class=\"headerlink\" title=\"air quality\"></a>air quality</h4><p>查看当前城市的空气质量, 关键字： <code>air</code><br><img src=\"/images/air_quality.png\" alt=\"air_quality\"></p>\n<h4 id=\"copy-path\"><a href=\"#copy-path\" class=\"headerlink\" title=\"copy path\"></a>copy path</h4><p>这个workflow 直接做成快捷键的方式，在finder里面选中文件后，直接快捷键：<code>ctrl-shift-c</code> 即可拷贝当前文件的绝对路径<br><img src=\"/images/copy_path.png\" alt=\"copy_path\"></p>\n<h4 id=\"有道翻译\"><a href=\"#有道翻译\" class=\"headerlink\" title=\"有道翻译\"></a>有道翻译</h4><p>直接在搜索框中翻译，自动转换中英文， 关键字： <code>yd</code><br><img src=\"/images/youdao.png\" alt=\"youdao\"></p>\n<h4 id=\"知乎日报\"><a href=\"#知乎日报\" class=\"headerlink\" title=\"知乎日报\"></a>知乎日报</h4><p>直接查看知乎日报的热门文章列表， 关键字： <code>zh</code><br><img src=\"/images/zhihudaily.png\" alt=\"zhihudaily\"></p>\n<h4 id=\"人民币金额大写\"><a href=\"#人民币金额大写\" class=\"headerlink\" title=\"人民币金额大写\"></a>人民币金额大写</h4><p>直接转换人民币金额的大写中文， 关键字： <code>cny</code><br><img src=\"/images/cny.png\" alt=\"cny\"></p>\n<h4 id=\"stackoverflow-搜索\"><a href=\"#stackoverflow-搜索\" class=\"headerlink\" title=\"stackoverflow 搜索\"></a>stackoverflow 搜索</h4><p>直接搜索stackoverflow上的相关答案信息，关键字： <code>.so</code><br><img src=\"/images/stackoverflow_wf.png\" alt=\"stackoverflow\"></p>\n<h4 id=\"电话呼叫\"><a href=\"#电话呼叫\" class=\"headerlink\" title=\"电话呼叫\"></a>电话呼叫</h4><p>直接呼叫iphone上的联系人： 关键字: <code>call</code> 这个貌似不支持电话薄的查询，需要每次都输入电话号码，比较麻烦<br><img src=\"/images/call.png\" alt=\"call\"><br><img src=\"/images/calling.png\" alt=\"calling\"></p>\n<h4 id=\"evernote-搜索\"><a href=\"#evernote-搜索\" class=\"headerlink\" title=\"evernote 搜索\"></a>evernote 搜索</h4><p>搜索印象笔记中的内容，同时可以新建笔记，<br>关键字：en 搜索笔记，ennew 新建笔记<br><img src=\"/images/evernote.png\" alt=\"evernote\"></p>\n<h4 id=\"百度地图搜索\"><a href=\"#百度地图搜索\" class=\"headerlink\" title=\"百度地图搜索\"></a>百度地图搜索</h4><p>搜索百度地图，<br>关键字： setl: 设置当前城市， bmap 定位具体地点<br><img src=\"/images/baidumap.png\" alt=\"baidumap\"></p>\n<h4 id=\"结语\"><a href=\"#结语\" class=\"headerlink\" title=\"结语\"></a>结语</h4><blockquote class=\"blockquote-center\"><p>alfred 的一般基本功能已经能满足日常大部分的使用了，而且比spotlight要好用的多，付费的powerpak－workflow进一步提升了这个工具的逼格，把玩过后，我只想说，不要太牛掰啊！</p>\n</blockquote>\n","excerpt":"","more":"<p><img src=\"/images/Alfred-icon.jpg\" alt=\"/images/Alfred-icon.jpg\"></p>\n<blockquote>\n<p>以前只是听说alfred比mac自带的搜索工具spotlight要强大很多，下载下来发现其实也没体验到有多强大，最近这几天闲来无聊，把玩mac的时候尝试了下alfred的其他功能，不得不说太强大了，so powerful !</p>\n<p>Alfred is an award-winning app for Mac OS X which boosts your efficiency with hotkeys, keywords, text expansion and more. Search your Mac and the web, and be more productive with custom actions to control your Mac.</p>\n</blockquote>\n<h2 id=\"基础功能\"><a href=\"#基础功能\" class=\"headerlink\" title=\"基础功能\"></a>基础功能</h2><ul>\n<li><code>打开应用程序</code>, 覆盖了spotlight的所有功能， and there is more</li>\n<li><code>简单搜索</code>，直接在输入框里面输入你需要的关键词，回车即提交Google搜索</li>\n<li><code>定位文件</code>，ctrl-space 呼出Alfred后，键入空格，输入你要查找文件名，即可定位文件，回车打开，command+回车打开文件所在文件夹</li>\n<li><code>复杂操作文件</code>：通过find、open、in等关键词搜索文件。find是定位文件，open是定位并打开文件，in是在文件中进行全文检索，三种检索方式基本上可以找到任何你想找的文件</li>\n<li><code>操作Shell</code>：输入<code>&gt;</code>即可直接运行shell命令。比如<code>&gt; cat *.py | grep print，可以直接打开终端并查找当前py文件中包含 print 的语句。</code></li>\n<li><code>控制itunes播放</code>，输入iTunes，会出现一个 iTunes mini play，打开可以通过 Alfred 控制音乐播放。用快捷键也能完成这个功能：shift+option+command+p</li>\n<li>输入email，后面跟邮件地址，可以直接打开写邮件的界面</li>\n<li><code>定义文字片段和粘贴板</code>，在 Alfred 的设置-Features 选中Clipboard，在Snippets里定义自己常用的文字片段，比如代码、地址等等等，之后以<code>option+command+l</code> (<em>这个快捷键是我自己定义的，原先的和其他的快捷键有冲突</em>)呼出界面，输入文字片段的关键字回车即可。<em><u>这里可以保存很长时间的粘贴板的内容，赞！！！</u></em></li>\n<li><p><code>自定义搜索</code>，这个稍微复杂些，打开设置窗口，点击Features-Custom Search，在右侧栏添加自定义搜索。举几个例子帮助大家理解下规则：</p>\n<ul>\n<li><p>搜索iOS App：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Search URL：</span><br><span class=\"line\">itunes://ax.search.itunes.apple.com/WebObjects/MZSearch.woa/wa/search?term=&#123;query&#125;</span><br><span class=\"line\">Title：iOS App</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>搜索Mac app:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Search URL:</span><br><span class=\"line\">macappstore://ax.search.itunes.apple.com/WebObjects/MZSearch.woa/wa/search?q=&#123;query&#125;</span><br><span class=\"line\">Title: mac app</span><br><span class=\"line\">keywords: mac</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"workflow-插件\"><a href=\"#workflow-插件\" class=\"headerlink\" title=\"workflow 插件\"></a>workflow 插件</h2><blockquote>\n<p>alfred给予了用户很大的自由度去对其进行扩展，这就是workflow插件机制，用户可以按照一定的开发规范，开发各自的任务插件，比如打电话、发短信、播放音乐，搜索天气等等…是不是非常的强大！</p>\n<p>With Alfred’s Powerpack and workflows, you can extend Alfred and get things done in your own way. Replace repetitive tasks with workflows, and boost your productivity.</p>\n</blockquote>\n<h3 id=\"先看看我的workflow\"><a href=\"#先看看我的workflow\" class=\"headerlink\" title=\"先看看我的workflow\"></a>先看看我的workflow</h3><p><img src=\"/images/myalfred_workflow.png\" alt=\"myalfredworkflow\"></p>\n<blockquote>\n<p>有非常多的这种workflow可以供我们下载使用：当然我们也可以去Google，一搜一大堆，或者直接安装一个叫<code>workflow search</code>的workflow,直接在alfred上搜，下面提供两个比较常用的搜索地址：<br><a href=\"https://www.alfredapp.com/workflows\">https://www.alfredapp.com/workflows</a><br><a href=\"http://www.alfredworkflow.com\">http://www.alfredworkflow.com</a></p>\n</blockquote>\n<h4 id=\"workflow-search\"><a href=\"#workflow-search\" class=\"headerlink\" title=\"workflow search\"></a>workflow search</h4><p>这个插件可以随时直接在搜索框中搜索可用的workflow,并下载，关键字是：<code>wf</code><br><img src=\"/images/workflow_search.png\" alt=\"workflow_search\"></p>\n<h4 id=\"baidu-weather\"><a href=\"#baidu-weather\" class=\"headerlink\" title=\"baidu weather\"></a>baidu weather</h4><p>直接查看当前城市的天气状况，关键字：<code>tq</code><br><img src=\"/images/baidu_weather.png\" alt=\"baidu_weather\"></p>\n<h4 id=\"air-quality\"><a href=\"#air-quality\" class=\"headerlink\" title=\"air quality\"></a>air quality</h4><p>查看当前城市的空气质量, 关键字： <code>air</code><br><img src=\"/images/air_quality.png\" alt=\"air_quality\"></p>\n<h4 id=\"copy-path\"><a href=\"#copy-path\" class=\"headerlink\" title=\"copy path\"></a>copy path</h4><p>这个workflow 直接做成快捷键的方式，在finder里面选中文件后，直接快捷键：<code>ctrl-shift-c</code> 即可拷贝当前文件的绝对路径<br><img src=\"/images/copy_path.png\" alt=\"copy_path\"></p>\n<h4 id=\"有道翻译\"><a href=\"#有道翻译\" class=\"headerlink\" title=\"有道翻译\"></a>有道翻译</h4><p>直接在搜索框中翻译，自动转换中英文， 关键字： <code>yd</code><br><img src=\"/images/youdao.png\" alt=\"youdao\"></p>\n<h4 id=\"知乎日报\"><a href=\"#知乎日报\" class=\"headerlink\" title=\"知乎日报\"></a>知乎日报</h4><p>直接查看知乎日报的热门文章列表， 关键字： <code>zh</code><br><img src=\"/images/zhihudaily.png\" alt=\"zhihudaily\"></p>\n<h4 id=\"人民币金额大写\"><a href=\"#人民币金额大写\" class=\"headerlink\" title=\"人民币金额大写\"></a>人民币金额大写</h4><p>直接转换人民币金额的大写中文， 关键字： <code>cny</code><br><img src=\"/images/cny.png\" alt=\"cny\"></p>\n<h4 id=\"stackoverflow-搜索\"><a href=\"#stackoverflow-搜索\" class=\"headerlink\" title=\"stackoverflow 搜索\"></a>stackoverflow 搜索</h4><p>直接搜索stackoverflow上的相关答案信息，关键字： <code>.so</code><br><img src=\"/images/stackoverflow_wf.png\" alt=\"stackoverflow\"></p>\n<h4 id=\"电话呼叫\"><a href=\"#电话呼叫\" class=\"headerlink\" title=\"电话呼叫\"></a>电话呼叫</h4><p>直接呼叫iphone上的联系人： 关键字: <code>call</code> 这个貌似不支持电话薄的查询，需要每次都输入电话号码，比较麻烦<br><img src=\"/images/call.png\" alt=\"call\"><br><img src=\"/images/calling.png\" alt=\"calling\"></p>\n<h4 id=\"evernote-搜索\"><a href=\"#evernote-搜索\" class=\"headerlink\" title=\"evernote 搜索\"></a>evernote 搜索</h4><p>搜索印象笔记中的内容，同时可以新建笔记，<br>关键字：en 搜索笔记，ennew 新建笔记<br><img src=\"/images/evernote.png\" alt=\"evernote\"></p>\n<h4 id=\"百度地图搜索\"><a href=\"#百度地图搜索\" class=\"headerlink\" title=\"百度地图搜索\"></a>百度地图搜索</h4><p>搜索百度地图，<br>关键字： setl: 设置当前城市， bmap 定位具体地点<br><img src=\"/images/baidumap.png\" alt=\"baidumap\"></p>\n<h4 id=\"结语\"><a href=\"#结语\" class=\"headerlink\" title=\"结语\"></a>结语</h4><blockquote class=\"blockquote-center\"><p>alfred 的一般基本功能已经能满足日常大部分的使用了，而且比spotlight要好用的多，付费的powerpak－workflow进一步提升了这个工具的逼格，把玩过后，我只想说，不要太牛掰啊！</p>\n</blockquote>\n"},{"title":"Hexo介绍","date":"2016-05-13T10:54:15.000Z","_content":"\n![hexo_logo](/images/hexo_logo.png)\n\n\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentatoin](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## hexo 一些相关的命令\n{% centerquote %} 这里会介绍一些hexo相关的命令 {% endcenterquote %}\n\n\n### 一些博客链接\n\n[搭建博客连接:http://ibruce.info/2013/11/22/hexo-your-blog/](http://ibruce.info/2013/11/22/hexo-your-blog/)\n\n### Create a new post\n新建一篇文章\n``` bash\n$ hexo new \"My New Post\"\n```\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n本地服务器启动，可以在本地看到博客的情况，方便测试\n``` bash\n$ hexo server\n```\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n生成hexo静态文件\n``` bash\n$ hexo generate\n```\nMore info: [Server](https://hexo.io/docs/generating.html)\n\n### Clean public folder files\n清除public文件夹下的已经生成的静态文件\n``` bash\n$ hexo clean\n```\n\n### Deploy to remote sites\n部署到github上的master分支上去\n``` bash\n$ hexo deploy\n```\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n\n\n## Hexo 的一些独特的标签 tag\n\n![blank-tags](/images/tags.gif)\n\n{% centerquote %}\n Now, We'll talk a little bit hexo tag plugins, To help you munipulate you blog easily!\n{% endcenterquote %}\n\n### 居中引言 centerquote\n{% raw %}\n{% centerquote %} 引言放这里 {% endcenterquote %}\n{% endraw %}\n\n{% centerquote %} 引言放这里 {% endcenterquote %}\n\n### 左对齐引言 blockquote\n{% raw %}\n{% blockquote David Levithan, Wide Awake http://wanders.com.cn 万的个人网站 %}\n摘要引言放这里\n{% endblockquote %}\n{% endraw %}\n\n引言：\n{% blockquote David Levithan, Wide Awake http://wanders.com.cn 万的个人网站 %}\nDo not just seek happiness for yourself. Seek happiness for all. Through kindness. Through mercy.\n{% endblockquote %}\n\n### 插入图片\n- `![/images/blank-tags.png](/images/blank-tags.png)`  这个是标准的markdown的插入图片的语法\n- {% raw %} {% asset_img water-flow.jpg water is comming ! %} {% endraw %} 这种标签标示的时候`water-flow.jpg`必须要在文章同级目录下的同名文件夹下\n图片：\n![/images/blank-tags.jpg](/images/blank-tags.jpg)\n\n### 插入视频 add a youtubu video\n{% raw %} {% youtube wgdBVIX9ifA %} {% endraw %}\n这里是视频id=wgdBVIX9ifA:\n{% youtube wgdBVIX9ifA %}\n\n### 嵌入一段代码,代码是根路径下的文件：gulpfile.js\n{% raw %} {% include_code [gulpfile] [lang:javascript] gulpfile.js %} {% endraw %}\n{% include_code [gulpfile] [lang:javascript] gulpfile.js %}\n\n### 给代码片段加入一个URL codeblock\n{% raw %}\n  {% codeblock _.compact http://underscorejs.org/#compact Underscore.js %}\n    code put here\n  {% endcodeblock %}\n{% endraw %}\n\n{% codeblock _.compact http://underscorejs.org/#compact Underscore.js %}\n_.compact([0, 1, false, 2, '', 3]);\n=> [1, 2, 3]\n{% endcodeblock %}\n\n### 普通段落引言\n{% raw %} {% pullquote [qut] %}{% endpullquote %}{% endraw %}\n\n{% pullquote [qut] %}\nyou wanna quote something, you'd better place it here!\n{% endpullquote %}\n\n\n### 嵌入一个网页 add a iframe\n{% raw %} {% iframe http://www.bing.com 100% 100% %} {% endraw %}\n页面：\n{% iframe http://www.bing.com 100% 100% %}\n\n### 原始文字 raw\n{% raw %} {% raw %} what ever you put here {% endraw %} {% endraw %}\n\n{% raw %}\n If certain content is causing processing issues in your posts, wrap it with the raw tag to avoid rendering errors.\n{% endraw %}\n\n### 邮件 mail to me\n<mailto:kriswansf@gmail.com>\n","source":"_posts/Hexo介绍.md","raw":"---\ntitle: Hexo介绍\ndate: 2016-05-13 18:54:15\ntags: hexo\ncategories: hexo\n---\n\n![hexo_logo](/images/hexo_logo.png)\n\n\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentatoin](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## hexo 一些相关的命令\n{% centerquote %} 这里会介绍一些hexo相关的命令 {% endcenterquote %}\n\n\n### 一些博客链接\n\n[搭建博客连接:http://ibruce.info/2013/11/22/hexo-your-blog/](http://ibruce.info/2013/11/22/hexo-your-blog/)\n\n### Create a new post\n新建一篇文章\n``` bash\n$ hexo new \"My New Post\"\n```\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n本地服务器启动，可以在本地看到博客的情况，方便测试\n``` bash\n$ hexo server\n```\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n生成hexo静态文件\n``` bash\n$ hexo generate\n```\nMore info: [Server](https://hexo.io/docs/generating.html)\n\n### Clean public folder files\n清除public文件夹下的已经生成的静态文件\n``` bash\n$ hexo clean\n```\n\n### Deploy to remote sites\n部署到github上的master分支上去\n``` bash\n$ hexo deploy\n```\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n\n\n## Hexo 的一些独特的标签 tag\n\n![blank-tags](/images/tags.gif)\n\n{% centerquote %}\n Now, We'll talk a little bit hexo tag plugins, To help you munipulate you blog easily!\n{% endcenterquote %}\n\n### 居中引言 centerquote\n{% raw %}\n{% centerquote %} 引言放这里 {% endcenterquote %}\n{% endraw %}\n\n{% centerquote %} 引言放这里 {% endcenterquote %}\n\n### 左对齐引言 blockquote\n{% raw %}\n{% blockquote David Levithan, Wide Awake http://wanders.com.cn 万的个人网站 %}\n摘要引言放这里\n{% endblockquote %}\n{% endraw %}\n\n引言：\n{% blockquote David Levithan, Wide Awake http://wanders.com.cn 万的个人网站 %}\nDo not just seek happiness for yourself. Seek happiness for all. Through kindness. Through mercy.\n{% endblockquote %}\n\n### 插入图片\n- `![/images/blank-tags.png](/images/blank-tags.png)`  这个是标准的markdown的插入图片的语法\n- {% raw %} {% asset_img water-flow.jpg water is comming ! %} {% endraw %} 这种标签标示的时候`water-flow.jpg`必须要在文章同级目录下的同名文件夹下\n图片：\n![/images/blank-tags.jpg](/images/blank-tags.jpg)\n\n### 插入视频 add a youtubu video\n{% raw %} {% youtube wgdBVIX9ifA %} {% endraw %}\n这里是视频id=wgdBVIX9ifA:\n{% youtube wgdBVIX9ifA %}\n\n### 嵌入一段代码,代码是根路径下的文件：gulpfile.js\n{% raw %} {% include_code [gulpfile] [lang:javascript] gulpfile.js %} {% endraw %}\n{% include_code [gulpfile] [lang:javascript] gulpfile.js %}\n\n### 给代码片段加入一个URL codeblock\n{% raw %}\n  {% codeblock _.compact http://underscorejs.org/#compact Underscore.js %}\n    code put here\n  {% endcodeblock %}\n{% endraw %}\n\n{% codeblock _.compact http://underscorejs.org/#compact Underscore.js %}\n_.compact([0, 1, false, 2, '', 3]);\n=> [1, 2, 3]\n{% endcodeblock %}\n\n### 普通段落引言\n{% raw %} {% pullquote [qut] %}{% endpullquote %}{% endraw %}\n\n{% pullquote [qut] %}\nyou wanna quote something, you'd better place it here!\n{% endpullquote %}\n\n\n### 嵌入一个网页 add a iframe\n{% raw %} {% iframe http://www.bing.com 100% 100% %} {% endraw %}\n页面：\n{% iframe http://www.bing.com 100% 100% %}\n\n### 原始文字 raw\n{% raw %} {% raw %} what ever you put here {% endraw %} {% endraw %}\n\n{% raw %}\n If certain content is causing processing issues in your posts, wrap it with the raw tag to avoid rendering errors.\n{% endraw %}\n\n### 邮件 mail to me\n<mailto:kriswansf@gmail.com>\n","slug":"Hexo介绍","published":1,"updated":"2016-06-10T03:10:03.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cisgxyz4o0003r7cbitlms3ym","content":"<p><img src=\"/images/hexo_logo.png\" alt=\"hexo_logo\"></p>\n<p>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"external\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"external\">documentatoin</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"external\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"external\">GitHub</a>.</p>\n<h2 id=\"hexo-一些相关的命令\"><a href=\"#hexo-一些相关的命令\" class=\"headerlink\" title=\"hexo 一些相关的命令\"></a>hexo 一些相关的命令</h2><blockquote class=\"blockquote-center\"><p>这里会介绍一些hexo相关的命令 </p>\n</blockquote>\n<h3 id=\"一些博客链接\"><a href=\"#一些博客链接\" class=\"headerlink\" title=\"一些博客链接\"></a>一些博客链接</h3><p><a href=\"http://ibruce.info/2013/11/22/hexo-your-blog/\" target=\"_blank\" rel=\"external\">搭建博客连接:http://ibruce.info/2013/11/22/hexo-your-blog/</a></p>\n<h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><p>新建一篇文章<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></span><br></pre></td></tr></table></figure></p>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"external\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><p>本地服务器启动，可以在本地看到博客的情况，方便测试<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure></p>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"external\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><p>生成hexo静态文件<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure></p>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"external\">Server</a></p>\n<h3 id=\"Clean-public-folder-files\"><a href=\"#Clean-public-folder-files\" class=\"headerlink\" title=\"Clean public folder files\"></a>Clean public folder files</h3><p>清除public文件夹下的已经生成的静态文件<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo clean</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><p>部署到github上的master分支上去<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure></p>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"external\">Deployment</a></p>\n<h2 id=\"Hexo-的一些独特的标签-tag\"><a href=\"#Hexo-的一些独特的标签-tag\" class=\"headerlink\" title=\"Hexo 的一些独特的标签 tag\"></a>Hexo 的一些独特的标签 tag</h2><p><img src=\"/images/tags.gif\" alt=\"blank-tags\"></p>\n<blockquote class=\"blockquote-center\"><p>Now, We’ll talk a little bit hexo tag plugins, To help you munipulate you blog easily!</p>\n</blockquote>\n<h3 id=\"居中引言-centerquote\"><a href=\"#居中引言-centerquote\" class=\"headerlink\" title=\"居中引言 centerquote\"></a>居中引言 centerquote</h3>\n{% centerquote %} 引言放这里 {% endcenterquote %}\n\n<blockquote class=\"blockquote-center\"><p>引言放这里 </p>\n</blockquote>\n<h3 id=\"左对齐引言-blockquote\"><a href=\"#左对齐引言-blockquote\" class=\"headerlink\" title=\"左对齐引言 blockquote\"></a>左对齐引言 blockquote</h3>\n{% blockquote David Levithan, Wide Awake http://wanders.com.cn 万的个人网站 %}\n摘要引言放这里\n{% endblockquote %}\n\n<p>引言：<br><blockquote><p>Do not just seek happiness for yourself. Seek happiness for all. Through kindness. Through mercy.</p>\n<footer><strong>David Levithan, Wide Awake</strong><cite><a href=\"http://wanders.com.cn\" target=\"_blank\" rel=\"external\">万的个人网站</a></cite></footer></blockquote></p>\n<h3 id=\"插入图片\"><a href=\"#插入图片\" class=\"headerlink\" title=\"插入图片\"></a>插入图片</h3><ul>\n<li><code>![/images/blank-tags.png](/images/blank-tags.png)</code>  这个是标准的markdown的插入图片的语法</li>\n<li> {% asset_img water-flow.jpg water is comming ! %}  这种标签标示的时候<code>water-flow.jpg</code>必须要在文章同级目录下的同名文件夹下<br>图片：<br><img src=\"/images/blank-tags.jpg\" alt=\"/images/blank-tags.jpg\"></li>\n</ul>\n<h3 id=\"插入视频-add-a-youtubu-video\"><a href=\"#插入视频-add-a-youtubu-video\" class=\"headerlink\" title=\"插入视频 add a youtubu video\"></a>插入视频 add a youtubu video</h3> {% youtube wgdBVIX9ifA %} \n<p>这里是视频id=wgdBVIX9ifA:<br><div class=\"video-container\"><iframe src=\"//www.youtube.com/embed/wgdBVIX9ifA\" frameborder=\"0\" allowfullscreen></iframe></div></p>\n<h3 id=\"嵌入一段代码-代码是根路径下的文件：gulpfile-js\"><a href=\"#嵌入一段代码-代码是根路径下的文件：gulpfile-js\" class=\"headerlink\" title=\"嵌入一段代码,代码是根路径下的文件：gulpfile.js\"></a>嵌入一段代码,代码是根路径下的文件：gulpfile.js</h3> {% include_code [gulpfile] [lang:javascript] gulpfile.js %} \n<figure class=\"highlight javascript\"><figcaption><span>[gulpfile] []</span><a href=\"/downloads/code/gulpfile.js\">view raw</a></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> gulp = <span class=\"built_in\">require</span>(<span class=\"string\">'gulp'</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> minifycss = <span class=\"built_in\">require</span>(<span class=\"string\">'gulp-minify-css'</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> uglify = <span class=\"built_in\">require</span>(<span class=\"string\">'gulp-uglify'</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> htmlmin = <span class=\"built_in\">require</span>(<span class=\"string\">'gulp-htmlmin'</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> htmlclean = <span class=\"built_in\">require</span>(<span class=\"string\">'gulp-htmlclean'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 压缩 public 目录 css</span></span><br><span class=\"line\">gulp.task(<span class=\"string\">'minify-css'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    <span class=\"keyword\">return</span> gulp.src(<span class=\"string\">'./public/**/*.css'</span>)</span><br><span class=\"line\">        .pipe(minifycss())</span><br><span class=\"line\">        .pipe(gulp.dest(<span class=\"string\">'./public'</span>));</span><br><span class=\"line\">});</span><br><span class=\"line\"><span class=\"comment\">// 压缩 public 目录 html</span></span><br><span class=\"line\">gulp.task(<span class=\"string\">'minify-html'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">  <span class=\"keyword\">return</span> gulp.src(<span class=\"string\">'./public/**/*.html'</span>)</span><br><span class=\"line\">    .pipe(htmlclean())</span><br><span class=\"line\">    .pipe(htmlmin({</span><br><span class=\"line\">         removeComments: <span class=\"literal\">true</span>,</span><br><span class=\"line\">         minifyJS: <span class=\"literal\">true</span>,</span><br><span class=\"line\">         minifyCSS: <span class=\"literal\">true</span>,</span><br><span class=\"line\">         minifyURLs: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    }))</span><br><span class=\"line\">    .pipe(gulp.dest(<span class=\"string\">'./public'</span>))</span><br><span class=\"line\">});</span><br><span class=\"line\"><span class=\"comment\">// 压缩 public/js 目录 js</span></span><br><span class=\"line\">gulp.task(<span class=\"string\">'minify-js'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    <span class=\"keyword\">return</span> gulp.src(<span class=\"string\">'./public/**/*.js'</span>)</span><br><span class=\"line\">        .pipe(uglify())</span><br><span class=\"line\">        .pipe(gulp.dest(<span class=\"string\">'./public'</span>));</span><br><span class=\"line\">});</span><br><span class=\"line\"><span class=\"comment\">// 执行 gulp 命令时执行的任务</span></span><br><span class=\"line\">gulp.task(<span class=\"string\">'default'</span>, [</span><br><span class=\"line\">    <span class=\"string\">'minify-html'</span>,<span class=\"string\">'minify-css'</span>,<span class=\"string\">'minify-js'</span></span><br><span class=\"line\">]);</span><br></pre></td></tr></table></figure>\n<h3 id=\"给代码片段加入一个URL-codeblock\"><a href=\"#给代码片段加入一个URL-codeblock\" class=\"headerlink\" title=\"给代码片段加入一个URL codeblock\"></a>给代码片段加入一个URL codeblock</h3>\n  {% codeblock _.compact http://underscorejs.org/#compact Underscore.js %}\n    code put here\n  {% endcodeblock %}\n\n<figure class=\"highlight plain\"><figcaption><span>_.compact</span><a href=\"http://underscorejs.org/#compact\" target=\"_blank\" rel=\"external\">Underscore.js</a></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">_.compact([0, 1, false, 2, &apos;&apos;, 3]);</span><br><span class=\"line\">=&gt; [1, 2, 3]</span><br></pre></td></tr></table></figure>\n<h3 id=\"普通段落引言\"><a href=\"#普通段落引言\" class=\"headerlink\" title=\"普通段落引言\"></a>普通段落引言</h3> {% pullquote [qut] %}{% endpullquote %}\n<blockquote class=\"pullquote [qut]\"><p>you wanna quote something, you’d better place it here!</p>\n</blockquote>\n<h3 id=\"嵌入一个网页-add-a-iframe\"><a href=\"#嵌入一个网页-add-a-iframe\" class=\"headerlink\" title=\"嵌入一个网页 add a iframe\"></a>嵌入一个网页 add a iframe</h3> {% iframe http://www.bing.com 100% 100% %} \n<p>页面：<br><iframe src=\"http://www.bing.com\" width=\"100%\" height=\"100%\" frameborder=\"0\" allowfullscreen></iframe></p>\n<h3 id=\"原始文字-raw\"><a href=\"#原始文字-raw\" class=\"headerlink\" title=\"原始文字 raw\"></a>原始文字 raw</h3> {% raw %} what ever you put here {% endraw %} \n\n If certain content is causing processing issues in your posts, wrap it with the raw tag to avoid rendering errors.\n\n<h3 id=\"邮件-mail-to-me\"><a href=\"#邮件-mail-to-me\" class=\"headerlink\" title=\"邮件 mail to me\"></a>邮件 mail to me</h3><a href=\"&#x6d;&#97;&#x69;&#x6c;&#x74;&#111;&#58;&#x6b;&#x72;&#x69;&#115;&#x77;&#97;&#110;&#x73;&#102;&#x40;&#103;&#x6d;&#97;&#x69;&#x6c;&#46;&#99;&#111;&#x6d;\">&#x6b;&#x72;&#x69;&#115;&#x77;&#97;&#110;&#x73;&#102;&#x40;&#103;&#x6d;&#97;&#x69;&#x6c;&#46;&#99;&#111;&#x6d;</a>\n","excerpt":"","more":"<p><img src=\"/images/hexo_logo.png\" alt=\"hexo_logo\"></p>\n<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentatoin</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<h2 id=\"hexo-一些相关的命令\"><a href=\"#hexo-一些相关的命令\" class=\"headerlink\" title=\"hexo 一些相关的命令\"></a>hexo 一些相关的命令</h2><blockquote class=\"blockquote-center\"><p>这里会介绍一些hexo相关的命令 </p>\n</blockquote>\n<h3 id=\"一些博客链接\"><a href=\"#一些博客链接\" class=\"headerlink\" title=\"一些博客链接\"></a>一些博客链接</h3><p><a href=\"http://ibruce.info/2013/11/22/hexo-your-blog/\">搭建博客连接:http://ibruce.info/2013/11/22/hexo-your-blog/</a></p>\n<h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><p>新建一篇文章<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></span><br></pre></td></tr></table></figure></p>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><p>本地服务器启动，可以在本地看到博客的情况，方便测试<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure></p>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><p>生成hexo静态文件<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure></p>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Server</a></p>\n<h3 id=\"Clean-public-folder-files\"><a href=\"#Clean-public-folder-files\" class=\"headerlink\" title=\"Clean public folder files\"></a>Clean public folder files</h3><p>清除public文件夹下的已经生成的静态文件<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo clean</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><p>部署到github上的master分支上去<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure></p>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\">Deployment</a></p>\n<h2 id=\"Hexo-的一些独特的标签-tag\"><a href=\"#Hexo-的一些独特的标签-tag\" class=\"headerlink\" title=\"Hexo 的一些独特的标签 tag\"></a>Hexo 的一些独特的标签 tag</h2><p><img src=\"/images/tags.gif\" alt=\"blank-tags\"></p>\n<blockquote class=\"blockquote-center\"><p>Now, We’ll talk a little bit hexo tag plugins, To help you munipulate you blog easily!</p>\n</blockquote>\n<h3 id=\"居中引言-centerquote\"><a href=\"#居中引言-centerquote\" class=\"headerlink\" title=\"居中引言 centerquote\"></a>居中引言 centerquote</h3>\n{% centerquote %} 引言放这里 {% endcenterquote %}\n\n<blockquote class=\"blockquote-center\"><p>引言放这里 </p>\n</blockquote>\n<h3 id=\"左对齐引言-blockquote\"><a href=\"#左对齐引言-blockquote\" class=\"headerlink\" title=\"左对齐引言 blockquote\"></a>左对齐引言 blockquote</h3>\n{% blockquote David Levithan, Wide Awake http://wanders.com.cn 万的个人网站 %}\n摘要引言放这里\n{% endblockquote %}\n\n<p>引言：<br><blockquote><p>Do not just seek happiness for yourself. Seek happiness for all. Through kindness. Through mercy.</p>\n<footer><strong>David Levithan, Wide Awake</strong><cite><a href=\"http://wanders.com.cn\">万的个人网站</a></cite></footer></blockquote></p>\n<h3 id=\"插入图片\"><a href=\"#插入图片\" class=\"headerlink\" title=\"插入图片\"></a>插入图片</h3><ul>\n<li><code>![/images/blank-tags.png](/images/blank-tags.png)</code>  这个是标准的markdown的插入图片的语法</li>\n<li> {% asset_img water-flow.jpg water is comming ! %}  这种标签标示的时候<code>water-flow.jpg</code>必须要在文章同级目录下的同名文件夹下<br>图片：<br><img src=\"/images/blank-tags.jpg\" alt=\"/images/blank-tags.jpg\"></li>\n</ul>\n<h3 id=\"插入视频-add-a-youtubu-video\"><a href=\"#插入视频-add-a-youtubu-video\" class=\"headerlink\" title=\"插入视频 add a youtubu video\"></a>插入视频 add a youtubu video</h3> {% youtube wgdBVIX9ifA %} \n<p>这里是视频id=wgdBVIX9ifA:<br><div class=\"video-container\"><iframe src=\"//www.youtube.com/embed/wgdBVIX9ifA\" frameborder=\"0\" allowfullscreen></iframe></div></p>\n<h3 id=\"嵌入一段代码-代码是根路径下的文件：gulpfile-js\"><a href=\"#嵌入一段代码-代码是根路径下的文件：gulpfile-js\" class=\"headerlink\" title=\"嵌入一段代码,代码是根路径下的文件：gulpfile.js\"></a>嵌入一段代码,代码是根路径下的文件：gulpfile.js</h3> {% include_code [gulpfile] [lang:javascript] gulpfile.js %} \n<figure class=\"highlight javascript\"><figcaption><span>[gulpfile] []</span><a href=\"/downloads/code/gulpfile.js\">view raw</a></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> gulp = <span class=\"built_in\">require</span>(<span class=\"string\">'gulp'</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> minifycss = <span class=\"built_in\">require</span>(<span class=\"string\">'gulp-minify-css'</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> uglify = <span class=\"built_in\">require</span>(<span class=\"string\">'gulp-uglify'</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> htmlmin = <span class=\"built_in\">require</span>(<span class=\"string\">'gulp-htmlmin'</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> htmlclean = <span class=\"built_in\">require</span>(<span class=\"string\">'gulp-htmlclean'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 压缩 public 目录 css</span></span><br><span class=\"line\">gulp.task(<span class=\"string\">'minify-css'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    <span class=\"keyword\">return</span> gulp.src(<span class=\"string\">'./public/**/*.css'</span>)</span><br><span class=\"line\">        .pipe(minifycss())</span><br><span class=\"line\">        .pipe(gulp.dest(<span class=\"string\">'./public'</span>));</span><br><span class=\"line\">});</span><br><span class=\"line\"><span class=\"comment\">// 压缩 public 目录 html</span></span><br><span class=\"line\">gulp.task(<span class=\"string\">'minify-html'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">  <span class=\"keyword\">return</span> gulp.src(<span class=\"string\">'./public/**/*.html'</span>)</span><br><span class=\"line\">    .pipe(htmlclean())</span><br><span class=\"line\">    .pipe(htmlmin({</span><br><span class=\"line\">         removeComments: <span class=\"literal\">true</span>,</span><br><span class=\"line\">         minifyJS: <span class=\"literal\">true</span>,</span><br><span class=\"line\">         minifyCSS: <span class=\"literal\">true</span>,</span><br><span class=\"line\">         minifyURLs: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    }))</span><br><span class=\"line\">    .pipe(gulp.dest(<span class=\"string\">'./public'</span>))</span><br><span class=\"line\">});</span><br><span class=\"line\"><span class=\"comment\">// 压缩 public/js 目录 js</span></span><br><span class=\"line\">gulp.task(<span class=\"string\">'minify-js'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    <span class=\"keyword\">return</span> gulp.src(<span class=\"string\">'./public/**/*.js'</span>)</span><br><span class=\"line\">        .pipe(uglify())</span><br><span class=\"line\">        .pipe(gulp.dest(<span class=\"string\">'./public'</span>));</span><br><span class=\"line\">});</span><br><span class=\"line\"><span class=\"comment\">// 执行 gulp 命令时执行的任务</span></span><br><span class=\"line\">gulp.task(<span class=\"string\">'default'</span>, [</span><br><span class=\"line\">    <span class=\"string\">'minify-html'</span>,<span class=\"string\">'minify-css'</span>,<span class=\"string\">'minify-js'</span></span><br><span class=\"line\">]);</span><br></pre></td></tr></table></figure>\n<h3 id=\"给代码片段加入一个URL-codeblock\"><a href=\"#给代码片段加入一个URL-codeblock\" class=\"headerlink\" title=\"给代码片段加入一个URL codeblock\"></a>给代码片段加入一个URL codeblock</h3>\n  {% codeblock _.compact http://underscorejs.org/#compact Underscore.js %}\n    code put here\n  {% endcodeblock %}\n\n<figure class=\"highlight plain\"><figcaption><span>_.compact</span><a href=\"http://underscorejs.org/#compact\">Underscore.js</a></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">_.compact([0, 1, false, 2, &apos;&apos;, 3]);</span><br><span class=\"line\">=&gt; [1, 2, 3]</span><br></pre></td></tr></table></figure>\n<h3 id=\"普通段落引言\"><a href=\"#普通段落引言\" class=\"headerlink\" title=\"普通段落引言\"></a>普通段落引言</h3> {% pullquote [qut] %}{% endpullquote %}\n<blockquote class=\"pullquote [qut]\"><p>you wanna quote something, you’d better place it here!</p>\n</blockquote>\n<h3 id=\"嵌入一个网页-add-a-iframe\"><a href=\"#嵌入一个网页-add-a-iframe\" class=\"headerlink\" title=\"嵌入一个网页 add a iframe\"></a>嵌入一个网页 add a iframe</h3> {% iframe http://www.bing.com 100% 100% %} \n<p>页面：<br><iframe src=\"http://www.bing.com\" width=\"100%\" height=\"100%\" frameborder=\"0\" allowfullscreen></iframe></p>\n<h3 id=\"原始文字-raw\"><a href=\"#原始文字-raw\" class=\"headerlink\" title=\"原始文字 raw\"></a>原始文字 raw</h3> {% raw %} what ever you put here {% endraw %} \n\n If certain content is causing processing issues in your posts, wrap it with the raw tag to avoid rendering errors.\n\n<h3 id=\"邮件-mail-to-me\"><a href=\"#邮件-mail-to-me\" class=\"headerlink\" title=\"邮件 mail to me\"></a>邮件 mail to me</h3><a href=\"&#x6d;&#97;&#x69;&#x6c;&#x74;&#111;&#58;&#x6b;&#x72;&#x69;&#115;&#x77;&#97;&#110;&#x73;&#102;&#x40;&#103;&#x6d;&#97;&#x69;&#x6c;&#46;&#99;&#111;&#x6d;\">&#x6b;&#x72;&#x69;&#115;&#x77;&#97;&#110;&#x73;&#102;&#x40;&#103;&#x6d;&#97;&#x69;&#x6c;&#46;&#99;&#111;&#x6d;</a>\n"},{"title":"Atom快捷键整理","date":"2016-06-08T03:27:29.000Z","_content":"\n![atom](/images/atom-light-640x360.jpg)\n\n## Atom快捷键\n\n> 最近在用文本编辑器Atom, 这里整理下这个工具的一些比较常用的快捷键\n> 这里只针对平时用的频率比较高的Atom的一些快捷键做整理\n\n- `ctrl-shift-U` 调出切换编码选项 *<u>切换编码哦</u>*\n\n### 文件切换\n\n- `alt-cmd-s` 保存所有打开的文件\n- `cmd-o` 打开文件目录\n- `cmd-\\` 显示或隐藏目录树\n- `cmd-t` 查找文件\n- `cmd-b` 在打开的文件之间切换\n- `ctrl-shift-c` 复制当前文件绝对路径\n\n### 目录树操作\n- `ctrl-0` 焦点切换到目录树(再按一次或者Esc退出目录树)\n  - `a` 添加文件\n  - `d` 将当前文件另存为(duplicate)\n  - `i` 显示(隐藏)版本控制忽略的文件\n  - `delete` 删除文件\n- `alt-right 和 alt-left` 展开(隐藏)所有目录\n- `ctrl-al-] 和 ctrl-al-[` 同上\n- `ctrl-[ 和 ctrl-]` 展开(隐藏)当前目录\n- `ctrl-f 和 ctrl-b` 同上\n\n### 导航\n\n- `ctrl-p` 前一行\n- `ctrl-n` 后一行\n- `ctrl-f` 前进一个字符\n- `ctrl-b` 后退一个字符\n- `cmd-right, ctrl-E` 移动到一行结束\n- `cmd-left, ctrl-A` 移动到一行开始\n- `cmd-up` 移动到文件开始\n- `cmd-down` 移动到文件结束\n- `ctrl-g` 移动到指定行 `行号` 处\n- `cmd-r` 在方法之间跳转\n\n### 文本选取\n\n- `ctrl-shift-P` 选取至上一行\n- `ctrl-shift-N` 选取至下一样\n- `ctrl-shift-E, cmd-shift-right` 选取至本行结束\n- `ctrl-shift-A, cmd-shift-left` 选取至本行开始\n- `cmd-shift-up` 选取至文件开始\n- `cmd-shift-down` 选取至文件结尾\n- `cmd-click` 增加新光标 *<u>这个帅气</u>*\n- `cmd-shift-L` 将多行选取改为多行光标 *<u>可以利用这个搞多行编辑</u>*\n- `cmd-D` 选取文档中和当前单词相同的下一处 *<u>黑科技啊</u>*\n- `ctrl-cmd-G` 选取文档中所有和当前光标单词相同的位置\n\n### 文本编辑\n\n- `cmd-K, cmd-U` 使当前字符大写\n- `cmd-K, cmd-L` 使当前字符小写\n- `ctrl-shift-K` 删除当前行\n- `cmd-backspace` 删除到当前行开始\n- `cmd-fn-backspace` 删除到当前行结束\n\n### 括号跳转\n\n- `ctrl-m` 相应括号之间，html tag之间等跳转\n- `ctrl-cmd-m` 括号(tag)之间文本选取\n- `alt-cmd-.` 关闭当前XML/HTML tag\n\n### 查找\n\n- `cmd-F` 在buffer中查找\n- `cmd-shift-f` 在整个工程中查找\n\n### 代码操作\n\n- `alt-cmd-[` 折叠\n- `alt-cmd-]` 展开\n- `alt-cmd-shift-{` 折叠全部\n- `alt-cmd-shift-}` 展开全部\n- `cmd-k cmd-N` 指定折叠层级 N为层级数\n- `ctrl-space` 提示补全信息\n\n### 文件类型选择\n\n- `ctrl-shift-L` 选择文本类型  *<u>选择当前文件的文本类型哦</u>*\n- `ctrl-shift-M` Markdown预览\n- `alt-shift-S` 代码片段查找\n\n### 格式化beautify\n- `ctrl-alt-b` 格式化\n\n\n## MacOS快捷键\n\n> mac系统上的快捷键做了一次整理，方便自己\n> 鼠标扔掉 ?  \n> 触摸板扔掉 ？\n\n![macbookpro](/images/macbookpro.jpg)\n\n### 系统标示符\n> Mac 菜单和键盘通常使用符号来代表某些按键，其中包括以下修饰键：\n\n- Command ⌘\n- Shift ⇧\n- Option ⌥\n- Control ⌃\n- Caps Lock ⇪\n- Fn\n\n### 系统常用快捷键\n快捷键  | 描述  |  备注\n--|---|--\nCommand-G  | 再次查找：查找之前所找到项目出现的下一个位置。要查找其出现的上一个位置，请按 Command-Shift-G。  |   这个有用啊\nCommand-M  | 将最前端的窗口最小化至 Dock。要最小化最前端应用的所有窗口，请按 Command-Option-M。 |  看片的时候有用哦\nCommand-H  | 隐藏最前端应用的窗口。要查看最前端的应用但隐藏所有其他应用，请按 Command-Option-H。  |  \nOption-Command-Esc  | 强制退出：选择要强制退出的应用。或者，按住 Command-Shift-Option-Esc 3 秒钟可仅强制最前端的应用退出。  |  \nShift-Command-3  | 屏幕快照：拍摄整个屏幕的屏幕快照  |  \nCommand-逗号 (,)  | 偏好设置：打开最前端应用的偏好设置  |  \n\n### 系统设置快捷键\n快捷键  | 描述  |  备注\n--|---|--\n电源按钮  |  轻按可打开 Mac 或将 Mac 从睡眠状态唤醒。 按住此按钮 5 秒钟会强制 Mac 关机。 |  \nControl–Command–电源按钮  | 强制 Mac 重新启动。  |  \nControl–Shift–（电源按钮或介质推出键）  |  将显示器置于睡眠状态。 |\nControl–Command–介质推出键\t  |  退出所有应用，然后重新启动 Mac。如果任何打开的文稿有未存储的更改，系统将询问您是否要存储这些更改。 |  \nControl–Option–Command–（电源按钮或介质推出键）\t  | 退出所有应用，然后关闭 Mac。如果任何打开的文稿有未存储的更改，系统将询问您是否要存储这些更改。  |  \nShift-Command-Q\t  |  注销您的 OS X 用户帐户。系统将提示您确认。 |  \n\n\n","source":"_posts/Atom快捷键整理.md","raw":"---\ntitle: Atom快捷键整理\ndate: 2016-06-08T11:27:29.000Z\ntags: DevTools\ncategories: DevTools\n---\n\n![atom](/images/atom-light-640x360.jpg)\n\n## Atom快捷键\n\n> 最近在用文本编辑器Atom, 这里整理下这个工具的一些比较常用的快捷键\n> 这里只针对平时用的频率比较高的Atom的一些快捷键做整理\n\n- `ctrl-shift-U` 调出切换编码选项 *<u>切换编码哦</u>*\n\n### 文件切换\n\n- `alt-cmd-s` 保存所有打开的文件\n- `cmd-o` 打开文件目录\n- `cmd-\\` 显示或隐藏目录树\n- `cmd-t` 查找文件\n- `cmd-b` 在打开的文件之间切换\n- `ctrl-shift-c` 复制当前文件绝对路径\n\n### 目录树操作\n- `ctrl-0` 焦点切换到目录树(再按一次或者Esc退出目录树)\n  - `a` 添加文件\n  - `d` 将当前文件另存为(duplicate)\n  - `i` 显示(隐藏)版本控制忽略的文件\n  - `delete` 删除文件\n- `alt-right 和 alt-left` 展开(隐藏)所有目录\n- `ctrl-al-] 和 ctrl-al-[` 同上\n- `ctrl-[ 和 ctrl-]` 展开(隐藏)当前目录\n- `ctrl-f 和 ctrl-b` 同上\n\n### 导航\n\n- `ctrl-p` 前一行\n- `ctrl-n` 后一行\n- `ctrl-f` 前进一个字符\n- `ctrl-b` 后退一个字符\n- `cmd-right, ctrl-E` 移动到一行结束\n- `cmd-left, ctrl-A` 移动到一行开始\n- `cmd-up` 移动到文件开始\n- `cmd-down` 移动到文件结束\n- `ctrl-g` 移动到指定行 `行号` 处\n- `cmd-r` 在方法之间跳转\n\n### 文本选取\n\n- `ctrl-shift-P` 选取至上一行\n- `ctrl-shift-N` 选取至下一样\n- `ctrl-shift-E, cmd-shift-right` 选取至本行结束\n- `ctrl-shift-A, cmd-shift-left` 选取至本行开始\n- `cmd-shift-up` 选取至文件开始\n- `cmd-shift-down` 选取至文件结尾\n- `cmd-click` 增加新光标 *<u>这个帅气</u>*\n- `cmd-shift-L` 将多行选取改为多行光标 *<u>可以利用这个搞多行编辑</u>*\n- `cmd-D` 选取文档中和当前单词相同的下一处 *<u>黑科技啊</u>*\n- `ctrl-cmd-G` 选取文档中所有和当前光标单词相同的位置\n\n### 文本编辑\n\n- `cmd-K, cmd-U` 使当前字符大写\n- `cmd-K, cmd-L` 使当前字符小写\n- `ctrl-shift-K` 删除当前行\n- `cmd-backspace` 删除到当前行开始\n- `cmd-fn-backspace` 删除到当前行结束\n\n### 括号跳转\n\n- `ctrl-m` 相应括号之间，html tag之间等跳转\n- `ctrl-cmd-m` 括号(tag)之间文本选取\n- `alt-cmd-.` 关闭当前XML/HTML tag\n\n### 查找\n\n- `cmd-F` 在buffer中查找\n- `cmd-shift-f` 在整个工程中查找\n\n### 代码操作\n\n- `alt-cmd-[` 折叠\n- `alt-cmd-]` 展开\n- `alt-cmd-shift-{` 折叠全部\n- `alt-cmd-shift-}` 展开全部\n- `cmd-k cmd-N` 指定折叠层级 N为层级数\n- `ctrl-space` 提示补全信息\n\n### 文件类型选择\n\n- `ctrl-shift-L` 选择文本类型  *<u>选择当前文件的文本类型哦</u>*\n- `ctrl-shift-M` Markdown预览\n- `alt-shift-S` 代码片段查找\n\n### 格式化beautify\n- `ctrl-alt-b` 格式化\n\n\n## MacOS快捷键\n\n> mac系统上的快捷键做了一次整理，方便自己\n> 鼠标扔掉 ?  \n> 触摸板扔掉 ？\n\n![macbookpro](/images/macbookpro.jpg)\n\n### 系统标示符\n> Mac 菜单和键盘通常使用符号来代表某些按键，其中包括以下修饰键：\n\n- Command ⌘\n- Shift ⇧\n- Option ⌥\n- Control ⌃\n- Caps Lock ⇪\n- Fn\n\n### 系统常用快捷键\n快捷键  | 描述  |  备注\n--|---|--\nCommand-G  | 再次查找：查找之前所找到项目出现的下一个位置。要查找其出现的上一个位置，请按 Command-Shift-G。  |   这个有用啊\nCommand-M  | 将最前端的窗口最小化至 Dock。要最小化最前端应用的所有窗口，请按 Command-Option-M。 |  看片的时候有用哦\nCommand-H  | 隐藏最前端应用的窗口。要查看最前端的应用但隐藏所有其他应用，请按 Command-Option-H。  |  \nOption-Command-Esc  | 强制退出：选择要强制退出的应用。或者，按住 Command-Shift-Option-Esc 3 秒钟可仅强制最前端的应用退出。  |  \nShift-Command-3  | 屏幕快照：拍摄整个屏幕的屏幕快照  |  \nCommand-逗号 (,)  | 偏好设置：打开最前端应用的偏好设置  |  \n\n### 系统设置快捷键\n快捷键  | 描述  |  备注\n--|---|--\n电源按钮  |  轻按可打开 Mac 或将 Mac 从睡眠状态唤醒。 按住此按钮 5 秒钟会强制 Mac 关机。 |  \nControl–Command–电源按钮  | 强制 Mac 重新启动。  |  \nControl–Shift–（电源按钮或介质推出键）  |  将显示器置于睡眠状态。 |\nControl–Command–介质推出键\t  |  退出所有应用，然后重新启动 Mac。如果任何打开的文稿有未存储的更改，系统将询问您是否要存储这些更改。 |  \nControl–Option–Command–（电源按钮或介质推出键）\t  | 退出所有应用，然后关闭 Mac。如果任何打开的文稿有未存储的更改，系统将询问您是否要存储这些更改。  |  \nShift-Command-Q\t  |  注销您的 OS X 用户帐户。系统将提示您确认。 |  \n\n\n","slug":"Atom快捷键整理","published":1,"updated":"2016-08-29T13:52:29.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cisgxyz4t0007r7cbpgxri13a","content":"<p><img src=\"/images/atom-light-640x360.jpg\" alt=\"atom\"></p>\n<h2 id=\"Atom快捷键\"><a href=\"#Atom快捷键\" class=\"headerlink\" title=\"Atom快捷键\"></a>Atom快捷键</h2><blockquote>\n<p>最近在用文本编辑器Atom, 这里整理下这个工具的一些比较常用的快捷键<br>这里只针对平时用的频率比较高的Atom的一些快捷键做整理</p>\n</blockquote>\n<ul>\n<li><code>ctrl-shift-U</code> 调出切换编码选项 <em><u>切换编码哦</u></em></li>\n</ul>\n<h3 id=\"文件切换\"><a href=\"#文件切换\" class=\"headerlink\" title=\"文件切换\"></a>文件切换</h3><ul>\n<li><code>alt-cmd-s</code> 保存所有打开的文件</li>\n<li><code>cmd-o</code> 打开文件目录</li>\n<li><code>cmd-\\</code> 显示或隐藏目录树</li>\n<li><code>cmd-t</code> 查找文件</li>\n<li><code>cmd-b</code> 在打开的文件之间切换</li>\n<li><code>ctrl-shift-c</code> 复制当前文件绝对路径</li>\n</ul>\n<h3 id=\"目录树操作\"><a href=\"#目录树操作\" class=\"headerlink\" title=\"目录树操作\"></a>目录树操作</h3><ul>\n<li><code>ctrl-0</code> 焦点切换到目录树(再按一次或者Esc退出目录树)<ul>\n<li><code>a</code> 添加文件</li>\n<li><code>d</code> 将当前文件另存为(duplicate)</li>\n<li><code>i</code> 显示(隐藏)版本控制忽略的文件</li>\n<li><code>delete</code> 删除文件</li>\n</ul>\n</li>\n<li><code>alt-right 和 alt-left</code> 展开(隐藏)所有目录</li>\n<li><code>ctrl-al-] 和 ctrl-al-[</code> 同上</li>\n<li><code>ctrl-[ 和 ctrl-]</code> 展开(隐藏)当前目录</li>\n<li><code>ctrl-f 和 ctrl-b</code> 同上</li>\n</ul>\n<h3 id=\"导航\"><a href=\"#导航\" class=\"headerlink\" title=\"导航\"></a>导航</h3><ul>\n<li><code>ctrl-p</code> 前一行</li>\n<li><code>ctrl-n</code> 后一行</li>\n<li><code>ctrl-f</code> 前进一个字符</li>\n<li><code>ctrl-b</code> 后退一个字符</li>\n<li><code>cmd-right, ctrl-E</code> 移动到一行结束</li>\n<li><code>cmd-left, ctrl-A</code> 移动到一行开始</li>\n<li><code>cmd-up</code> 移动到文件开始</li>\n<li><code>cmd-down</code> 移动到文件结束</li>\n<li><code>ctrl-g</code> 移动到指定行 <code>行号</code> 处</li>\n<li><code>cmd-r</code> 在方法之间跳转</li>\n</ul>\n<h3 id=\"文本选取\"><a href=\"#文本选取\" class=\"headerlink\" title=\"文本选取\"></a>文本选取</h3><ul>\n<li><code>ctrl-shift-P</code> 选取至上一行</li>\n<li><code>ctrl-shift-N</code> 选取至下一样</li>\n<li><code>ctrl-shift-E, cmd-shift-right</code> 选取至本行结束</li>\n<li><code>ctrl-shift-A, cmd-shift-left</code> 选取至本行开始</li>\n<li><code>cmd-shift-up</code> 选取至文件开始</li>\n<li><code>cmd-shift-down</code> 选取至文件结尾</li>\n<li><code>cmd-click</code> 增加新光标 <em><u>这个帅气</u></em></li>\n<li><code>cmd-shift-L</code> 将多行选取改为多行光标 <em><u>可以利用这个搞多行编辑</u></em></li>\n<li><code>cmd-D</code> 选取文档中和当前单词相同的下一处 <em><u>黑科技啊</u></em></li>\n<li><code>ctrl-cmd-G</code> 选取文档中所有和当前光标单词相同的位置</li>\n</ul>\n<h3 id=\"文本编辑\"><a href=\"#文本编辑\" class=\"headerlink\" title=\"文本编辑\"></a>文本编辑</h3><ul>\n<li><code>cmd-K, cmd-U</code> 使当前字符大写</li>\n<li><code>cmd-K, cmd-L</code> 使当前字符小写</li>\n<li><code>ctrl-shift-K</code> 删除当前行</li>\n<li><code>cmd-backspace</code> 删除到当前行开始</li>\n<li><code>cmd-fn-backspace</code> 删除到当前行结束</li>\n</ul>\n<h3 id=\"括号跳转\"><a href=\"#括号跳转\" class=\"headerlink\" title=\"括号跳转\"></a>括号跳转</h3><ul>\n<li><code>ctrl-m</code> 相应括号之间，html tag之间等跳转</li>\n<li><code>ctrl-cmd-m</code> 括号(tag)之间文本选取</li>\n<li><code>alt-cmd-.</code> 关闭当前XML/HTML tag</li>\n</ul>\n<h3 id=\"查找\"><a href=\"#查找\" class=\"headerlink\" title=\"查找\"></a>查找</h3><ul>\n<li><code>cmd-F</code> 在buffer中查找</li>\n<li><code>cmd-shift-f</code> 在整个工程中查找</li>\n</ul>\n<h3 id=\"代码操作\"><a href=\"#代码操作\" class=\"headerlink\" title=\"代码操作\"></a>代码操作</h3><ul>\n<li><code>alt-cmd-[</code> 折叠</li>\n<li><code>alt-cmd-]</code> 展开</li>\n<li><code>alt-cmd-shift-{</code> 折叠全部</li>\n<li><code>alt-cmd-shift-}</code> 展开全部</li>\n<li><code>cmd-k cmd-N</code> 指定折叠层级 N为层级数</li>\n<li><code>ctrl-space</code> 提示补全信息</li>\n</ul>\n<h3 id=\"文件类型选择\"><a href=\"#文件类型选择\" class=\"headerlink\" title=\"文件类型选择\"></a>文件类型选择</h3><ul>\n<li><code>ctrl-shift-L</code> 选择文本类型  <em><u>选择当前文件的文本类型哦</u></em></li>\n<li><code>ctrl-shift-M</code> Markdown预览</li>\n<li><code>alt-shift-S</code> 代码片段查找</li>\n</ul>\n<h3 id=\"格式化beautify\"><a href=\"#格式化beautify\" class=\"headerlink\" title=\"格式化beautify\"></a>格式化beautify</h3><ul>\n<li><code>ctrl-alt-b</code> 格式化</li>\n</ul>\n<h2 id=\"MacOS快捷键\"><a href=\"#MacOS快捷键\" class=\"headerlink\" title=\"MacOS快捷键\"></a>MacOS快捷键</h2><blockquote>\n<p>mac系统上的快捷键做了一次整理，方便自己<br>鼠标扔掉 ?<br>触摸板扔掉 ？</p>\n</blockquote>\n<p><img src=\"/images/macbookpro.jpg\" alt=\"macbookpro\"></p>\n<h3 id=\"系统标示符\"><a href=\"#系统标示符\" class=\"headerlink\" title=\"系统标示符\"></a>系统标示符</h3><blockquote>\n<p>Mac 菜单和键盘通常使用符号来代表某些按键，其中包括以下修饰键：</p>\n</blockquote>\n<ul>\n<li>Command ⌘</li>\n<li>Shift ⇧</li>\n<li>Option ⌥</li>\n<li>Control ⌃</li>\n<li>Caps Lock ⇪</li>\n<li>Fn</li>\n</ul>\n<h3 id=\"系统常用快捷键\"><a href=\"#系统常用快捷键\" class=\"headerlink\" title=\"系统常用快捷键\"></a>系统常用快捷键</h3><table>\n<thead>\n<tr>\n<th>快捷键</th>\n<th>描述</th>\n<th>备注</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Command-G</td>\n<td>再次查找：查找之前所找到项目出现的下一个位置。要查找其出现的上一个位置，请按 Command-Shift-G。</td>\n<td>这个有用啊</td>\n</tr>\n<tr>\n<td>Command-M</td>\n<td>将最前端的窗口最小化至 Dock。要最小化最前端应用的所有窗口，请按 Command-Option-M。</td>\n<td>看片的时候有用哦</td>\n</tr>\n<tr>\n<td>Command-H</td>\n<td>隐藏最前端应用的窗口。要查看最前端的应用但隐藏所有其他应用，请按 Command-Option-H。</td>\n<td></td>\n</tr>\n<tr>\n<td>Option-Command-Esc</td>\n<td>强制退出：选择要强制退出的应用。或者，按住 Command-Shift-Option-Esc 3 秒钟可仅强制最前端的应用退出。</td>\n<td></td>\n</tr>\n<tr>\n<td>Shift-Command-3</td>\n<td>屏幕快照：拍摄整个屏幕的屏幕快照</td>\n<td></td>\n</tr>\n<tr>\n<td>Command-逗号 (,)</td>\n<td>偏好设置：打开最前端应用的偏好设置</td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"系统设置快捷键\"><a href=\"#系统设置快捷键\" class=\"headerlink\" title=\"系统设置快捷键\"></a>系统设置快捷键</h3><table>\n<thead>\n<tr>\n<th>快捷键</th>\n<th>描述</th>\n<th>备注</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>电源按钮</td>\n<td>轻按可打开 Mac 或将 Mac 从睡眠状态唤醒。 按住此按钮 5 秒钟会强制 Mac 关机。</td>\n<td></td>\n</tr>\n<tr>\n<td>Control–Command–电源按钮</td>\n<td>强制 Mac 重新启动。</td>\n<td></td>\n</tr>\n<tr>\n<td>Control–Shift–（电源按钮或介质推出键）</td>\n<td>将显示器置于睡眠状态。</td>\n<td></td>\n</tr>\n<tr>\n<td>Control–Command–介质推出键</td>\n<td>退出所有应用，然后重新启动 Mac。如果任何打开的文稿有未存储的更改，系统将询问您是否要存储这些更改。</td>\n<td></td>\n</tr>\n<tr>\n<td>Control–Option–Command–（电源按钮或介质推出键）</td>\n<td>退出所有应用，然后关闭 Mac。如果任何打开的文稿有未存储的更改，系统将询问您是否要存储这些更改。</td>\n<td></td>\n</tr>\n<tr>\n<td>Shift-Command-Q</td>\n<td>注销您的 OS X 用户帐户。系统将提示您确认。</td>\n<td></td>\n</tr>\n</tbody>\n</table>\n","excerpt":"","more":"<p><img src=\"/images/atom-light-640x360.jpg\" alt=\"atom\"></p>\n<h2 id=\"Atom快捷键\"><a href=\"#Atom快捷键\" class=\"headerlink\" title=\"Atom快捷键\"></a>Atom快捷键</h2><blockquote>\n<p>最近在用文本编辑器Atom, 这里整理下这个工具的一些比较常用的快捷键<br>这里只针对平时用的频率比较高的Atom的一些快捷键做整理</p>\n</blockquote>\n<ul>\n<li><code>ctrl-shift-U</code> 调出切换编码选项 <em><u>切换编码哦</u></em></li>\n</ul>\n<h3 id=\"文件切换\"><a href=\"#文件切换\" class=\"headerlink\" title=\"文件切换\"></a>文件切换</h3><ul>\n<li><code>alt-cmd-s</code> 保存所有打开的文件</li>\n<li><code>cmd-o</code> 打开文件目录</li>\n<li><code>cmd-\\</code> 显示或隐藏目录树</li>\n<li><code>cmd-t</code> 查找文件</li>\n<li><code>cmd-b</code> 在打开的文件之间切换</li>\n<li><code>ctrl-shift-c</code> 复制当前文件绝对路径</li>\n</ul>\n<h3 id=\"目录树操作\"><a href=\"#目录树操作\" class=\"headerlink\" title=\"目录树操作\"></a>目录树操作</h3><ul>\n<li><code>ctrl-0</code> 焦点切换到目录树(再按一次或者Esc退出目录树)<ul>\n<li><code>a</code> 添加文件</li>\n<li><code>d</code> 将当前文件另存为(duplicate)</li>\n<li><code>i</code> 显示(隐藏)版本控制忽略的文件</li>\n<li><code>delete</code> 删除文件</li>\n</ul>\n</li>\n<li><code>alt-right 和 alt-left</code> 展开(隐藏)所有目录</li>\n<li><code>ctrl-al-] 和 ctrl-al-[</code> 同上</li>\n<li><code>ctrl-[ 和 ctrl-]</code> 展开(隐藏)当前目录</li>\n<li><code>ctrl-f 和 ctrl-b</code> 同上</li>\n</ul>\n<h3 id=\"导航\"><a href=\"#导航\" class=\"headerlink\" title=\"导航\"></a>导航</h3><ul>\n<li><code>ctrl-p</code> 前一行</li>\n<li><code>ctrl-n</code> 后一行</li>\n<li><code>ctrl-f</code> 前进一个字符</li>\n<li><code>ctrl-b</code> 后退一个字符</li>\n<li><code>cmd-right, ctrl-E</code> 移动到一行结束</li>\n<li><code>cmd-left, ctrl-A</code> 移动到一行开始</li>\n<li><code>cmd-up</code> 移动到文件开始</li>\n<li><code>cmd-down</code> 移动到文件结束</li>\n<li><code>ctrl-g</code> 移动到指定行 <code>行号</code> 处</li>\n<li><code>cmd-r</code> 在方法之间跳转</li>\n</ul>\n<h3 id=\"文本选取\"><a href=\"#文本选取\" class=\"headerlink\" title=\"文本选取\"></a>文本选取</h3><ul>\n<li><code>ctrl-shift-P</code> 选取至上一行</li>\n<li><code>ctrl-shift-N</code> 选取至下一样</li>\n<li><code>ctrl-shift-E, cmd-shift-right</code> 选取至本行结束</li>\n<li><code>ctrl-shift-A, cmd-shift-left</code> 选取至本行开始</li>\n<li><code>cmd-shift-up</code> 选取至文件开始</li>\n<li><code>cmd-shift-down</code> 选取至文件结尾</li>\n<li><code>cmd-click</code> 增加新光标 <em><u>这个帅气</u></em></li>\n<li><code>cmd-shift-L</code> 将多行选取改为多行光标 <em><u>可以利用这个搞多行编辑</u></em></li>\n<li><code>cmd-D</code> 选取文档中和当前单词相同的下一处 <em><u>黑科技啊</u></em></li>\n<li><code>ctrl-cmd-G</code> 选取文档中所有和当前光标单词相同的位置</li>\n</ul>\n<h3 id=\"文本编辑\"><a href=\"#文本编辑\" class=\"headerlink\" title=\"文本编辑\"></a>文本编辑</h3><ul>\n<li><code>cmd-K, cmd-U</code> 使当前字符大写</li>\n<li><code>cmd-K, cmd-L</code> 使当前字符小写</li>\n<li><code>ctrl-shift-K</code> 删除当前行</li>\n<li><code>cmd-backspace</code> 删除到当前行开始</li>\n<li><code>cmd-fn-backspace</code> 删除到当前行结束</li>\n</ul>\n<h3 id=\"括号跳转\"><a href=\"#括号跳转\" class=\"headerlink\" title=\"括号跳转\"></a>括号跳转</h3><ul>\n<li><code>ctrl-m</code> 相应括号之间，html tag之间等跳转</li>\n<li><code>ctrl-cmd-m</code> 括号(tag)之间文本选取</li>\n<li><code>alt-cmd-.</code> 关闭当前XML/HTML tag</li>\n</ul>\n<h3 id=\"查找\"><a href=\"#查找\" class=\"headerlink\" title=\"查找\"></a>查找</h3><ul>\n<li><code>cmd-F</code> 在buffer中查找</li>\n<li><code>cmd-shift-f</code> 在整个工程中查找</li>\n</ul>\n<h3 id=\"代码操作\"><a href=\"#代码操作\" class=\"headerlink\" title=\"代码操作\"></a>代码操作</h3><ul>\n<li><code>alt-cmd-[</code> 折叠</li>\n<li><code>alt-cmd-]</code> 展开</li>\n<li><code>alt-cmd-shift-{</code> 折叠全部</li>\n<li><code>alt-cmd-shift-}</code> 展开全部</li>\n<li><code>cmd-k cmd-N</code> 指定折叠层级 N为层级数</li>\n<li><code>ctrl-space</code> 提示补全信息</li>\n</ul>\n<h3 id=\"文件类型选择\"><a href=\"#文件类型选择\" class=\"headerlink\" title=\"文件类型选择\"></a>文件类型选择</h3><ul>\n<li><code>ctrl-shift-L</code> 选择文本类型  <em><u>选择当前文件的文本类型哦</u></em></li>\n<li><code>ctrl-shift-M</code> Markdown预览</li>\n<li><code>alt-shift-S</code> 代码片段查找</li>\n</ul>\n<h3 id=\"格式化beautify\"><a href=\"#格式化beautify\" class=\"headerlink\" title=\"格式化beautify\"></a>格式化beautify</h3><ul>\n<li><code>ctrl-alt-b</code> 格式化</li>\n</ul>\n<h2 id=\"MacOS快捷键\"><a href=\"#MacOS快捷键\" class=\"headerlink\" title=\"MacOS快捷键\"></a>MacOS快捷键</h2><blockquote>\n<p>mac系统上的快捷键做了一次整理，方便自己<br>鼠标扔掉 ?<br>触摸板扔掉 ？</p>\n</blockquote>\n<p><img src=\"/images/macbookpro.jpg\" alt=\"macbookpro\"></p>\n<h3 id=\"系统标示符\"><a href=\"#系统标示符\" class=\"headerlink\" title=\"系统标示符\"></a>系统标示符</h3><blockquote>\n<p>Mac 菜单和键盘通常使用符号来代表某些按键，其中包括以下修饰键：</p>\n</blockquote>\n<ul>\n<li>Command ⌘</li>\n<li>Shift ⇧</li>\n<li>Option ⌥</li>\n<li>Control ⌃</li>\n<li>Caps Lock ⇪</li>\n<li>Fn</li>\n</ul>\n<h3 id=\"系统常用快捷键\"><a href=\"#系统常用快捷键\" class=\"headerlink\" title=\"系统常用快捷键\"></a>系统常用快捷键</h3><table>\n<thead>\n<tr>\n<th>快捷键</th>\n<th>描述</th>\n<th>备注</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Command-G</td>\n<td>再次查找：查找之前所找到项目出现的下一个位置。要查找其出现的上一个位置，请按 Command-Shift-G。</td>\n<td>这个有用啊</td>\n</tr>\n<tr>\n<td>Command-M</td>\n<td>将最前端的窗口最小化至 Dock。要最小化最前端应用的所有窗口，请按 Command-Option-M。</td>\n<td>看片的时候有用哦</td>\n</tr>\n<tr>\n<td>Command-H</td>\n<td>隐藏最前端应用的窗口。要查看最前端的应用但隐藏所有其他应用，请按 Command-Option-H。</td>\n<td></td>\n</tr>\n<tr>\n<td>Option-Command-Esc</td>\n<td>强制退出：选择要强制退出的应用。或者，按住 Command-Shift-Option-Esc 3 秒钟可仅强制最前端的应用退出。</td>\n<td></td>\n</tr>\n<tr>\n<td>Shift-Command-3</td>\n<td>屏幕快照：拍摄整个屏幕的屏幕快照</td>\n<td></td>\n</tr>\n<tr>\n<td>Command-逗号 (,)</td>\n<td>偏好设置：打开最前端应用的偏好设置</td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"系统设置快捷键\"><a href=\"#系统设置快捷键\" class=\"headerlink\" title=\"系统设置快捷键\"></a>系统设置快捷键</h3><table>\n<thead>\n<tr>\n<th>快捷键</th>\n<th>描述</th>\n<th>备注</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>电源按钮</td>\n<td>轻按可打开 Mac 或将 Mac 从睡眠状态唤醒。 按住此按钮 5 秒钟会强制 Mac 关机。</td>\n<td></td>\n</tr>\n<tr>\n<td>Control–Command–电源按钮</td>\n<td>强制 Mac 重新启动。</td>\n<td></td>\n</tr>\n<tr>\n<td>Control–Shift–（电源按钮或介质推出键）</td>\n<td>将显示器置于睡眠状态。</td>\n<td></td>\n</tr>\n<tr>\n<td>Control–Command–介质推出键</td>\n<td>退出所有应用，然后重新启动 Mac。如果任何打开的文稿有未存储的更改，系统将询问您是否要存储这些更改。</td>\n<td></td>\n</tr>\n<tr>\n<td>Control–Option–Command–（电源按钮或介质推出键）</td>\n<td>退出所有应用，然后关闭 Mac。如果任何打开的文稿有未存储的更改，系统将询问您是否要存储这些更改。</td>\n<td></td>\n</tr>\n<tr>\n<td>Shift-Command-Q</td>\n<td>注销您的 OS X 用户帐户。系统将提示您确认。</td>\n<td></td>\n</tr>\n</tbody>\n</table>\n"},{"title":"Java并发结构","date":"2016-08-29T10:11:52.000Z","_content":"\n> 原文地址：http://gee.cs.oswego.edu/dl/cpj/mechanics.html\n> 声明： 个人英文水平有限，翻译的不对的地方请重拍！\n> Doug Lee的书:Concurrent Programming In Java的网上地址：\n> http://gee.cs.oswego.edu/dl/cpj/index.html\n\n![](/images/14724796235520.jpg)\n\n## 线程\n1. 线程是一个可以彼此间独立执行、同时共享底层系统资源(如文件、共享对象)的调用序列，Thread类是控制和记录线程活动的类。\n2. 每个应用至少包含一个线程（即启动JVM的那个线程）， 其他的内部后台线程也会在JVM初始化的时候启动，线程数量和特性随各个JVM不同会有很大差异，但是，所有的用户线程都是由主线程（或者说它们的父线程）明确构建和启动的。\n3. 下面是一些对线程Thread类相关的重要方法、属性以及使用注意事项的总结， 所有这些都会在本书的其他章节进行讨论和解读。 针对JLS和公开的相关API文档应当咨询更详细和权威的描述。\n\n### 构造\n1. 不同的构造方法接受不同组合的构造参数如下: \n\t* 一个Runnable对象，这种情况下，接下来调用`Thread.start()`方法会调用Runnable对象的`run()`方法，默认的Thread本身就是实现了Runnable接口的对象，只不过默认的run方法是空；\n\t* 一个标示线程的字符串，这个可以用来追踪和调试，除此之外没什么其他用处；\n\t* 接受一个`ThreadGroup`，新线程都会放在这个线程组里，注意，如果没有访问当前线程组的权限，会抛出SecurityException异常；\n\n2. Thread类自身实现了Runnable接口，所以除了构造函数里传入一个Runnable对象，你还可以通过继承Thread类实现一个带有run方法的子类的方式来实现一个线程。但是最好的策略还是定义一个单独的Runnable接口的实现类并作为构造函数的参数传递给Thread类，因为：\n\t* 在一个单独的Runnable实现类里面实现代码逻辑可以免去潜在的Thread类和Runnable实现类中的同步代码块和同步方法交互的问题。 更具普遍意义的是，这种类型的代码分离有助于我们对具体的处理过程和对应的线程上下文做单独的控制。\n\t* 同时，针对同一个Runnable可以提供给多个有不同实例化方式的线程，也可以提供给其他轻量级的线程池框架处理。\n\t* 继承Thread类的方式会使得子类无法继承其他的类，不利于扩展。\n\n3. Thread类有一个可以通过构造函数设置的`daemon`属性(但是只能在一个线程启动之前设置)。\n\t* setDaemon方法的意思是设置当前线程为**后台驻留线程**，JVM会判断，当所有的非`daemon`线程都结束时，立即停止所有`daemon`线程并退出JVM。\n\t* isDaemon方法会返回当前线程是否是`daemon`线程，这个方法的作用不大，即便后台线程在程序退出时经常需要做一些清理工作(`daemon`读成**day-mon**)。\n\n### 线程启动\n1. 调用start方法后，会触发Thread实例启动一个独立的活动流去执行实例的run方法。 调用线程(父线程)所持有的同步锁不会被新的线程持有。\n2. 当线程的run方法无论是正常返回还是抛出一个未受检异常(如RuntimeException),线程都会终止。 线程即便终止之后也是==不可重启==，调用start方法多次会抛出InvalidThreadStateException异常。\n3. `isAlive`方法返回**true**代表线程已经启动但还没有终止。 如果当前线程阻塞了，该方法会返回`true`，在这个点上不同的JVM实现会有不同，有的JVM在线程被取消`cancelled`的情况下会返回`false`。没有方法可以判断一个是`is not alive`状态的线程是否曾经被启动过，同样的，一个线程也不能很轻易的判断出是由哪个**父**线程启动的，虽然可以知道其他在同一个线程组`ThreadGroup`里面的线程是谁。\n\n```java\n//ThreadPoolExecutor.java\n//runWorker(Worker w)方法\nwhile (task != null || (task = getTask()) != null) {\n//这里会循环判断队列里面的任务数是否为空，不为空的情况下，线程池里面的线程一直是为终止状态，达到池化得效果\n}\nprocessWorkerExit(w, completedAbruptly);//如果队列里面的任务数为空，在这里面释放线程\n```\n\n### 优先级\n1. 为了可以使得JVM实现跨越不同硬件平台和操作系统，Java语言对线程调度和公平性不做保证，甚至不严格保证线程会一直执行。但是线程是支持通过启发式的设置线程优先级方法来影响线程调度器的执行\n\t* 每个线程都有一个优先级，优先级序号处在`Thread.MIN_PRIORITY` 和 `Thread.MAX_PRIORITY`之间。\n\t* 默认请情况下，每一个新线程都拥有和其创建线程一致的优先级。初始执行main方法的线程默认情况下的优先级为`Thread.NORM_PRIORITY`。\n\t* 可以通过`getPriority`方法获取任意线程的当前优先级。\n\t* 可以通过`setPriority`方法动态设置任意线程的优先级，最大优先级由其所在的线程组的大小限定。\n\n2. 当存在超过可用CPU核心数的可执行线程时，CPU线程调度器更倾向于优先执行高优先级的线程。\n\t>具体的策略在不同的平台可能会有不同，例如，一些JVM的实现总是会选择最高优先级的线程执行，其他一些JVM会匹配线程的十个优先级到一些系统支持的更小(<10)的优先级类别，这样就会使得不同优先级的线程有可能会被JVM当做同等优先级对待。其他一些混淆声明的优先级或其他的调度策略会保证即便低优先级的线程最终也会有机会得到执行。 同样的，由于计算机系统中其他应用的存在，设置JVM线程的优先级，可能会，但不一定会影响调度器的执行策略。\n\n3. 优先级并不承载其他的计算机语义和正确性方面的义务。\n\t>尤其是不能用优先级控制来替代线程执行中的锁，优先级只能被用来表示不同线程间的重要性和紧急程度，在线程间竞争获取执行机会非常激烈的的场合下优先级会显得非常有用。程序应该优先按照运行正确的设计理念来设计，即便设置优先级的方法`setPriority`被定义为无操作的方法.\n  \n4. 下面的表格列出了一些约定俗成的优先级设置策略的任务类型。 在存在很多并发场景的应用中，相对来说只有非常少的一部分线程在任何时候都是可执行状态(其他的线程都由于各种原因被阻塞了)， 这种场合下控制线程的优先级显得没有多大意义。其他的并发系统的场景中，微小的优先级设置的变化会对最终的执行产生影响。\n\n| **`Range`** | **`Use`** | **`Remark`** |\n|:-----:|:---:|:----------:|\n|**`10`**|Crisis management | 危机处理，最高|\n|**`7-9`**|Interactive, event-dirven | 交互，事件驱动|\n|**`4-6`**|IO-bound |IO类型|\n|**`2-3`**|Background computation |后台运行|\n|**`1`**|Run only if noting else on | 仅当其他线程都不执行的情况下|\n\n\n### 控制方法\n1. 只有很少的几个方法可以用来做线程间的交互：\n\t* 每个线程都有一个关联的`boolean`变量`interruption status`标示出线程的中断状体。\n\n\t\t> 调用线程的`interrupt`方法会把线程的中断状态设置成`true`，除非线程正处以下方法的执行状态中：`Object.wait(),Thread.sleep(),Thread.join()`，这些情况下`interrupt()`方法会导致线程抛出异常`InterruptException`，但是线程的`interrupt`状态会设置为`false`。\n\t\t\n\t* 任何线程的中断状态都可以通过`isInterrupt`方法来检测。\n\n\t\t> 如果是通过调用`interrupt`方法来中断线程的话，该方法会返回`true`，\n\t\t但是`status`状态为false，因为无论是通过调用`Thread.interrupted`方法还是处在\n\t\t`Object.wait(),Thread.sleep(),Thread.join()`等方法的处理中系统都会抛出中断异常\n\t\t`InterruptException`。\n\t\t\n\t* 调用`thread.join()`方法会将调用线程挂起`suspend`，并等待目标线程`thread`完成。\n\n\t\t> 当线程的`thread.isAlive()`返回`false`时，`thread.join()`会立即返回。还有一个带有超时时间版本的`join(time)`方法，这个方法会在超时时间之后强制返回，即便线程还有没有处理完成。由`isAlive()`方法的定义可以看出，对一个还未开始的线程`join()`是没有任何意义的。同样的理由`join`一个不是你创建的线程也是不明智的。\n\n2. 最开始的时候，`Thread`类是支持一些额外的控制方法的，如`suspend,stop,resume,destroy`。现在`suspend,resume,stop`方法已经被废弃了，`destroy`方法从来就没在任何的发行版本的JDK中实现过，以后估计也不会了。\n\t> 现在可以通过`wating|notification`技术实现和`suspend|resume`方法一样的效果，并且更加安全，后续还会围绕`stop`方法产生的问题继续展开讨论。\n\n### 静态方法\n1. 一些线程的方法被设计成只适用于当前运行的线程(例如，调用这些方法的的线程，即当前线程)。 为了强化这个意义，这些方法被定义成静态方法\n\t* \t`Thread.currentThread`方法返回一个当前线程的引用，这个引用随后可以用于调用其他的非静态方法会。\n\t*  `Thread.interrupted`方法会清除当前线程的中断状态并返回之前的状态(这也说明，一个线程的中断状态不可能被其他的线程清除)。\n\t*  `Thread.sleep(long millseconds)`方法会导致当前线程挂起一段时间。\n\n2. `Thread.yield`方法仅仅是提示虚拟机如果有其他的可执行但是不在执行中的线程存在，线程调度器应该优先调度运行这些线程。但是不同的虚拟机可能对这个操作提示有任意的不同的解读。\n\t> 尽管没有强制的保证，`yield`方法在一些不使用时间分片的提前抢占式调度策略的单核CPU的JVM实现版本中可能会非常有效果。在这种情况下，只有当一个线程阻塞了(执行IO或者sleep)，其他线程才有可能会被重新调度，在这些系统中，执行耗时的非阻塞计算的线程会一直占用线程执行周期，降低应用的响应响应速度。作为一个安全保护机制，执行非阻塞的可能会超过时间处理器的可接受的响应时间的计算的线程或者其他的响应式线程可以插入执行`yield`方法(甚至执行sleep)，当然同样可以设置低的优先级，来让出CPU的执行时间。为了尽可能的减少不必要的影响，你还可以偶尔的时不时的调用一下`yield`方法。\n3. 在其他一些拥有预抢占式策略的虚拟机实现中，尤其是对于多核CPU来说，调度器可能甚至是提倡忽略`yield`方法给出的提醒。\n\n### 线程组\n1. 每一个线程都是作为一个线程组的成员来构造的，默认情况下，这个线程组就是调用线程构造器的线程所在的线程组，线程组嵌套类似于树状结构。 当一个对象构造一个新的线程组时，这个线程组是嵌套在当前线程组下的，`getThreadGroup`方法返回任何线程的线程组。\n2. 设计线程组的目的是用来支持动态地限制对线程访问操作的安全策略。\n\n\t> 例如，`interrupt`中断一个和当前线程不是同一个线程组的线程是非法的，这个是虚拟机保护机制的一部分，有些问题，例如\u0005一个`applet`想杀掉一个主屏幕的显示更新线程，通过限制不同线程组之间的访问权限可以阻止它们发生。\n\t> 线程组同样可以设置一个最大的优先级，所有组内的线程都不能超过这个优先级。\n\t\n3. 不提倡直接将线程组用于线程编程模型中，大部分的应用中，为达到独立于应用的目的，使用一般的集合类来追踪一组线程对象是更好的选择。\n4. 在并发编程中极少用到的几个线程组的方法中，有一个方法`uncaughtException`， 这个方法是当一个线程由于抛出一个未受检异常的时候调用，这个方法一般是会打印出异常栈。\n\n## 同步\n### 对象和锁\n1. 每个`Object`和其子类的对象实例都拥有一个锁。\n2. 基础类型如：`int,float,long`等并不是对象，只有通过他们的包装类才能被锁住。\n3. 单独的变量不能被同步关键字修饰。\n4. 锁操作只能在方法内使用。\n5. 被`volatile`关键字修饰的的字段，执行时会在原子性、可见性、和顺序执行上得到保障。\n6. 基础数据类型的数组对象可以持有锁，但是数组内单个的元素是不能的。\n7. `Class`实例是对象，和`Class`对象关联的锁一般被用在静态方法中。\n\n\n### 同步方法和同步块\n1. `synchronized`关键字有两种语法形式，同步方法和同步代码块。\n\t> 同步块有一个对象参数，这个对象就是需要锁定的对象。\n\t> 最常用的同步块参数是`this`当前对象。\n\t\n2. 同步关键字不作为方法签名的一部分。\n\t> 所以同步修饰关键字在重写父类的方法时不会自动的继承\n\t> 并且接口内的方法无法用同步修饰符修饰，构造方法也不可以用同步修饰符修饰\n3. 同步修饰的子类实例方法和父类拥有同样的锁。但是内部类的同步方法和外部类是不同的锁。然而，一个非静态内部类方法可以锁住其外部类。\n\n```java\nprivate Class Inner{\n\tpublic void test(){\n\t\tsynchronized(OuterClass.this) { \n\t\t   /* body */ \n\t\t   System.out.println(\"test Inner sync\")\n\t\t}\n\t}\n}\n```\n### 获取和释放锁\n1. 当使用`sychronized`关键字的时候，锁操作遵循一个获取和释放协议。\n\n\t> 所有的锁操作都是块结构的，只有当要进入一个同步块或者同步方法的时候才会需要获取锁，退出的时候释放锁，即便是由于异常导致的退出也不能忘记释放锁的操作。\n2. 锁操作是基于一个线程维度的，不是针对每个调用来说的。\n\t> 当一个线程抵达同步临界点，如果线程本就持有该对象的锁或者该对象的锁没有被其他线程持有，就占有锁并执行通过，否则就阻塞当前的线程执行。\n\t> 重入锁和递归锁和默认的POSIX线程默认的锁策略不同。\n\t> 这种机制对于同样的一个对象，允许一个同步方法针对同样的锁定对象`调用`另外一个同步方法。\n3. 针对同一个对象，不同线程的同步块同步方法之间遵循同样的对锁的获取和释放协议。即便一个同步方法在执行，另一个线程也可以同时调用同一个对象的其他非同步方法。也就是说，同步不等于原子操作，但是同步可以用来实现原子操作。\n4. 当一个线程释放一个锁的时候，其他线程就可以获取到这个锁(有可能是同一个线程哦，如果线程释放后立即进入另外一个同步方法中)。_**但是对于接下来哪个线程会获取到锁或什么时候一个线程能获取到锁虚拟机对此不作保证**_。 也即是没有公平性的保证，_**同样的，也没有一种机制去确定对于一个给定的锁，当前正在被哪个线程锁持有**_。\n5. 接下来会讨论到，除了控制锁，同步同样也对底层的内存模型有副作用。\n\n### 静态\n1. 锁定一个对象的意思不是说会对该对象的类和父类的静态字段做访问限制。要对静态字段做访问限制需要通过静态方法和静态块来实现。静态同步锁是通过类对象关联的静态方法来实现的。\n\t\n\t> 类C的静态锁也可以通过以下方式在实例方法中访问：`synchronized(C.class) { /* body */ }`\n\t\n2. JVM内部获取和释放类对象的锁是在类加载和初始化的阶段之间完成的，使用普通类方法和类对象的同步块是不会影响这些JVM的内部机制的，除非是你自己写的一个特殊的类加载器或是你在静态序列初始化阶段同时持多个类对象的锁。\n\t> 没有其他的内部JVM的动作会单独的为你使用和创建的类获取锁。但是如果你的子类是`java.*`包的，你\t需要注意在这些包中的类的锁的策略。\n\t\n3. 静态锁关联的类和其他类包括其父类都是不相关的。想通过在子类中增加一个静态方法来实现对父类中静态字段的访问现在是无效的。\n\t> 推荐使用明确的类名的静态块实现方式代替`getClass()`的方式\n\t\n```java \nsynchronized(C.class) { /* 推荐使用 */ }\nsynchronized(getClass()) { \n\t/* 不推荐使用，这里其实锁的是实际运行时的类，\n\t不是你想要的类 */ \n} \n```\n\t\n\t\n### 监视器\n1. 同每个对象都有一把锁一样，每个对象都有一个只能被这些方法：`wait, notify, notifyAll and Thread.interrupt`操控的**线程等待集合**。同时持有锁和等待集合的对象一般统称为：**监视器**。\n\n\t> 大部分的其他语言对这个的细节定义都有所不同。java中，**任何对象都可以作为一个监视器**。\n\t\n2. 每一个对象的等待集合都是在内部被JVM操控的。每个集合中都包含了一个被`wait`方法阻塞住的线程列表，只有当其他线程调用了对象的*通知*方法或wait被释放了之后这些线程才有可能继续执行。\n3. 由于对象的等待集合和同步锁的交互方式决定了，这些方法`wait, notify, and notifyAll`只能在对象的同步锁被占有的情况下才能被调用。\n\t> 这些约定机制无法在编译期由编译器去校验，所以如果在运行时不遵从这个机制的话会抛出一个运行时的\t异常`IllegalMonitorStateException`。\n\t\n4. 这些方法的执行解释如下：\n\t* \t**`wait`** 线程`T`执行这个方法会产生下列影响：\n\t\t1. 如果当前线程被打断，则这个方法会立即退出，抛出`InterruptedException`异常，否则该方法一直阻塞。\n\t\t2. JVM会把这个线程放在内部(也即是不提供给外部访问)的和目标对象关联的一个等待集合中。\n\t\t3. 目标对象的同步锁被释放，但是所有该线程下持有的其他的锁还是会继续持有。即便这个目标对象的锁由于嵌套同步调用的原因被重入，也照样会被释放，在后者恢复后，锁的状态会被完全重置。\n\t* **`notify`** 线程`K`执行这个方法会有下列影响：\n\t\t1. 如果在该对象的监视器等待集合中存在线程，JVM任务选择一个线程`T`并从等待集合中移除。如果等待集合中存在超过一个的线程的话，JVM对具体选择哪个进行移除操作不做保证。\n\t\t2. 被选择的线程`T`必须重新去竞争获取目标对象的同步锁，这样总是会导致线程`T`阻塞一直到调用`notify`的线程`K`释放目标对象的锁为止。这期间如果其他的线程`P`先抢占到这个锁的话，阻塞会一直继续。\n\t\t3. 最后如果线程`T`获取到对象的锁，就会从等待的执行点唤醒恢复执行。\n\t* \t**`notifyAll`** 这个方法和`notify`方法的工作机制是一样的，不同之处是，这个方法是针对等待集合中的所有线程都有效果，但是同样的，由于需要竞争获取目标对象的同步锁，所以实际上是一次一个线程执行的。\n\t*  **`interrupt`**  \n\t\t1. 如果一个线程正在挂起等待状态，这时候调用`Thread.interrupt`方法，这种情况会产生和`notify`机制同样的反应，只不过在重新获取到锁之后会抛出一个`InterruptedException`异常，并且线程的的中断状态会被置成`false`。\n\t\t2. 如果`interrupt`和`notify`在同一时间发生，JVM不保证哪一个会先得到执行，所以两个结果都是有可能的(以后的Java语言规范(JLS)可能对这种情况的结果会有一个确定的保证)。\n\t*  **`timed waits`** 带过期时间的wait方法\n\t\t* 带过期时间的wait方法：`wait(long msecs), wait(long msecs, int nanosecs)`会在设置的最大时间内将线程维持在等待队列中。这个的执行效果和不带时间限制的wait方法的执行效果是基本一致的，只是说，带过期时间的wait方法会在过期时间到之后如果还没有被`notify`的话，等待线程会自动被从等待集合中释放。这两个版本的方法并没有其他的状态上的区别。\n\t\t* 超时时间版的wait方法会在超时时间到之后，随机的一个时间点被唤醒，这是由于线程竞争和CPU调度策略以及定时器的时间粒度等决定的。(对于定时器的时间粒度的影响，JVM并不给出保证，我们观察到的大部分的JVM是：当时间参数设置的小于1毫秒的情况下，响应时间大约在1-20毫秒之内)。\n\t\t* `Thread.sleep(long msecs)`方法内部其实使用的是`wait(long msecs)`方法，但是这个睡眠方法并没有绑定到当前同步块或者同步方法对应的对象的锁。它的实现可以用以下代码来展现：\n\t\t\n\t\t\t```java \n\t\t\tif (msecs != 0)  {\n\t\t\t    Object s = new Object(); \n\t\t\t    synchronized(s) { s.wait(msecs); }\n\t\t\t}\n\t\t\t```\n\t\t\t当然了，各个系统不必非得按照这种方式实现`sleep`方法，同时请注意，`sleep(0)`的意思是线\t\t\t程至少暂停0毫秒，鬼知道这是什么意思！\n\n\n","source":"_posts/Java并发结构.md","raw":"---\ntitle: Java并发结构\ndate: 2016-08-29 18:11:52\ntags: [Java,翻译,DougLee]\ncategories: 翻译\n---\n\n> 原文地址：http://gee.cs.oswego.edu/dl/cpj/mechanics.html\n> 声明： 个人英文水平有限，翻译的不对的地方请重拍！\n> Doug Lee的书:Concurrent Programming In Java的网上地址：\n> http://gee.cs.oswego.edu/dl/cpj/index.html\n\n![](/images/14724796235520.jpg)\n\n## 线程\n1. 线程是一个可以彼此间独立执行、同时共享底层系统资源(如文件、共享对象)的调用序列，Thread类是控制和记录线程活动的类。\n2. 每个应用至少包含一个线程（即启动JVM的那个线程）， 其他的内部后台线程也会在JVM初始化的时候启动，线程数量和特性随各个JVM不同会有很大差异，但是，所有的用户线程都是由主线程（或者说它们的父线程）明确构建和启动的。\n3. 下面是一些对线程Thread类相关的重要方法、属性以及使用注意事项的总结， 所有这些都会在本书的其他章节进行讨论和解读。 针对JLS和公开的相关API文档应当咨询更详细和权威的描述。\n\n### 构造\n1. 不同的构造方法接受不同组合的构造参数如下: \n\t* 一个Runnable对象，这种情况下，接下来调用`Thread.start()`方法会调用Runnable对象的`run()`方法，默认的Thread本身就是实现了Runnable接口的对象，只不过默认的run方法是空；\n\t* 一个标示线程的字符串，这个可以用来追踪和调试，除此之外没什么其他用处；\n\t* 接受一个`ThreadGroup`，新线程都会放在这个线程组里，注意，如果没有访问当前线程组的权限，会抛出SecurityException异常；\n\n2. Thread类自身实现了Runnable接口，所以除了构造函数里传入一个Runnable对象，你还可以通过继承Thread类实现一个带有run方法的子类的方式来实现一个线程。但是最好的策略还是定义一个单独的Runnable接口的实现类并作为构造函数的参数传递给Thread类，因为：\n\t* 在一个单独的Runnable实现类里面实现代码逻辑可以免去潜在的Thread类和Runnable实现类中的同步代码块和同步方法交互的问题。 更具普遍意义的是，这种类型的代码分离有助于我们对具体的处理过程和对应的线程上下文做单独的控制。\n\t* 同时，针对同一个Runnable可以提供给多个有不同实例化方式的线程，也可以提供给其他轻量级的线程池框架处理。\n\t* 继承Thread类的方式会使得子类无法继承其他的类，不利于扩展。\n\n3. Thread类有一个可以通过构造函数设置的`daemon`属性(但是只能在一个线程启动之前设置)。\n\t* setDaemon方法的意思是设置当前线程为**后台驻留线程**，JVM会判断，当所有的非`daemon`线程都结束时，立即停止所有`daemon`线程并退出JVM。\n\t* isDaemon方法会返回当前线程是否是`daemon`线程，这个方法的作用不大，即便后台线程在程序退出时经常需要做一些清理工作(`daemon`读成**day-mon**)。\n\n### 线程启动\n1. 调用start方法后，会触发Thread实例启动一个独立的活动流去执行实例的run方法。 调用线程(父线程)所持有的同步锁不会被新的线程持有。\n2. 当线程的run方法无论是正常返回还是抛出一个未受检异常(如RuntimeException),线程都会终止。 线程即便终止之后也是==不可重启==，调用start方法多次会抛出InvalidThreadStateException异常。\n3. `isAlive`方法返回**true**代表线程已经启动但还没有终止。 如果当前线程阻塞了，该方法会返回`true`，在这个点上不同的JVM实现会有不同，有的JVM在线程被取消`cancelled`的情况下会返回`false`。没有方法可以判断一个是`is not alive`状态的线程是否曾经被启动过，同样的，一个线程也不能很轻易的判断出是由哪个**父**线程启动的，虽然可以知道其他在同一个线程组`ThreadGroup`里面的线程是谁。\n\n```java\n//ThreadPoolExecutor.java\n//runWorker(Worker w)方法\nwhile (task != null || (task = getTask()) != null) {\n//这里会循环判断队列里面的任务数是否为空，不为空的情况下，线程池里面的线程一直是为终止状态，达到池化得效果\n}\nprocessWorkerExit(w, completedAbruptly);//如果队列里面的任务数为空，在这里面释放线程\n```\n\n### 优先级\n1. 为了可以使得JVM实现跨越不同硬件平台和操作系统，Java语言对线程调度和公平性不做保证，甚至不严格保证线程会一直执行。但是线程是支持通过启发式的设置线程优先级方法来影响线程调度器的执行\n\t* 每个线程都有一个优先级，优先级序号处在`Thread.MIN_PRIORITY` 和 `Thread.MAX_PRIORITY`之间。\n\t* 默认请情况下，每一个新线程都拥有和其创建线程一致的优先级。初始执行main方法的线程默认情况下的优先级为`Thread.NORM_PRIORITY`。\n\t* 可以通过`getPriority`方法获取任意线程的当前优先级。\n\t* 可以通过`setPriority`方法动态设置任意线程的优先级，最大优先级由其所在的线程组的大小限定。\n\n2. 当存在超过可用CPU核心数的可执行线程时，CPU线程调度器更倾向于优先执行高优先级的线程。\n\t>具体的策略在不同的平台可能会有不同，例如，一些JVM的实现总是会选择最高优先级的线程执行，其他一些JVM会匹配线程的十个优先级到一些系统支持的更小(<10)的优先级类别，这样就会使得不同优先级的线程有可能会被JVM当做同等优先级对待。其他一些混淆声明的优先级或其他的调度策略会保证即便低优先级的线程最终也会有机会得到执行。 同样的，由于计算机系统中其他应用的存在，设置JVM线程的优先级，可能会，但不一定会影响调度器的执行策略。\n\n3. 优先级并不承载其他的计算机语义和正确性方面的义务。\n\t>尤其是不能用优先级控制来替代线程执行中的锁，优先级只能被用来表示不同线程间的重要性和紧急程度，在线程间竞争获取执行机会非常激烈的的场合下优先级会显得非常有用。程序应该优先按照运行正确的设计理念来设计，即便设置优先级的方法`setPriority`被定义为无操作的方法.\n  \n4. 下面的表格列出了一些约定俗成的优先级设置策略的任务类型。 在存在很多并发场景的应用中，相对来说只有非常少的一部分线程在任何时候都是可执行状态(其他的线程都由于各种原因被阻塞了)， 这种场合下控制线程的优先级显得没有多大意义。其他的并发系统的场景中，微小的优先级设置的变化会对最终的执行产生影响。\n\n| **`Range`** | **`Use`** | **`Remark`** |\n|:-----:|:---:|:----------:|\n|**`10`**|Crisis management | 危机处理，最高|\n|**`7-9`**|Interactive, event-dirven | 交互，事件驱动|\n|**`4-6`**|IO-bound |IO类型|\n|**`2-3`**|Background computation |后台运行|\n|**`1`**|Run only if noting else on | 仅当其他线程都不执行的情况下|\n\n\n### 控制方法\n1. 只有很少的几个方法可以用来做线程间的交互：\n\t* 每个线程都有一个关联的`boolean`变量`interruption status`标示出线程的中断状体。\n\n\t\t> 调用线程的`interrupt`方法会把线程的中断状态设置成`true`，除非线程正处以下方法的执行状态中：`Object.wait(),Thread.sleep(),Thread.join()`，这些情况下`interrupt()`方法会导致线程抛出异常`InterruptException`，但是线程的`interrupt`状态会设置为`false`。\n\t\t\n\t* 任何线程的中断状态都可以通过`isInterrupt`方法来检测。\n\n\t\t> 如果是通过调用`interrupt`方法来中断线程的话，该方法会返回`true`，\n\t\t但是`status`状态为false，因为无论是通过调用`Thread.interrupted`方法还是处在\n\t\t`Object.wait(),Thread.sleep(),Thread.join()`等方法的处理中系统都会抛出中断异常\n\t\t`InterruptException`。\n\t\t\n\t* 调用`thread.join()`方法会将调用线程挂起`suspend`，并等待目标线程`thread`完成。\n\n\t\t> 当线程的`thread.isAlive()`返回`false`时，`thread.join()`会立即返回。还有一个带有超时时间版本的`join(time)`方法，这个方法会在超时时间之后强制返回，即便线程还有没有处理完成。由`isAlive()`方法的定义可以看出，对一个还未开始的线程`join()`是没有任何意义的。同样的理由`join`一个不是你创建的线程也是不明智的。\n\n2. 最开始的时候，`Thread`类是支持一些额外的控制方法的，如`suspend,stop,resume,destroy`。现在`suspend,resume,stop`方法已经被废弃了，`destroy`方法从来就没在任何的发行版本的JDK中实现过，以后估计也不会了。\n\t> 现在可以通过`wating|notification`技术实现和`suspend|resume`方法一样的效果，并且更加安全，后续还会围绕`stop`方法产生的问题继续展开讨论。\n\n### 静态方法\n1. 一些线程的方法被设计成只适用于当前运行的线程(例如，调用这些方法的的线程，即当前线程)。 为了强化这个意义，这些方法被定义成静态方法\n\t* \t`Thread.currentThread`方法返回一个当前线程的引用，这个引用随后可以用于调用其他的非静态方法会。\n\t*  `Thread.interrupted`方法会清除当前线程的中断状态并返回之前的状态(这也说明，一个线程的中断状态不可能被其他的线程清除)。\n\t*  `Thread.sleep(long millseconds)`方法会导致当前线程挂起一段时间。\n\n2. `Thread.yield`方法仅仅是提示虚拟机如果有其他的可执行但是不在执行中的线程存在，线程调度器应该优先调度运行这些线程。但是不同的虚拟机可能对这个操作提示有任意的不同的解读。\n\t> 尽管没有强制的保证，`yield`方法在一些不使用时间分片的提前抢占式调度策略的单核CPU的JVM实现版本中可能会非常有效果。在这种情况下，只有当一个线程阻塞了(执行IO或者sleep)，其他线程才有可能会被重新调度，在这些系统中，执行耗时的非阻塞计算的线程会一直占用线程执行周期，降低应用的响应响应速度。作为一个安全保护机制，执行非阻塞的可能会超过时间处理器的可接受的响应时间的计算的线程或者其他的响应式线程可以插入执行`yield`方法(甚至执行sleep)，当然同样可以设置低的优先级，来让出CPU的执行时间。为了尽可能的减少不必要的影响，你还可以偶尔的时不时的调用一下`yield`方法。\n3. 在其他一些拥有预抢占式策略的虚拟机实现中，尤其是对于多核CPU来说，调度器可能甚至是提倡忽略`yield`方法给出的提醒。\n\n### 线程组\n1. 每一个线程都是作为一个线程组的成员来构造的，默认情况下，这个线程组就是调用线程构造器的线程所在的线程组，线程组嵌套类似于树状结构。 当一个对象构造一个新的线程组时，这个线程组是嵌套在当前线程组下的，`getThreadGroup`方法返回任何线程的线程组。\n2. 设计线程组的目的是用来支持动态地限制对线程访问操作的安全策略。\n\n\t> 例如，`interrupt`中断一个和当前线程不是同一个线程组的线程是非法的，这个是虚拟机保护机制的一部分，有些问题，例如\u0005一个`applet`想杀掉一个主屏幕的显示更新线程，通过限制不同线程组之间的访问权限可以阻止它们发生。\n\t> 线程组同样可以设置一个最大的优先级，所有组内的线程都不能超过这个优先级。\n\t\n3. 不提倡直接将线程组用于线程编程模型中，大部分的应用中，为达到独立于应用的目的，使用一般的集合类来追踪一组线程对象是更好的选择。\n4. 在并发编程中极少用到的几个线程组的方法中，有一个方法`uncaughtException`， 这个方法是当一个线程由于抛出一个未受检异常的时候调用，这个方法一般是会打印出异常栈。\n\n## 同步\n### 对象和锁\n1. 每个`Object`和其子类的对象实例都拥有一个锁。\n2. 基础类型如：`int,float,long`等并不是对象，只有通过他们的包装类才能被锁住。\n3. 单独的变量不能被同步关键字修饰。\n4. 锁操作只能在方法内使用。\n5. 被`volatile`关键字修饰的的字段，执行时会在原子性、可见性、和顺序执行上得到保障。\n6. 基础数据类型的数组对象可以持有锁，但是数组内单个的元素是不能的。\n7. `Class`实例是对象，和`Class`对象关联的锁一般被用在静态方法中。\n\n\n### 同步方法和同步块\n1. `synchronized`关键字有两种语法形式，同步方法和同步代码块。\n\t> 同步块有一个对象参数，这个对象就是需要锁定的对象。\n\t> 最常用的同步块参数是`this`当前对象。\n\t\n2. 同步关键字不作为方法签名的一部分。\n\t> 所以同步修饰关键字在重写父类的方法时不会自动的继承\n\t> 并且接口内的方法无法用同步修饰符修饰，构造方法也不可以用同步修饰符修饰\n3. 同步修饰的子类实例方法和父类拥有同样的锁。但是内部类的同步方法和外部类是不同的锁。然而，一个非静态内部类方法可以锁住其外部类。\n\n```java\nprivate Class Inner{\n\tpublic void test(){\n\t\tsynchronized(OuterClass.this) { \n\t\t   /* body */ \n\t\t   System.out.println(\"test Inner sync\")\n\t\t}\n\t}\n}\n```\n### 获取和释放锁\n1. 当使用`sychronized`关键字的时候，锁操作遵循一个获取和释放协议。\n\n\t> 所有的锁操作都是块结构的，只有当要进入一个同步块或者同步方法的时候才会需要获取锁，退出的时候释放锁，即便是由于异常导致的退出也不能忘记释放锁的操作。\n2. 锁操作是基于一个线程维度的，不是针对每个调用来说的。\n\t> 当一个线程抵达同步临界点，如果线程本就持有该对象的锁或者该对象的锁没有被其他线程持有，就占有锁并执行通过，否则就阻塞当前的线程执行。\n\t> 重入锁和递归锁和默认的POSIX线程默认的锁策略不同。\n\t> 这种机制对于同样的一个对象，允许一个同步方法针对同样的锁定对象`调用`另外一个同步方法。\n3. 针对同一个对象，不同线程的同步块同步方法之间遵循同样的对锁的获取和释放协议。即便一个同步方法在执行，另一个线程也可以同时调用同一个对象的其他非同步方法。也就是说，同步不等于原子操作，但是同步可以用来实现原子操作。\n4. 当一个线程释放一个锁的时候，其他线程就可以获取到这个锁(有可能是同一个线程哦，如果线程释放后立即进入另外一个同步方法中)。_**但是对于接下来哪个线程会获取到锁或什么时候一个线程能获取到锁虚拟机对此不作保证**_。 也即是没有公平性的保证，_**同样的，也没有一种机制去确定对于一个给定的锁，当前正在被哪个线程锁持有**_。\n5. 接下来会讨论到，除了控制锁，同步同样也对底层的内存模型有副作用。\n\n### 静态\n1. 锁定一个对象的意思不是说会对该对象的类和父类的静态字段做访问限制。要对静态字段做访问限制需要通过静态方法和静态块来实现。静态同步锁是通过类对象关联的静态方法来实现的。\n\t\n\t> 类C的静态锁也可以通过以下方式在实例方法中访问：`synchronized(C.class) { /* body */ }`\n\t\n2. JVM内部获取和释放类对象的锁是在类加载和初始化的阶段之间完成的，使用普通类方法和类对象的同步块是不会影响这些JVM的内部机制的，除非是你自己写的一个特殊的类加载器或是你在静态序列初始化阶段同时持多个类对象的锁。\n\t> 没有其他的内部JVM的动作会单独的为你使用和创建的类获取锁。但是如果你的子类是`java.*`包的，你\t需要注意在这些包中的类的锁的策略。\n\t\n3. 静态锁关联的类和其他类包括其父类都是不相关的。想通过在子类中增加一个静态方法来实现对父类中静态字段的访问现在是无效的。\n\t> 推荐使用明确的类名的静态块实现方式代替`getClass()`的方式\n\t\n```java \nsynchronized(C.class) { /* 推荐使用 */ }\nsynchronized(getClass()) { \n\t/* 不推荐使用，这里其实锁的是实际运行时的类，\n\t不是你想要的类 */ \n} \n```\n\t\n\t\n### 监视器\n1. 同每个对象都有一把锁一样，每个对象都有一个只能被这些方法：`wait, notify, notifyAll and Thread.interrupt`操控的**线程等待集合**。同时持有锁和等待集合的对象一般统称为：**监视器**。\n\n\t> 大部分的其他语言对这个的细节定义都有所不同。java中，**任何对象都可以作为一个监视器**。\n\t\n2. 每一个对象的等待集合都是在内部被JVM操控的。每个集合中都包含了一个被`wait`方法阻塞住的线程列表，只有当其他线程调用了对象的*通知*方法或wait被释放了之后这些线程才有可能继续执行。\n3. 由于对象的等待集合和同步锁的交互方式决定了，这些方法`wait, notify, and notifyAll`只能在对象的同步锁被占有的情况下才能被调用。\n\t> 这些约定机制无法在编译期由编译器去校验，所以如果在运行时不遵从这个机制的话会抛出一个运行时的\t异常`IllegalMonitorStateException`。\n\t\n4. 这些方法的执行解释如下：\n\t* \t**`wait`** 线程`T`执行这个方法会产生下列影响：\n\t\t1. 如果当前线程被打断，则这个方法会立即退出，抛出`InterruptedException`异常，否则该方法一直阻塞。\n\t\t2. JVM会把这个线程放在内部(也即是不提供给外部访问)的和目标对象关联的一个等待集合中。\n\t\t3. 目标对象的同步锁被释放，但是所有该线程下持有的其他的锁还是会继续持有。即便这个目标对象的锁由于嵌套同步调用的原因被重入，也照样会被释放，在后者恢复后，锁的状态会被完全重置。\n\t* **`notify`** 线程`K`执行这个方法会有下列影响：\n\t\t1. 如果在该对象的监视器等待集合中存在线程，JVM任务选择一个线程`T`并从等待集合中移除。如果等待集合中存在超过一个的线程的话，JVM对具体选择哪个进行移除操作不做保证。\n\t\t2. 被选择的线程`T`必须重新去竞争获取目标对象的同步锁，这样总是会导致线程`T`阻塞一直到调用`notify`的线程`K`释放目标对象的锁为止。这期间如果其他的线程`P`先抢占到这个锁的话，阻塞会一直继续。\n\t\t3. 最后如果线程`T`获取到对象的锁，就会从等待的执行点唤醒恢复执行。\n\t* \t**`notifyAll`** 这个方法和`notify`方法的工作机制是一样的，不同之处是，这个方法是针对等待集合中的所有线程都有效果，但是同样的，由于需要竞争获取目标对象的同步锁，所以实际上是一次一个线程执行的。\n\t*  **`interrupt`**  \n\t\t1. 如果一个线程正在挂起等待状态，这时候调用`Thread.interrupt`方法，这种情况会产生和`notify`机制同样的反应，只不过在重新获取到锁之后会抛出一个`InterruptedException`异常，并且线程的的中断状态会被置成`false`。\n\t\t2. 如果`interrupt`和`notify`在同一时间发生，JVM不保证哪一个会先得到执行，所以两个结果都是有可能的(以后的Java语言规范(JLS)可能对这种情况的结果会有一个确定的保证)。\n\t*  **`timed waits`** 带过期时间的wait方法\n\t\t* 带过期时间的wait方法：`wait(long msecs), wait(long msecs, int nanosecs)`会在设置的最大时间内将线程维持在等待队列中。这个的执行效果和不带时间限制的wait方法的执行效果是基本一致的，只是说，带过期时间的wait方法会在过期时间到之后如果还没有被`notify`的话，等待线程会自动被从等待集合中释放。这两个版本的方法并没有其他的状态上的区别。\n\t\t* 超时时间版的wait方法会在超时时间到之后，随机的一个时间点被唤醒，这是由于线程竞争和CPU调度策略以及定时器的时间粒度等决定的。(对于定时器的时间粒度的影响，JVM并不给出保证，我们观察到的大部分的JVM是：当时间参数设置的小于1毫秒的情况下，响应时间大约在1-20毫秒之内)。\n\t\t* `Thread.sleep(long msecs)`方法内部其实使用的是`wait(long msecs)`方法，但是这个睡眠方法并没有绑定到当前同步块或者同步方法对应的对象的锁。它的实现可以用以下代码来展现：\n\t\t\n\t\t\t```java \n\t\t\tif (msecs != 0)  {\n\t\t\t    Object s = new Object(); \n\t\t\t    synchronized(s) { s.wait(msecs); }\n\t\t\t}\n\t\t\t```\n\t\t\t当然了，各个系统不必非得按照这种方式实现`sleep`方法，同时请注意，`sleep(0)`的意思是线\t\t\t程至少暂停0毫秒，鬼知道这是什么意思！\n\n\n","slug":"Java并发结构","published":1,"updated":"2016-08-30T03:51:45.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cisgxyz4v0008r7cbbqiv9k59","content":"<blockquote>\n<p>原文地址：<a href=\"http://gee.cs.oswego.edu/dl/cpj/mechanics.html\" target=\"_blank\" rel=\"external\">http://gee.cs.oswego.edu/dl/cpj/mechanics.html</a><br>声明： 个人英文水平有限，翻译的不对的地方请重拍！<br>Doug Lee的书:Concurrent Programming In Java的网上地址：<br><a href=\"http://gee.cs.oswego.edu/dl/cpj/index.html\" target=\"_blank\" rel=\"external\">http://gee.cs.oswego.edu/dl/cpj/index.html</a></p>\n</blockquote>\n<p><img src=\"/images/14724796235520.jpg\" alt=\"\"></p>\n<h2 id=\"线程\"><a href=\"#线程\" class=\"headerlink\" title=\"线程\"></a>线程</h2><ol>\n<li>线程是一个可以彼此间独立执行、同时共享底层系统资源(如文件、共享对象)的调用序列，Thread类是控制和记录线程活动的类。</li>\n<li>每个应用至少包含一个线程（即启动JVM的那个线程）， 其他的内部后台线程也会在JVM初始化的时候启动，线程数量和特性随各个JVM不同会有很大差异，但是，所有的用户线程都是由主线程（或者说它们的父线程）明确构建和启动的。</li>\n<li>下面是一些对线程Thread类相关的重要方法、属性以及使用注意事项的总结， 所有这些都会在本书的其他章节进行讨论和解读。 针对JLS和公开的相关API文档应当咨询更详细和权威的描述。</li>\n</ol>\n<h3 id=\"构造\"><a href=\"#构造\" class=\"headerlink\" title=\"构造\"></a>构造</h3><ol>\n<li><p>不同的构造方法接受不同组合的构造参数如下: </p>\n<ul>\n<li>一个Runnable对象，这种情况下，接下来调用<code>Thread.start()</code>方法会调用Runnable对象的<code>run()</code>方法，默认的Thread本身就是实现了Runnable接口的对象，只不过默认的run方法是空；</li>\n<li>一个标示线程的字符串，这个可以用来追踪和调试，除此之外没什么其他用处；</li>\n<li>接受一个<code>ThreadGroup</code>，新线程都会放在这个线程组里，注意，如果没有访问当前线程组的权限，会抛出SecurityException异常；</li>\n</ul>\n</li>\n<li><p>Thread类自身实现了Runnable接口，所以除了构造函数里传入一个Runnable对象，你还可以通过继承Thread类实现一个带有run方法的子类的方式来实现一个线程。但是最好的策略还是定义一个单独的Runnable接口的实现类并作为构造函数的参数传递给Thread类，因为：</p>\n<ul>\n<li>在一个单独的Runnable实现类里面实现代码逻辑可以免去潜在的Thread类和Runnable实现类中的同步代码块和同步方法交互的问题。 更具普遍意义的是，这种类型的代码分离有助于我们对具体的处理过程和对应的线程上下文做单独的控制。</li>\n<li>同时，针对同一个Runnable可以提供给多个有不同实例化方式的线程，也可以提供给其他轻量级的线程池框架处理。</li>\n<li>继承Thread类的方式会使得子类无法继承其他的类，不利于扩展。</li>\n</ul>\n</li>\n<li><p>Thread类有一个可以通过构造函数设置的<code>daemon</code>属性(但是只能在一个线程启动之前设置)。</p>\n<ul>\n<li>setDaemon方法的意思是设置当前线程为<strong>后台驻留线程</strong>，JVM会判断，当所有的非<code>daemon</code>线程都结束时，立即停止所有<code>daemon</code>线程并退出JVM。</li>\n<li>isDaemon方法会返回当前线程是否是<code>daemon</code>线程，这个方法的作用不大，即便后台线程在程序退出时经常需要做一些清理工作(<code>daemon</code>读成<strong>day-mon</strong>)。</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"线程启动\"><a href=\"#线程启动\" class=\"headerlink\" title=\"线程启动\"></a>线程启动</h3><ol>\n<li>调用start方法后，会触发Thread实例启动一个独立的活动流去执行实例的run方法。 调用线程(父线程)所持有的同步锁不会被新的线程持有。</li>\n<li>当线程的run方法无论是正常返回还是抛出一个未受检异常(如RuntimeException),线程都会终止。 线程即便终止之后也是==不可重启==，调用start方法多次会抛出InvalidThreadStateException异常。</li>\n<li><code>isAlive</code>方法返回<strong>true</strong>代表线程已经启动但还没有终止。 如果当前线程阻塞了，该方法会返回<code>true</code>，在这个点上不同的JVM实现会有不同，有的JVM在线程被取消<code>cancelled</code>的情况下会返回<code>false</code>。没有方法可以判断一个是<code>is not alive</code>状态的线程是否曾经被启动过，同样的，一个线程也不能很轻易的判断出是由哪个<strong>父</strong>线程启动的，虽然可以知道其他在同一个线程组<code>ThreadGroup</code>里面的线程是谁。</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//ThreadPoolExecutor.java</span></span><br><span class=\"line\"><span class=\"comment\">//runWorker(Worker w)方法</span></span><br><span class=\"line\"><span class=\"keyword\">while</span> (task != <span class=\"keyword\">null</span> || (task = getTask()) != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\"><span class=\"comment\">//这里会循环判断队列里面的任务数是否为空，不为空的情况下，线程池里面的线程一直是为终止状态，达到池化得效果</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">processWorkerExit(w, completedAbruptly);<span class=\"comment\">//如果队列里面的任务数为空，在这里面释放线程</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"优先级\"><a href=\"#优先级\" class=\"headerlink\" title=\"优先级\"></a>优先级</h3><ol>\n<li><p>为了可以使得JVM实现跨越不同硬件平台和操作系统，Java语言对线程调度和公平性不做保证，甚至不严格保证线程会一直执行。但是线程是支持通过启发式的设置线程优先级方法来影响线程调度器的执行</p>\n<ul>\n<li>每个线程都有一个优先级，优先级序号处在<code>Thread.MIN_PRIORITY</code> 和 <code>Thread.MAX_PRIORITY</code>之间。</li>\n<li>默认请情况下，每一个新线程都拥有和其创建线程一致的优先级。初始执行main方法的线程默认情况下的优先级为<code>Thread.NORM_PRIORITY</code>。</li>\n<li>可以通过<code>getPriority</code>方法获取任意线程的当前优先级。</li>\n<li>可以通过<code>setPriority</code>方法动态设置任意线程的优先级，最大优先级由其所在的线程组的大小限定。</li>\n</ul>\n</li>\n<li><p>当存在超过可用CPU核心数的可执行线程时，CPU线程调度器更倾向于优先执行高优先级的线程。</p>\n<blockquote>\n<p>具体的策略在不同的平台可能会有不同，例如，一些JVM的实现总是会选择最高优先级的线程执行，其他一些JVM会匹配线程的十个优先级到一些系统支持的更小(&lt;10)的优先级类别，这样就会使得不同优先级的线程有可能会被JVM当做同等优先级对待。其他一些混淆声明的优先级或其他的调度策略会保证即便低优先级的线程最终也会有机会得到执行。 同样的，由于计算机系统中其他应用的存在，设置JVM线程的优先级，可能会，但不一定会影响调度器的执行策略。</p>\n</blockquote>\n</li>\n<li><p>优先级并不承载其他的计算机语义和正确性方面的义务。</p>\n<blockquote>\n<p>尤其是不能用优先级控制来替代线程执行中的锁，优先级只能被用来表示不同线程间的重要性和紧急程度，在线程间竞争获取执行机会非常激烈的的场合下优先级会显得非常有用。程序应该优先按照运行正确的设计理念来设计，即便设置优先级的方法<code>setPriority</code>被定义为无操作的方法.</p>\n</blockquote>\n</li>\n<li><p>下面的表格列出了一些约定俗成的优先级设置策略的任务类型。 在存在很多并发场景的应用中，相对来说只有非常少的一部分线程在任何时候都是可执行状态(其他的线程都由于各种原因被阻塞了)， 这种场合下控制线程的优先级显得没有多大意义。其他的并发系统的场景中，微小的优先级设置的变化会对最终的执行产生影响。</p>\n</li>\n</ol>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\"><strong><code>Range</code></strong></th>\n<th style=\"text-align:center\"><strong><code>Use</code></strong></th>\n<th style=\"text-align:center\"><strong><code>Remark</code></strong></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\"><strong><code>10</code></strong></td>\n<td style=\"text-align:center\">Crisis management</td>\n<td style=\"text-align:center\">危机处理，最高</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><strong><code>7-9</code></strong></td>\n<td style=\"text-align:center\">Interactive, event-dirven</td>\n<td style=\"text-align:center\">交互，事件驱动</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><strong><code>4-6</code></strong></td>\n<td style=\"text-align:center\">IO-bound</td>\n<td style=\"text-align:center\">IO类型</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><strong><code>2-3</code></strong></td>\n<td style=\"text-align:center\">Background computation</td>\n<td style=\"text-align:center\">后台运行</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><strong><code>1</code></strong></td>\n<td style=\"text-align:center\">Run only if noting else on</td>\n<td style=\"text-align:center\">仅当其他线程都不执行的情况下</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"控制方法\"><a href=\"#控制方法\" class=\"headerlink\" title=\"控制方法\"></a>控制方法</h3><ol>\n<li><p>只有很少的几个方法可以用来做线程间的交互：</p>\n<ul>\n<li><p>每个线程都有一个关联的<code>boolean</code>变量<code>interruption status</code>标示出线程的中断状体。</p>\n<blockquote>\n<p>调用线程的<code>interrupt</code>方法会把线程的中断状态设置成<code>true</code>，除非线程正处以下方法的执行状态中：<code>Object.wait(),Thread.sleep(),Thread.join()</code>，这些情况下<code>interrupt()</code>方法会导致线程抛出异常<code>InterruptException</code>，但是线程的<code>interrupt</code>状态会设置为<code>false</code>。</p>\n</blockquote>\n</li>\n<li><p>任何线程的中断状态都可以通过<code>isInterrupt</code>方法来检测。</p>\n<blockquote>\n<p>如果是通过调用<code>interrupt</code>方法来中断线程的话，该方法会返回<code>true</code>，<br>  但是<code>status</code>状态为false，因为无论是通过调用<code>Thread.interrupted</code>方法还是处在<br>  <code>Object.wait(),Thread.sleep(),Thread.join()</code>等方法的处理中系统都会抛出中断异常<br>  <code>InterruptException</code>。</p>\n</blockquote>\n</li>\n<li><p>调用<code>thread.join()</code>方法会将调用线程挂起<code>suspend</code>，并等待目标线程<code>thread</code>完成。</p>\n<blockquote>\n<p>当线程的<code>thread.isAlive()</code>返回<code>false</code>时，<code>thread.join()</code>会立即返回。还有一个带有超时时间版本的<code>join(time)</code>方法，这个方法会在超时时间之后强制返回，即便线程还有没有处理完成。由<code>isAlive()</code>方法的定义可以看出，对一个还未开始的线程<code>join()</code>是没有任何意义的。同样的理由<code>join</code>一个不是你创建的线程也是不明智的。</p>\n</blockquote>\n</li>\n</ul>\n</li>\n<li><p>最开始的时候，<code>Thread</code>类是支持一些额外的控制方法的，如<code>suspend,stop,resume,destroy</code>。现在<code>suspend,resume,stop</code>方法已经被废弃了，<code>destroy</code>方法从来就没在任何的发行版本的JDK中实现过，以后估计也不会了。</p>\n<blockquote>\n<p>现在可以通过<code>wating|notification</code>技术实现和<code>suspend|resume</code>方法一样的效果，并且更加安全，后续还会围绕<code>stop</code>方法产生的问题继续展开讨论。</p>\n</blockquote>\n</li>\n</ol>\n<h3 id=\"静态方法\"><a href=\"#静态方法\" class=\"headerlink\" title=\"静态方法\"></a>静态方法</h3><ol>\n<li><p>一些线程的方法被设计成只适用于当前运行的线程(例如，调用这些方法的的线程，即当前线程)。 为了强化这个意义，这些方法被定义成静态方法</p>\n<ul>\n<li><code>Thread.currentThread</code>方法返回一个当前线程的引用，这个引用随后可以用于调用其他的非静态方法会。</li>\n<li><code>Thread.interrupted</code>方法会清除当前线程的中断状态并返回之前的状态(这也说明，一个线程的中断状态不可能被其他的线程清除)。</li>\n<li><code>Thread.sleep(long millseconds)</code>方法会导致当前线程挂起一段时间。</li>\n</ul>\n</li>\n<li><p><code>Thread.yield</code>方法仅仅是提示虚拟机如果有其他的可执行但是不在执行中的线程存在，线程调度器应该优先调度运行这些线程。但是不同的虚拟机可能对这个操作提示有任意的不同的解读。</p>\n<blockquote>\n<p>尽管没有强制的保证，<code>yield</code>方法在一些不使用时间分片的提前抢占式调度策略的单核CPU的JVM实现版本中可能会非常有效果。在这种情况下，只有当一个线程阻塞了(执行IO或者sleep)，其他线程才有可能会被重新调度，在这些系统中，执行耗时的非阻塞计算的线程会一直占用线程执行周期，降低应用的响应响应速度。作为一个安全保护机制，执行非阻塞的可能会超过时间处理器的可接受的响应时间的计算的线程或者其他的响应式线程可以插入执行<code>yield</code>方法(甚至执行sleep)，当然同样可以设置低的优先级，来让出CPU的执行时间。为了尽可能的减少不必要的影响，你还可以偶尔的时不时的调用一下<code>yield</code>方法。</p>\n</blockquote>\n</li>\n<li>在其他一些拥有预抢占式策略的虚拟机实现中，尤其是对于多核CPU来说，调度器可能甚至是提倡忽略<code>yield</code>方法给出的提醒。</li>\n</ol>\n<h3 id=\"线程组\"><a href=\"#线程组\" class=\"headerlink\" title=\"线程组\"></a>线程组</h3><ol>\n<li>每一个线程都是作为一个线程组的成员来构造的，默认情况下，这个线程组就是调用线程构造器的线程所在的线程组，线程组嵌套类似于树状结构。 当一个对象构造一个新的线程组时，这个线程组是嵌套在当前线程组下的，<code>getThreadGroup</code>方法返回任何线程的线程组。</li>\n<li><p>设计线程组的目的是用来支持动态地限制对线程访问操作的安全策略。</p>\n<blockquote>\n<p>例如，<code>interrupt</code>中断一个和当前线程不是同一个线程组的线程是非法的，这个是虚拟机保护机制的一部分，有些问题，例如\u0005一个<code>applet</code>想杀掉一个主屏幕的显示更新线程，通过限制不同线程组之间的访问权限可以阻止它们发生。<br>线程组同样可以设置一个最大的优先级，所有组内的线程都不能超过这个优先级。</p>\n</blockquote>\n</li>\n<li><p>不提倡直接将线程组用于线程编程模型中，大部分的应用中，为达到独立于应用的目的，使用一般的集合类来追踪一组线程对象是更好的选择。</p>\n</li>\n<li>在并发编程中极少用到的几个线程组的方法中，有一个方法<code>uncaughtException</code>， 这个方法是当一个线程由于抛出一个未受检异常的时候调用，这个方法一般是会打印出异常栈。</li>\n</ol>\n<h2 id=\"同步\"><a href=\"#同步\" class=\"headerlink\" title=\"同步\"></a>同步</h2><h3 id=\"对象和锁\"><a href=\"#对象和锁\" class=\"headerlink\" title=\"对象和锁\"></a>对象和锁</h3><ol>\n<li>每个<code>Object</code>和其子类的对象实例都拥有一个锁。</li>\n<li>基础类型如：<code>int,float,long</code>等并不是对象，只有通过他们的包装类才能被锁住。</li>\n<li>单独的变量不能被同步关键字修饰。</li>\n<li>锁操作只能在方法内使用。</li>\n<li>被<code>volatile</code>关键字修饰的的字段，执行时会在原子性、可见性、和顺序执行上得到保障。</li>\n<li>基础数据类型的数组对象可以持有锁，但是数组内单个的元素是不能的。</li>\n<li><code>Class</code>实例是对象，和<code>Class</code>对象关联的锁一般被用在静态方法中。</li>\n</ol>\n<h3 id=\"同步方法和同步块\"><a href=\"#同步方法和同步块\" class=\"headerlink\" title=\"同步方法和同步块\"></a>同步方法和同步块</h3><ol>\n<li><p><code>synchronized</code>关键字有两种语法形式，同步方法和同步代码块。</p>\n<blockquote>\n<p>同步块有一个对象参数，这个对象就是需要锁定的对象。<br>最常用的同步块参数是<code>this</code>当前对象。</p>\n</blockquote>\n</li>\n<li><p>同步关键字不作为方法签名的一部分。</p>\n<blockquote>\n<p>所以同步修饰关键字在重写父类的方法时不会自动的继承<br>并且接口内的方法无法用同步修饰符修饰，构造方法也不可以用同步修饰符修饰</p>\n</blockquote>\n</li>\n<li>同步修饰的子类实例方法和父类拥有同样的锁。但是内部类的同步方法和外部类是不同的锁。然而，一个非静态内部类方法可以锁住其外部类。</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> Class Inner&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">test</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">synchronized</span>(OuterClass.<span class=\"keyword\">this</span>) &#123; </span><br><span class=\"line\">\t\t   <span class=\"comment\">/* body */</span> </span><br><span class=\"line\">\t\t   System.out.println(<span class=\"string\">\"test Inner sync\"</span>)</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"获取和释放锁\"><a href=\"#获取和释放锁\" class=\"headerlink\" title=\"获取和释放锁\"></a>获取和释放锁</h3><ol>\n<li><p>当使用<code>sychronized</code>关键字的时候，锁操作遵循一个获取和释放协议。</p>\n<blockquote>\n<p>所有的锁操作都是块结构的，只有当要进入一个同步块或者同步方法的时候才会需要获取锁，退出的时候释放锁，即便是由于异常导致的退出也不能忘记释放锁的操作。</p>\n</blockquote>\n</li>\n<li>锁操作是基于一个线程维度的，不是针对每个调用来说的。<blockquote>\n<p>当一个线程抵达同步临界点，如果线程本就持有该对象的锁或者该对象的锁没有被其他线程持有，就占有锁并执行通过，否则就阻塞当前的线程执行。<br>重入锁和递归锁和默认的POSIX线程默认的锁策略不同。<br>这种机制对于同样的一个对象，允许一个同步方法针对同样的锁定对象<code>调用</code>另外一个同步方法。</p>\n</blockquote>\n</li>\n<li>针对同一个对象，不同线程的同步块同步方法之间遵循同样的对锁的获取和释放协议。即便一个同步方法在执行，另一个线程也可以同时调用同一个对象的其他非同步方法。也就是说，同步不等于原子操作，但是同步可以用来实现原子操作。</li>\n<li>当一个线程释放一个锁的时候，其他线程就可以获取到这个锁(有可能是同一个线程哦，如果线程释放后立即进入另外一个同步方法中)。<em><strong>但是对于接下来哪个线程会获取到锁或什么时候一个线程能获取到锁虚拟机对此不作保证</strong></em>。 也即是没有公平性的保证，<em><strong>同样的，也没有一种机制去确定对于一个给定的锁，当前正在被哪个线程锁持有</strong></em>。</li>\n<li>接下来会讨论到，除了控制锁，同步同样也对底层的内存模型有副作用。</li>\n</ol>\n<h3 id=\"静态\"><a href=\"#静态\" class=\"headerlink\" title=\"静态\"></a>静态</h3><ol>\n<li><p>锁定一个对象的意思不是说会对该对象的类和父类的静态字段做访问限制。要对静态字段做访问限制需要通过静态方法和静态块来实现。静态同步锁是通过类对象关联的静态方法来实现的。</p>\n<blockquote>\n<p>类C的静态锁也可以通过以下方式在实例方法中访问：<code>synchronized(C.class) { /* body */ }</code></p>\n</blockquote>\n</li>\n<li><p>JVM内部获取和释放类对象的锁是在类加载和初始化的阶段之间完成的，使用普通类方法和类对象的同步块是不会影响这些JVM的内部机制的，除非是你自己写的一个特殊的类加载器或是你在静态序列初始化阶段同时持多个类对象的锁。</p>\n<blockquote>\n<p>没有其他的内部JVM的动作会单独的为你使用和创建的类获取锁。但是如果你的子类是<code>java.*</code>包的，你    需要注意在这些包中的类的锁的策略。</p>\n</blockquote>\n</li>\n<li><p>静态锁关联的类和其他类包括其父类都是不相关的。想通过在子类中增加一个静态方法来实现对父类中静态字段的访问现在是无效的。</p>\n<blockquote>\n<p>推荐使用明确的类名的静态块实现方式代替<code>getClass()</code>的方式</p>\n</blockquote>\n</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">synchronized</span>(C.class) &#123; <span class=\"comment\">/* 推荐使用 */</span> &#125;</span><br><span class=\"line\"><span class=\"keyword\">synchronized</span>(getClass()) &#123; </span><br><span class=\"line\">\t<span class=\"comment\">/* 不推荐使用，这里其实锁的是实际运行时的类，</span><br><span class=\"line\">\t不是你想要的类 */</span> </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"监视器\"><a href=\"#监视器\" class=\"headerlink\" title=\"监视器\"></a>监视器</h3><ol>\n<li><p>同每个对象都有一把锁一样，每个对象都有一个只能被这些方法：<code>wait, notify, notifyAll and Thread.interrupt</code>操控的<strong>线程等待集合</strong>。同时持有锁和等待集合的对象一般统称为：<strong>监视器</strong>。</p>\n<blockquote>\n<p>大部分的其他语言对这个的细节定义都有所不同。java中，<strong>任何对象都可以作为一个监视器</strong>。</p>\n</blockquote>\n</li>\n<li><p>每一个对象的等待集合都是在内部被JVM操控的。每个集合中都包含了一个被<code>wait</code>方法阻塞住的线程列表，只有当其他线程调用了对象的<em>通知</em>方法或wait被释放了之后这些线程才有可能继续执行。</p>\n</li>\n<li><p>由于对象的等待集合和同步锁的交互方式决定了，这些方法<code>wait, notify, and notifyAll</code>只能在对象的同步锁被占有的情况下才能被调用。</p>\n<blockquote>\n<p>这些约定机制无法在编译期由编译器去校验，所以如果在运行时不遵从这个机制的话会抛出一个运行时的    异常<code>IllegalMonitorStateException</code>。</p>\n</blockquote>\n</li>\n<li><p>这些方法的执行解释如下：</p>\n<ul>\n<li><strong><code>wait</code></strong> 线程<code>T</code>执行这个方法会产生下列影响：<ol>\n<li>如果当前线程被打断，则这个方法会立即退出，抛出<code>InterruptedException</code>异常，否则该方法一直阻塞。</li>\n<li>JVM会把这个线程放在内部(也即是不提供给外部访问)的和目标对象关联的一个等待集合中。</li>\n<li>目标对象的同步锁被释放，但是所有该线程下持有的其他的锁还是会继续持有。即便这个目标对象的锁由于嵌套同步调用的原因被重入，也照样会被释放，在后者恢复后，锁的状态会被完全重置。</li>\n</ol>\n</li>\n<li><strong><code>notify</code></strong> 线程<code>K</code>执行这个方法会有下列影响：<ol>\n<li>如果在该对象的监视器等待集合中存在线程，JVM任务选择一个线程<code>T</code>并从等待集合中移除。如果等待集合中存在超过一个的线程的话，JVM对具体选择哪个进行移除操作不做保证。</li>\n<li>被选择的线程<code>T</code>必须重新去竞争获取目标对象的同步锁，这样总是会导致线程<code>T</code>阻塞一直到调用<code>notify</code>的线程<code>K</code>释放目标对象的锁为止。这期间如果其他的线程<code>P</code>先抢占到这个锁的话，阻塞会一直继续。</li>\n<li>最后如果线程<code>T</code>获取到对象的锁，就会从等待的执行点唤醒恢复执行。</li>\n</ol>\n</li>\n<li><strong><code>notifyAll</code></strong> 这个方法和<code>notify</code>方法的工作机制是一样的，不同之处是，这个方法是针对等待集合中的所有线程都有效果，但是同样的，由于需要竞争获取目标对象的同步锁，所以实际上是一次一个线程执行的。</li>\n<li><strong><code>interrupt</code></strong>  <ol>\n<li>如果一个线程正在挂起等待状态，这时候调用<code>Thread.interrupt</code>方法，这种情况会产生和<code>notify</code>机制同样的反应，只不过在重新获取到锁之后会抛出一个<code>InterruptedException</code>异常，并且线程的的中断状态会被置成<code>false</code>。</li>\n<li>如果<code>interrupt</code>和<code>notify</code>在同一时间发生，JVM不保证哪一个会先得到执行，所以两个结果都是有可能的(以后的Java语言规范(JLS)可能对这种情况的结果会有一个确定的保证)。</li>\n</ol>\n</li>\n<li><p><strong><code>timed waits</code></strong> 带过期时间的wait方法</p>\n<ul>\n<li>带过期时间的wait方法：<code>wait(long msecs), wait(long msecs, int nanosecs)</code>会在设置的最大时间内将线程维持在等待队列中。这个的执行效果和不带时间限制的wait方法的执行效果是基本一致的，只是说，带过期时间的wait方法会在过期时间到之后如果还没有被<code>notify</code>的话，等待线程会自动被从等待集合中释放。这两个版本的方法并没有其他的状态上的区别。</li>\n<li>超时时间版的wait方法会在超时时间到之后，随机的一个时间点被唤醒，这是由于线程竞争和CPU调度策略以及定时器的时间粒度等决定的。(对于定时器的时间粒度的影响，JVM并不给出保证，我们观察到的大部分的JVM是：当时间参数设置的小于1毫秒的情况下，响应时间大约在1-20毫秒之内)。</li>\n<li><p><code>Thread.sleep(long msecs)</code>方法内部其实使用的是<code>wait(long msecs)</code>方法，但是这个睡眠方法并没有绑定到当前同步块或者同步方法对应的对象的锁。它的实现可以用以下代码来展现：</p>\n  <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (msecs != <span class=\"number\">0</span>)  &#123;</span><br><span class=\"line\">    Object s = <span class=\"keyword\">new</span> Object(); </span><br><span class=\"line\">    <span class=\"keyword\">synchronized</span>(s) &#123; s.wait(msecs); &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>  当然了，各个系统不必非得按照这种方式实现<code>sleep</code>方法，同时请注意，<code>sleep(0)</code>的意思是线            程至少暂停0毫秒，鬼知道这是什么意思！</p>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ol>\n","excerpt":"","more":"<blockquote>\n<p>原文地址：<a href=\"http://gee.cs.oswego.edu/dl/cpj/mechanics.html\">http://gee.cs.oswego.edu/dl/cpj/mechanics.html</a><br>声明： 个人英文水平有限，翻译的不对的地方请重拍！<br>Doug Lee的书:Concurrent Programming In Java的网上地址：<br><a href=\"http://gee.cs.oswego.edu/dl/cpj/index.html\">http://gee.cs.oswego.edu/dl/cpj/index.html</a></p>\n</blockquote>\n<p><img src=\"/images/14724796235520.jpg\" alt=\"\"></p>\n<h2 id=\"线程\"><a href=\"#线程\" class=\"headerlink\" title=\"线程\"></a>线程</h2><ol>\n<li>线程是一个可以彼此间独立执行、同时共享底层系统资源(如文件、共享对象)的调用序列，Thread类是控制和记录线程活动的类。</li>\n<li>每个应用至少包含一个线程（即启动JVM的那个线程）， 其他的内部后台线程也会在JVM初始化的时候启动，线程数量和特性随各个JVM不同会有很大差异，但是，所有的用户线程都是由主线程（或者说它们的父线程）明确构建和启动的。</li>\n<li>下面是一些对线程Thread类相关的重要方法、属性以及使用注意事项的总结， 所有这些都会在本书的其他章节进行讨论和解读。 针对JLS和公开的相关API文档应当咨询更详细和权威的描述。</li>\n</ol>\n<h3 id=\"构造\"><a href=\"#构造\" class=\"headerlink\" title=\"构造\"></a>构造</h3><ol>\n<li><p>不同的构造方法接受不同组合的构造参数如下: </p>\n<ul>\n<li>一个Runnable对象，这种情况下，接下来调用<code>Thread.start()</code>方法会调用Runnable对象的<code>run()</code>方法，默认的Thread本身就是实现了Runnable接口的对象，只不过默认的run方法是空；</li>\n<li>一个标示线程的字符串，这个可以用来追踪和调试，除此之外没什么其他用处；</li>\n<li>接受一个<code>ThreadGroup</code>，新线程都会放在这个线程组里，注意，如果没有访问当前线程组的权限，会抛出SecurityException异常；</li>\n</ul>\n</li>\n<li><p>Thread类自身实现了Runnable接口，所以除了构造函数里传入一个Runnable对象，你还可以通过继承Thread类实现一个带有run方法的子类的方式来实现一个线程。但是最好的策略还是定义一个单独的Runnable接口的实现类并作为构造函数的参数传递给Thread类，因为：</p>\n<ul>\n<li>在一个单独的Runnable实现类里面实现代码逻辑可以免去潜在的Thread类和Runnable实现类中的同步代码块和同步方法交互的问题。 更具普遍意义的是，这种类型的代码分离有助于我们对具体的处理过程和对应的线程上下文做单独的控制。</li>\n<li>同时，针对同一个Runnable可以提供给多个有不同实例化方式的线程，也可以提供给其他轻量级的线程池框架处理。</li>\n<li>继承Thread类的方式会使得子类无法继承其他的类，不利于扩展。</li>\n</ul>\n</li>\n<li><p>Thread类有一个可以通过构造函数设置的<code>daemon</code>属性(但是只能在一个线程启动之前设置)。</p>\n<ul>\n<li>setDaemon方法的意思是设置当前线程为<strong>后台驻留线程</strong>，JVM会判断，当所有的非<code>daemon</code>线程都结束时，立即停止所有<code>daemon</code>线程并退出JVM。</li>\n<li>isDaemon方法会返回当前线程是否是<code>daemon</code>线程，这个方法的作用不大，即便后台线程在程序退出时经常需要做一些清理工作(<code>daemon</code>读成<strong>day-mon</strong>)。</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"线程启动\"><a href=\"#线程启动\" class=\"headerlink\" title=\"线程启动\"></a>线程启动</h3><ol>\n<li>调用start方法后，会触发Thread实例启动一个独立的活动流去执行实例的run方法。 调用线程(父线程)所持有的同步锁不会被新的线程持有。</li>\n<li>当线程的run方法无论是正常返回还是抛出一个未受检异常(如RuntimeException),线程都会终止。 线程即便终止之后也是==不可重启==，调用start方法多次会抛出InvalidThreadStateException异常。</li>\n<li><code>isAlive</code>方法返回<strong>true</strong>代表线程已经启动但还没有终止。 如果当前线程阻塞了，该方法会返回<code>true</code>，在这个点上不同的JVM实现会有不同，有的JVM在线程被取消<code>cancelled</code>的情况下会返回<code>false</code>。没有方法可以判断一个是<code>is not alive</code>状态的线程是否曾经被启动过，同样的，一个线程也不能很轻易的判断出是由哪个<strong>父</strong>线程启动的，虽然可以知道其他在同一个线程组<code>ThreadGroup</code>里面的线程是谁。</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//ThreadPoolExecutor.java</span></span><br><span class=\"line\"><span class=\"comment\">//runWorker(Worker w)方法</span></span><br><span class=\"line\"><span class=\"keyword\">while</span> (task != <span class=\"keyword\">null</span> || (task = getTask()) != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\"><span class=\"comment\">//这里会循环判断队列里面的任务数是否为空，不为空的情况下，线程池里面的线程一直是为终止状态，达到池化得效果</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">processWorkerExit(w, completedAbruptly);<span class=\"comment\">//如果队列里面的任务数为空，在这里面释放线程</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"优先级\"><a href=\"#优先级\" class=\"headerlink\" title=\"优先级\"></a>优先级</h3><ol>\n<li><p>为了可以使得JVM实现跨越不同硬件平台和操作系统，Java语言对线程调度和公平性不做保证，甚至不严格保证线程会一直执行。但是线程是支持通过启发式的设置线程优先级方法来影响线程调度器的执行</p>\n<ul>\n<li>每个线程都有一个优先级，优先级序号处在<code>Thread.MIN_PRIORITY</code> 和 <code>Thread.MAX_PRIORITY</code>之间。</li>\n<li>默认请情况下，每一个新线程都拥有和其创建线程一致的优先级。初始执行main方法的线程默认情况下的优先级为<code>Thread.NORM_PRIORITY</code>。</li>\n<li>可以通过<code>getPriority</code>方法获取任意线程的当前优先级。</li>\n<li>可以通过<code>setPriority</code>方法动态设置任意线程的优先级，最大优先级由其所在的线程组的大小限定。</li>\n</ul>\n</li>\n<li><p>当存在超过可用CPU核心数的可执行线程时，CPU线程调度器更倾向于优先执行高优先级的线程。</p>\n<blockquote>\n<p>具体的策略在不同的平台可能会有不同，例如，一些JVM的实现总是会选择最高优先级的线程执行，其他一些JVM会匹配线程的十个优先级到一些系统支持的更小(&lt;10)的优先级类别，这样就会使得不同优先级的线程有可能会被JVM当做同等优先级对待。其他一些混淆声明的优先级或其他的调度策略会保证即便低优先级的线程最终也会有机会得到执行。 同样的，由于计算机系统中其他应用的存在，设置JVM线程的优先级，可能会，但不一定会影响调度器的执行策略。</p>\n</blockquote>\n</li>\n<li><p>优先级并不承载其他的计算机语义和正确性方面的义务。</p>\n<blockquote>\n<p>尤其是不能用优先级控制来替代线程执行中的锁，优先级只能被用来表示不同线程间的重要性和紧急程度，在线程间竞争获取执行机会非常激烈的的场合下优先级会显得非常有用。程序应该优先按照运行正确的设计理念来设计，即便设置优先级的方法<code>setPriority</code>被定义为无操作的方法.</p>\n</blockquote>\n</li>\n<li><p>下面的表格列出了一些约定俗成的优先级设置策略的任务类型。 在存在很多并发场景的应用中，相对来说只有非常少的一部分线程在任何时候都是可执行状态(其他的线程都由于各种原因被阻塞了)， 这种场合下控制线程的优先级显得没有多大意义。其他的并发系统的场景中，微小的优先级设置的变化会对最终的执行产生影响。</p>\n</li>\n</ol>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\"><strong><code>Range</code></strong></th>\n<th style=\"text-align:center\"><strong><code>Use</code></strong></th>\n<th style=\"text-align:center\"><strong><code>Remark</code></strong></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\"><strong><code>10</code></strong></td>\n<td style=\"text-align:center\">Crisis management</td>\n<td style=\"text-align:center\">危机处理，最高</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><strong><code>7-9</code></strong></td>\n<td style=\"text-align:center\">Interactive, event-dirven</td>\n<td style=\"text-align:center\">交互，事件驱动</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><strong><code>4-6</code></strong></td>\n<td style=\"text-align:center\">IO-bound</td>\n<td style=\"text-align:center\">IO类型</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><strong><code>2-3</code></strong></td>\n<td style=\"text-align:center\">Background computation</td>\n<td style=\"text-align:center\">后台运行</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><strong><code>1</code></strong></td>\n<td style=\"text-align:center\">Run only if noting else on</td>\n<td style=\"text-align:center\">仅当其他线程都不执行的情况下</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"控制方法\"><a href=\"#控制方法\" class=\"headerlink\" title=\"控制方法\"></a>控制方法</h3><ol>\n<li><p>只有很少的几个方法可以用来做线程间的交互：</p>\n<ul>\n<li><p>每个线程都有一个关联的<code>boolean</code>变量<code>interruption status</code>标示出线程的中断状体。</p>\n<blockquote>\n<p>调用线程的<code>interrupt</code>方法会把线程的中断状态设置成<code>true</code>，除非线程正处以下方法的执行状态中：<code>Object.wait(),Thread.sleep(),Thread.join()</code>，这些情况下<code>interrupt()</code>方法会导致线程抛出异常<code>InterruptException</code>，但是线程的<code>interrupt</code>状态会设置为<code>false</code>。</p>\n</blockquote>\n</li>\n<li><p>任何线程的中断状态都可以通过<code>isInterrupt</code>方法来检测。</p>\n<blockquote>\n<p>如果是通过调用<code>interrupt</code>方法来中断线程的话，该方法会返回<code>true</code>，<br>  但是<code>status</code>状态为false，因为无论是通过调用<code>Thread.interrupted</code>方法还是处在<br>  <code>Object.wait(),Thread.sleep(),Thread.join()</code>等方法的处理中系统都会抛出中断异常<br>  <code>InterruptException</code>。</p>\n</blockquote>\n</li>\n<li><p>调用<code>thread.join()</code>方法会将调用线程挂起<code>suspend</code>，并等待目标线程<code>thread</code>完成。</p>\n<blockquote>\n<p>当线程的<code>thread.isAlive()</code>返回<code>false</code>时，<code>thread.join()</code>会立即返回。还有一个带有超时时间版本的<code>join(time)</code>方法，这个方法会在超时时间之后强制返回，即便线程还有没有处理完成。由<code>isAlive()</code>方法的定义可以看出，对一个还未开始的线程<code>join()</code>是没有任何意义的。同样的理由<code>join</code>一个不是你创建的线程也是不明智的。</p>\n</blockquote>\n</li>\n</ul>\n</li>\n<li><p>最开始的时候，<code>Thread</code>类是支持一些额外的控制方法的，如<code>suspend,stop,resume,destroy</code>。现在<code>suspend,resume,stop</code>方法已经被废弃了，<code>destroy</code>方法从来就没在任何的发行版本的JDK中实现过，以后估计也不会了。</p>\n<blockquote>\n<p>现在可以通过<code>wating|notification</code>技术实现和<code>suspend|resume</code>方法一样的效果，并且更加安全，后续还会围绕<code>stop</code>方法产生的问题继续展开讨论。</p>\n</blockquote>\n</li>\n</ol>\n<h3 id=\"静态方法\"><a href=\"#静态方法\" class=\"headerlink\" title=\"静态方法\"></a>静态方法</h3><ol>\n<li><p>一些线程的方法被设计成只适用于当前运行的线程(例如，调用这些方法的的线程，即当前线程)。 为了强化这个意义，这些方法被定义成静态方法</p>\n<ul>\n<li><code>Thread.currentThread</code>方法返回一个当前线程的引用，这个引用随后可以用于调用其他的非静态方法会。</li>\n<li><code>Thread.interrupted</code>方法会清除当前线程的中断状态并返回之前的状态(这也说明，一个线程的中断状态不可能被其他的线程清除)。</li>\n<li><code>Thread.sleep(long millseconds)</code>方法会导致当前线程挂起一段时间。</li>\n</ul>\n</li>\n<li><p><code>Thread.yield</code>方法仅仅是提示虚拟机如果有其他的可执行但是不在执行中的线程存在，线程调度器应该优先调度运行这些线程。但是不同的虚拟机可能对这个操作提示有任意的不同的解读。</p>\n<blockquote>\n<p>尽管没有强制的保证，<code>yield</code>方法在一些不使用时间分片的提前抢占式调度策略的单核CPU的JVM实现版本中可能会非常有效果。在这种情况下，只有当一个线程阻塞了(执行IO或者sleep)，其他线程才有可能会被重新调度，在这些系统中，执行耗时的非阻塞计算的线程会一直占用线程执行周期，降低应用的响应响应速度。作为一个安全保护机制，执行非阻塞的可能会超过时间处理器的可接受的响应时间的计算的线程或者其他的响应式线程可以插入执行<code>yield</code>方法(甚至执行sleep)，当然同样可以设置低的优先级，来让出CPU的执行时间。为了尽可能的减少不必要的影响，你还可以偶尔的时不时的调用一下<code>yield</code>方法。</p>\n</blockquote>\n</li>\n<li>在其他一些拥有预抢占式策略的虚拟机实现中，尤其是对于多核CPU来说，调度器可能甚至是提倡忽略<code>yield</code>方法给出的提醒。</li>\n</ol>\n<h3 id=\"线程组\"><a href=\"#线程组\" class=\"headerlink\" title=\"线程组\"></a>线程组</h3><ol>\n<li>每一个线程都是作为一个线程组的成员来构造的，默认情况下，这个线程组就是调用线程构造器的线程所在的线程组，线程组嵌套类似于树状结构。 当一个对象构造一个新的线程组时，这个线程组是嵌套在当前线程组下的，<code>getThreadGroup</code>方法返回任何线程的线程组。</li>\n<li><p>设计线程组的目的是用来支持动态地限制对线程访问操作的安全策略。</p>\n<blockquote>\n<p>例如，<code>interrupt</code>中断一个和当前线程不是同一个线程组的线程是非法的，这个是虚拟机保护机制的一部分，有些问题，例如\u0005一个<code>applet</code>想杀掉一个主屏幕的显示更新线程，通过限制不同线程组之间的访问权限可以阻止它们发生。<br>线程组同样可以设置一个最大的优先级，所有组内的线程都不能超过这个优先级。</p>\n</blockquote>\n</li>\n<li><p>不提倡直接将线程组用于线程编程模型中，大部分的应用中，为达到独立于应用的目的，使用一般的集合类来追踪一组线程对象是更好的选择。</p>\n</li>\n<li>在并发编程中极少用到的几个线程组的方法中，有一个方法<code>uncaughtException</code>， 这个方法是当一个线程由于抛出一个未受检异常的时候调用，这个方法一般是会打印出异常栈。</li>\n</ol>\n<h2 id=\"同步\"><a href=\"#同步\" class=\"headerlink\" title=\"同步\"></a>同步</h2><h3 id=\"对象和锁\"><a href=\"#对象和锁\" class=\"headerlink\" title=\"对象和锁\"></a>对象和锁</h3><ol>\n<li>每个<code>Object</code>和其子类的对象实例都拥有一个锁。</li>\n<li>基础类型如：<code>int,float,long</code>等并不是对象，只有通过他们的包装类才能被锁住。</li>\n<li>单独的变量不能被同步关键字修饰。</li>\n<li>锁操作只能在方法内使用。</li>\n<li>被<code>volatile</code>关键字修饰的的字段，执行时会在原子性、可见性、和顺序执行上得到保障。</li>\n<li>基础数据类型的数组对象可以持有锁，但是数组内单个的元素是不能的。</li>\n<li><code>Class</code>实例是对象，和<code>Class</code>对象关联的锁一般被用在静态方法中。</li>\n</ol>\n<h3 id=\"同步方法和同步块\"><a href=\"#同步方法和同步块\" class=\"headerlink\" title=\"同步方法和同步块\"></a>同步方法和同步块</h3><ol>\n<li><p><code>synchronized</code>关键字有两种语法形式，同步方法和同步代码块。</p>\n<blockquote>\n<p>同步块有一个对象参数，这个对象就是需要锁定的对象。<br>最常用的同步块参数是<code>this</code>当前对象。</p>\n</blockquote>\n</li>\n<li><p>同步关键字不作为方法签名的一部分。</p>\n<blockquote>\n<p>所以同步修饰关键字在重写父类的方法时不会自动的继承<br>并且接口内的方法无法用同步修饰符修饰，构造方法也不可以用同步修饰符修饰</p>\n</blockquote>\n</li>\n<li>同步修饰的子类实例方法和父类拥有同样的锁。但是内部类的同步方法和外部类是不同的锁。然而，一个非静态内部类方法可以锁住其外部类。</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> Class Inner&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">test</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">synchronized</span>(OuterClass.<span class=\"keyword\">this</span>) &#123; </span><br><span class=\"line\">\t\t   <span class=\"comment\">/* body */</span> </span><br><span class=\"line\">\t\t   System.out.println(<span class=\"string\">\"test Inner sync\"</span>)</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"获取和释放锁\"><a href=\"#获取和释放锁\" class=\"headerlink\" title=\"获取和释放锁\"></a>获取和释放锁</h3><ol>\n<li><p>当使用<code>sychronized</code>关键字的时候，锁操作遵循一个获取和释放协议。</p>\n<blockquote>\n<p>所有的锁操作都是块结构的，只有当要进入一个同步块或者同步方法的时候才会需要获取锁，退出的时候释放锁，即便是由于异常导致的退出也不能忘记释放锁的操作。</p>\n</blockquote>\n</li>\n<li>锁操作是基于一个线程维度的，不是针对每个调用来说的。<blockquote>\n<p>当一个线程抵达同步临界点，如果线程本就持有该对象的锁或者该对象的锁没有被其他线程持有，就占有锁并执行通过，否则就阻塞当前的线程执行。<br>重入锁和递归锁和默认的POSIX线程默认的锁策略不同。<br>这种机制对于同样的一个对象，允许一个同步方法针对同样的锁定对象<code>调用</code>另外一个同步方法。</p>\n</blockquote>\n</li>\n<li>针对同一个对象，不同线程的同步块同步方法之间遵循同样的对锁的获取和释放协议。即便一个同步方法在执行，另一个线程也可以同时调用同一个对象的其他非同步方法。也就是说，同步不等于原子操作，但是同步可以用来实现原子操作。</li>\n<li>当一个线程释放一个锁的时候，其他线程就可以获取到这个锁(有可能是同一个线程哦，如果线程释放后立即进入另外一个同步方法中)。<em><strong>但是对于接下来哪个线程会获取到锁或什么时候一个线程能获取到锁虚拟机对此不作保证</strong></em>。 也即是没有公平性的保证，<em><strong>同样的，也没有一种机制去确定对于一个给定的锁，当前正在被哪个线程锁持有</strong></em>。</li>\n<li>接下来会讨论到，除了控制锁，同步同样也对底层的内存模型有副作用。</li>\n</ol>\n<h3 id=\"静态\"><a href=\"#静态\" class=\"headerlink\" title=\"静态\"></a>静态</h3><ol>\n<li><p>锁定一个对象的意思不是说会对该对象的类和父类的静态字段做访问限制。要对静态字段做访问限制需要通过静态方法和静态块来实现。静态同步锁是通过类对象关联的静态方法来实现的。</p>\n<blockquote>\n<p>类C的静态锁也可以通过以下方式在实例方法中访问：<code>synchronized(C.class) { /* body */ }</code></p>\n</blockquote>\n</li>\n<li><p>JVM内部获取和释放类对象的锁是在类加载和初始化的阶段之间完成的，使用普通类方法和类对象的同步块是不会影响这些JVM的内部机制的，除非是你自己写的一个特殊的类加载器或是你在静态序列初始化阶段同时持多个类对象的锁。</p>\n<blockquote>\n<p>没有其他的内部JVM的动作会单独的为你使用和创建的类获取锁。但是如果你的子类是<code>java.*</code>包的，你    需要注意在这些包中的类的锁的策略。</p>\n</blockquote>\n</li>\n<li><p>静态锁关联的类和其他类包括其父类都是不相关的。想通过在子类中增加一个静态方法来实现对父类中静态字段的访问现在是无效的。</p>\n<blockquote>\n<p>推荐使用明确的类名的静态块实现方式代替<code>getClass()</code>的方式</p>\n</blockquote>\n</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">synchronized</span>(C.class) &#123; <span class=\"comment\">/* 推荐使用 */</span> &#125;</span><br><span class=\"line\"><span class=\"keyword\">synchronized</span>(getClass()) &#123; </span><br><span class=\"line\">\t<span class=\"comment\">/* 不推荐使用，这里其实锁的是实际运行时的类，</span><br><span class=\"line\">\t不是你想要的类 */</span> </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"监视器\"><a href=\"#监视器\" class=\"headerlink\" title=\"监视器\"></a>监视器</h3><ol>\n<li><p>同每个对象都有一把锁一样，每个对象都有一个只能被这些方法：<code>wait, notify, notifyAll and Thread.interrupt</code>操控的<strong>线程等待集合</strong>。同时持有锁和等待集合的对象一般统称为：<strong>监视器</strong>。</p>\n<blockquote>\n<p>大部分的其他语言对这个的细节定义都有所不同。java中，<strong>任何对象都可以作为一个监视器</strong>。</p>\n</blockquote>\n</li>\n<li><p>每一个对象的等待集合都是在内部被JVM操控的。每个集合中都包含了一个被<code>wait</code>方法阻塞住的线程列表，只有当其他线程调用了对象的<em>通知</em>方法或wait被释放了之后这些线程才有可能继续执行。</p>\n</li>\n<li><p>由于对象的等待集合和同步锁的交互方式决定了，这些方法<code>wait, notify, and notifyAll</code>只能在对象的同步锁被占有的情况下才能被调用。</p>\n<blockquote>\n<p>这些约定机制无法在编译期由编译器去校验，所以如果在运行时不遵从这个机制的话会抛出一个运行时的    异常<code>IllegalMonitorStateException</code>。</p>\n</blockquote>\n</li>\n<li><p>这些方法的执行解释如下：</p>\n<ul>\n<li><strong><code>wait</code></strong> 线程<code>T</code>执行这个方法会产生下列影响：<ol>\n<li>如果当前线程被打断，则这个方法会立即退出，抛出<code>InterruptedException</code>异常，否则该方法一直阻塞。</li>\n<li>JVM会把这个线程放在内部(也即是不提供给外部访问)的和目标对象关联的一个等待集合中。</li>\n<li>目标对象的同步锁被释放，但是所有该线程下持有的其他的锁还是会继续持有。即便这个目标对象的锁由于嵌套同步调用的原因被重入，也照样会被释放，在后者恢复后，锁的状态会被完全重置。</li>\n</ol>\n</li>\n<li><strong><code>notify</code></strong> 线程<code>K</code>执行这个方法会有下列影响：<ol>\n<li>如果在该对象的监视器等待集合中存在线程，JVM任务选择一个线程<code>T</code>并从等待集合中移除。如果等待集合中存在超过一个的线程的话，JVM对具体选择哪个进行移除操作不做保证。</li>\n<li>被选择的线程<code>T</code>必须重新去竞争获取目标对象的同步锁，这样总是会导致线程<code>T</code>阻塞一直到调用<code>notify</code>的线程<code>K</code>释放目标对象的锁为止。这期间如果其他的线程<code>P</code>先抢占到这个锁的话，阻塞会一直继续。</li>\n<li>最后如果线程<code>T</code>获取到对象的锁，就会从等待的执行点唤醒恢复执行。</li>\n</ol>\n</li>\n<li><strong><code>notifyAll</code></strong> 这个方法和<code>notify</code>方法的工作机制是一样的，不同之处是，这个方法是针对等待集合中的所有线程都有效果，但是同样的，由于需要竞争获取目标对象的同步锁，所以实际上是一次一个线程执行的。</li>\n<li><strong><code>interrupt</code></strong>  <ol>\n<li>如果一个线程正在挂起等待状态，这时候调用<code>Thread.interrupt</code>方法，这种情况会产生和<code>notify</code>机制同样的反应，只不过在重新获取到锁之后会抛出一个<code>InterruptedException</code>异常，并且线程的的中断状态会被置成<code>false</code>。</li>\n<li>如果<code>interrupt</code>和<code>notify</code>在同一时间发生，JVM不保证哪一个会先得到执行，所以两个结果都是有可能的(以后的Java语言规范(JLS)可能对这种情况的结果会有一个确定的保证)。</li>\n</ol>\n</li>\n<li><p><strong><code>timed waits</code></strong> 带过期时间的wait方法</p>\n<ul>\n<li>带过期时间的wait方法：<code>wait(long msecs), wait(long msecs, int nanosecs)</code>会在设置的最大时间内将线程维持在等待队列中。这个的执行效果和不带时间限制的wait方法的执行效果是基本一致的，只是说，带过期时间的wait方法会在过期时间到之后如果还没有被<code>notify</code>的话，等待线程会自动被从等待集合中释放。这两个版本的方法并没有其他的状态上的区别。</li>\n<li>超时时间版的wait方法会在超时时间到之后，随机的一个时间点被唤醒，这是由于线程竞争和CPU调度策略以及定时器的时间粒度等决定的。(对于定时器的时间粒度的影响，JVM并不给出保证，我们观察到的大部分的JVM是：当时间参数设置的小于1毫秒的情况下，响应时间大约在1-20毫秒之内)。</li>\n<li><p><code>Thread.sleep(long msecs)</code>方法内部其实使用的是<code>wait(long msecs)</code>方法，但是这个睡眠方法并没有绑定到当前同步块或者同步方法对应的对象的锁。它的实现可以用以下代码来展现：</p>\n  <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (msecs != <span class=\"number\">0</span>)  &#123;</span><br><span class=\"line\">    Object s = <span class=\"keyword\">new</span> Object(); </span><br><span class=\"line\">    <span class=\"keyword\">synchronized</span>(s) &#123; s.wait(msecs); &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>  当然了，各个系统不必非得按照这种方式实现<code>sleep</code>方法，同时请注意，<code>sleep(0)</code>的意思是线            程至少暂停0毫秒，鬼知道这是什么意思！</p>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ol>\n"},{"title":"Java阻塞队列(BlockingQueue)","date":"2016-08-15T10:45:01.000Z","_content":"\n### 队列 Queue\n> 队列是专门设计为存储需要优先处理的对象的集合, 队列中的集合操作方法有两种形式: ***1:抛出异常,2:返回特定值***\n\n![](/images/14724800810004.jpg)\n\n\n|    异常    | 特定值        |    解释   |\n| ---------- | ---          |    ----   |\n| add(e)     |  offer(e)    |    插入   |\n| remove(e)  |  poll()      |    删除   |\n| element()  |  peek        |    获取队列头部元素,但是不删除   |\n\n","source":"_posts/Java阻塞队列-BlockingQueue.md","raw":"---\ntitle: Java阻塞队列(BlockingQueue)\ndate: 2016-08-15 18:45:01\ntags: [Java,数据结构]\ncategories: 数据结构\n---\n\n### 队列 Queue\n> 队列是专门设计为存储需要优先处理的对象的集合, 队列中的集合操作方法有两种形式: ***1:抛出异常,2:返回特定值***\n\n![](/images/14724800810004.jpg)\n\n\n|    异常    | 特定值        |    解释   |\n| ---------- | ---          |    ----   |\n| add(e)     |  offer(e)    |    插入   |\n| remove(e)  |  poll()      |    删除   |\n| element()  |  peek        |    获取队列头部元素,但是不删除   |\n\n","slug":"Java阻塞队列-BlockingQueue","published":1,"updated":"2016-08-29T14:14:44.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cisgxyz4x000ar7cb6xfl3jz9","content":"<h3 id=\"队列-Queue\"><a href=\"#队列-Queue\" class=\"headerlink\" title=\"队列 Queue\"></a>队列 Queue</h3><blockquote>\n<p>队列是专门设计为存储需要优先处理的对象的集合, 队列中的集合操作方法有两种形式: <strong><em>1:抛出异常,2:返回特定值</em></strong></p>\n</blockquote>\n<p><img src=\"/images/14724800810004.jpg\" alt=\"\"></p>\n<table>\n<thead>\n<tr>\n<th>异常</th>\n<th>特定值</th>\n<th>解释</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>add(e)</td>\n<td>offer(e)</td>\n<td>插入</td>\n</tr>\n<tr>\n<td>remove(e)</td>\n<td>poll()</td>\n<td>删除</td>\n</tr>\n<tr>\n<td>element()</td>\n<td>peek</td>\n<td>获取队列头部元素,但是不删除</td>\n</tr>\n</tbody>\n</table>\n","excerpt":"","more":"<h3 id=\"队列-Queue\"><a href=\"#队列-Queue\" class=\"headerlink\" title=\"队列 Queue\"></a>队列 Queue</h3><blockquote>\n<p>队列是专门设计为存储需要优先处理的对象的集合, 队列中的集合操作方法有两种形式: <strong><em>1:抛出异常,2:返回特定值</em></strong></p>\n</blockquote>\n<p><img src=\"/images/14724800810004.jpg\" alt=\"\"></p>\n<table>\n<thead>\n<tr>\n<th>异常</th>\n<th>特定值</th>\n<th>解释</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>add(e)</td>\n<td>offer(e)</td>\n<td>插入</td>\n</tr>\n<tr>\n<td>remove(e)</td>\n<td>poll()</td>\n<td>删除</td>\n</tr>\n<tr>\n<td>element()</td>\n<td>peek</td>\n<td>获取队列头部元素,但是不删除</td>\n</tr>\n</tbody>\n</table>\n"},{"title":"关于流控RateLimit","date":"2016-05-22T14:51:43.000Z","_content":"![SmoothWarmingUpRatelimit](/images/SmoothWarmingUpRatelimit.png)\n\n{% blockquote %}\n 关于流控的一点总结\n{% endblockquote %}\n\n### flow need to be controled\n{% asset_img water-flow.jpg water is comming ! %}\n\n\n","source":"_posts/关于流控RateLimit.md","raw":"---\ntitle: 关于流控RateLimit\ndate: 2016-05-22 22:51:43\ntags: [Java,Guava]\ncategories: Java\n---\n![SmoothWarmingUpRatelimit](/images/SmoothWarmingUpRatelimit.png)\n\n{% blockquote %}\n 关于流控的一点总结\n{% endblockquote %}\n\n### flow need to be controled\n{% asset_img water-flow.jpg water is comming ! %}\n\n\n","slug":"关于流控RateLimit","published":1,"updated":"2016-08-29T13:51:59.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cisgxyz51000dr7cbgn6tusz3","content":"<p><img src=\"/images/SmoothWarmingUpRatelimit.png\" alt=\"SmoothWarmingUpRatelimit\"></p>\n<blockquote><p>关于流控的一点总结</p>\n</blockquote>\n<h3 id=\"flow-need-to-be-controled\"><a href=\"#flow-need-to-be-controled\" class=\"headerlink\" title=\"flow need to be controled\"></a>flow need to be controled</h3><img src=\"/2016/05/22/关于流控RateLimit/water-flow.jpg\" alt=\"water is comming !\" title=\"water is comming !\">\n","excerpt":"","more":"<p><img src=\"/images/SmoothWarmingUpRatelimit.png\" alt=\"SmoothWarmingUpRatelimit\"></p>\n<blockquote><p>关于流控的一点总结</p>\n</blockquote>\n<h3 id=\"flow-need-to-be-controled\"><a href=\"#flow-need-to-be-controled\" class=\"headerlink\" title=\"flow need to be controled\"></a>flow need to be controled</h3><img src=\"/2016/05/22/关于流控RateLimit/water-flow.jpg\" alt=\"water is comming !\" title=\"water is comming !\">\n"},{"title":"分布式事物(－)","date":"2016-06-02T11:08:29.000Z","_content":"\n> 关于分布式事务的一点学习总结\n\n\n### 设计模型\n采用类似TCC的事务模型，每个事务参与者都提供try, confirm, cancel的逻辑。在每个事务参与者的业务库的同一个实例都放一个事务所使用的库，简称事务库。\n\n#### Try状态\n尝试执行，比如对数据进行校验，检查事务是否可以进行等。并且在事务库里创建一条记录。此时记录中的状态字段记录为PENDING\n\n#### Confirm状态\n如果所有事务参与者的TRY都返回则表示可以进行，则提交事务。提交事务时在同一个本地事务里修改TRY阶段创建记录的状态为CONFIRM\n\n#### Cancel状态\n如果有任何一个事务参与者TRY阶段失败则发起CANCEL操作，并且在同一个本地事务里修改事务记录为CANCEL\n\n### 事物冲突\n在分布式环境中，可能对同一个数据进行并发操作，这样就会带来冲突。比如两个并发执行的事务可能对同一个订单进行修改，这可能造成冲突。这里的解决办法是我们给每种业务都分配一个business id，然后每个操作的资源都有一个resource id(比如这里就是订单号)。当一个事务要执行的时候我们可以判断对于同一个business id和resource id，是不是有未完成的事务(状态是PENDING)，如果有则拒绝事务执行。\n\n### 说明\n* 每个事务开始时候会获取一个全局唯一的事务号(transaction id)，该id会传递给所有的事务参与者并记录到事务参与者的事务记录中\n* 事务协调器会根据事务记录中的状态对各事务参与者进行重试操作。比如主事务记录中状态是CONFIRM，则要重试到所有事务参与者的状态都到CONFIRM为止\n","source":"_posts/分布式事物-－.md","raw":"---\ntitle: 分布式事物(－)\ndate: 2016-06-02 19:08:29\ntags: 分布式\ncategories: 分布式\n---\n\n> 关于分布式事务的一点学习总结\n\n\n### 设计模型\n采用类似TCC的事务模型，每个事务参与者都提供try, confirm, cancel的逻辑。在每个事务参与者的业务库的同一个实例都放一个事务所使用的库，简称事务库。\n\n#### Try状态\n尝试执行，比如对数据进行校验，检查事务是否可以进行等。并且在事务库里创建一条记录。此时记录中的状态字段记录为PENDING\n\n#### Confirm状态\n如果所有事务参与者的TRY都返回则表示可以进行，则提交事务。提交事务时在同一个本地事务里修改TRY阶段创建记录的状态为CONFIRM\n\n#### Cancel状态\n如果有任何一个事务参与者TRY阶段失败则发起CANCEL操作，并且在同一个本地事务里修改事务记录为CANCEL\n\n### 事物冲突\n在分布式环境中，可能对同一个数据进行并发操作，这样就会带来冲突。比如两个并发执行的事务可能对同一个订单进行修改，这可能造成冲突。这里的解决办法是我们给每种业务都分配一个business id，然后每个操作的资源都有一个resource id(比如这里就是订单号)。当一个事务要执行的时候我们可以判断对于同一个business id和resource id，是不是有未完成的事务(状态是PENDING)，如果有则拒绝事务执行。\n\n### 说明\n* 每个事务开始时候会获取一个全局唯一的事务号(transaction id)，该id会传递给所有的事务参与者并记录到事务参与者的事务记录中\n* 事务协调器会根据事务记录中的状态对各事务参与者进行重试操作。比如主事务记录中状态是CONFIRM，则要重试到所有事务参与者的状态都到CONFIRM为止\n","slug":"分布式事物-－","published":1,"updated":"2016-06-09T05:19:26.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cisgxyz53000fr7cbxlkbjjdb","content":"<blockquote>\n<p>关于分布式事务的一点学习总结</p>\n</blockquote>\n<h3 id=\"设计模型\"><a href=\"#设计模型\" class=\"headerlink\" title=\"设计模型\"></a>设计模型</h3><p>采用类似TCC的事务模型，每个事务参与者都提供try, confirm, cancel的逻辑。在每个事务参与者的业务库的同一个实例都放一个事务所使用的库，简称事务库。</p>\n<h4 id=\"Try状态\"><a href=\"#Try状态\" class=\"headerlink\" title=\"Try状态\"></a>Try状态</h4><p>尝试执行，比如对数据进行校验，检查事务是否可以进行等。并且在事务库里创建一条记录。此时记录中的状态字段记录为PENDING</p>\n<h4 id=\"Confirm状态\"><a href=\"#Confirm状态\" class=\"headerlink\" title=\"Confirm状态\"></a>Confirm状态</h4><p>如果所有事务参与者的TRY都返回则表示可以进行，则提交事务。提交事务时在同一个本地事务里修改TRY阶段创建记录的状态为CONFIRM</p>\n<h4 id=\"Cancel状态\"><a href=\"#Cancel状态\" class=\"headerlink\" title=\"Cancel状态\"></a>Cancel状态</h4><p>如果有任何一个事务参与者TRY阶段失败则发起CANCEL操作，并且在同一个本地事务里修改事务记录为CANCEL</p>\n<h3 id=\"事物冲突\"><a href=\"#事物冲突\" class=\"headerlink\" title=\"事物冲突\"></a>事物冲突</h3><p>在分布式环境中，可能对同一个数据进行并发操作，这样就会带来冲突。比如两个并发执行的事务可能对同一个订单进行修改，这可能造成冲突。这里的解决办法是我们给每种业务都分配一个business id，然后每个操作的资源都有一个resource id(比如这里就是订单号)。当一个事务要执行的时候我们可以判断对于同一个business id和resource id，是不是有未完成的事务(状态是PENDING)，如果有则拒绝事务执行。</p>\n<h3 id=\"说明\"><a href=\"#说明\" class=\"headerlink\" title=\"说明\"></a>说明</h3><ul>\n<li>每个事务开始时候会获取一个全局唯一的事务号(transaction id)，该id会传递给所有的事务参与者并记录到事务参与者的事务记录中</li>\n<li>事务协调器会根据事务记录中的状态对各事务参与者进行重试操作。比如主事务记录中状态是CONFIRM，则要重试到所有事务参与者的状态都到CONFIRM为止</li>\n</ul>\n","excerpt":"","more":"<blockquote>\n<p>关于分布式事务的一点学习总结</p>\n</blockquote>\n<h3 id=\"设计模型\"><a href=\"#设计模型\" class=\"headerlink\" title=\"设计模型\"></a>设计模型</h3><p>采用类似TCC的事务模型，每个事务参与者都提供try, confirm, cancel的逻辑。在每个事务参与者的业务库的同一个实例都放一个事务所使用的库，简称事务库。</p>\n<h4 id=\"Try状态\"><a href=\"#Try状态\" class=\"headerlink\" title=\"Try状态\"></a>Try状态</h4><p>尝试执行，比如对数据进行校验，检查事务是否可以进行等。并且在事务库里创建一条记录。此时记录中的状态字段记录为PENDING</p>\n<h4 id=\"Confirm状态\"><a href=\"#Confirm状态\" class=\"headerlink\" title=\"Confirm状态\"></a>Confirm状态</h4><p>如果所有事务参与者的TRY都返回则表示可以进行，则提交事务。提交事务时在同一个本地事务里修改TRY阶段创建记录的状态为CONFIRM</p>\n<h4 id=\"Cancel状态\"><a href=\"#Cancel状态\" class=\"headerlink\" title=\"Cancel状态\"></a>Cancel状态</h4><p>如果有任何一个事务参与者TRY阶段失败则发起CANCEL操作，并且在同一个本地事务里修改事务记录为CANCEL</p>\n<h3 id=\"事物冲突\"><a href=\"#事物冲突\" class=\"headerlink\" title=\"事物冲突\"></a>事物冲突</h3><p>在分布式环境中，可能对同一个数据进行并发操作，这样就会带来冲突。比如两个并发执行的事务可能对同一个订单进行修改，这可能造成冲突。这里的解决办法是我们给每种业务都分配一个business id，然后每个操作的资源都有一个resource id(比如这里就是订单号)。当一个事务要执行的时候我们可以判断对于同一个business id和resource id，是不是有未完成的事务(状态是PENDING)，如果有则拒绝事务执行。</p>\n<h3 id=\"说明\"><a href=\"#说明\" class=\"headerlink\" title=\"说明\"></a>说明</h3><ul>\n<li>每个事务开始时候会获取一个全局唯一的事务号(transaction id)，该id会传递给所有的事务参与者并记录到事务参与者的事务记录中</li>\n<li>事务协调器会根据事务记录中的状态对各事务参与者进行重试操作。比如主事务记录中状态是CONFIRM，则要重试到所有事务参与者的状态都到CONFIRM为止</li>\n</ul>\n"},{"title":"记录一次踩坑","date":"2016-06-25T08:47:33.000Z","_content":"\n![atom](/images/hole.jpg)\n\n> 记录一次去年底的踩坑过程\n\n### 起因介绍\n业务系统正在稳当的跑着，结果半夜报警电话不停，机器load报警，起来看到cpu使用率很低，报警是由于内存导致的，非常奇怪本身系统的逻辑很简单，\n就是保险系统的生单和出保逻辑对外提供一套dubbo的api服务。\n\n### 逐层分析\n按理推断即便系统有问题有也应该是业务系统应该报警才对，怎么会是机器在报警，为了验证自己的想法，\n去看tomcat的gc日志，和自己预期一致，没有发现有fullgc, 系统日志也没有OOM异常，那就奇怪，4g内存，\njvm申请3g最大的堆内存，按道理机器不应该报内存不够啊，折腾了半天还是没有发现有什么异常的地方，\n但是load的报警还在持续，回到刚刚的gc日志，忽然意识到一个问题居然一天之内一次fullgc都没发现，\n很奇怪啊，按道理系统稳定运行一段时间后，fullgc应该是按照一个稳定的频率出现才对，\n到服务器上sudo jstat -gcutil pid看了下gc统计日志，居然真是一次都木有啊\n\n### 推理演变\n把自己收集到的素材整理下： \n\n* 系统没有`FullGC`\n* tomcat 内存足够\n* 虚机load报警\n\n> 这么说来推测一下，一定是有什么地方申请了一块内存但是没有释放，最起码是System.gc()没起效果\n\n如果系统本身一直是在年轻代进行垃圾回收,那就意味着一定不会触发fullGC, 通过观察gc日志和对系统本身使用的\n了解,我推断是由于使用了堆外内存导致的, 公司所有的中间件里面底层都是依赖netty来构建的,dubbo,asynchttp,\n而系统本身就是犹如一个高速公路一样,只是做数据的传输工作,应用本身基本上没有本地缓存,而且强依赖外部接口(保险平台),\ndubbo,asynchttp这些中间件的使用率非常频繁, \n\nnetty本身是会显式的调用System.gc()进行垃圾回收的,再联想到公司默认的jvm配置-XX:+DisableExplicitGC,这就不奇怪了, \n本身如果系统自己有fullGC的话,那就是系统自身的fullGC来回收,但是这条路也不同,这就导致来堆外内存没有释放, \n\n所以结论是: netty不停的申请堆外内存,而又得不到释放,导致系统load压力一致在涨\n\n### 验证\n`-XX:+DisableExplicitGC` 将这个参数去掉, 观察系统10分钟,`sudo jstat -gcutil pid` 发现有fullGC了, 系统的load慢慢也下来了\n \n### 批评自己\n其实上面的验证方法不太符合工程学实现的要求, 我们是通过推理来验证自己的想法, 还应该讲tomcat的gc dump出来,通过分析工具分析系统的哪一个线程和代码会有可能有问题,这才是比较科学的分析方法\n\n\n","source":"_posts/记录一次踩坑.md","raw":"---\ntitle: 记录一次踩坑\ndate: 2016-06-25 16:47:33\ntags: Java\ncategories: Java\n---\n\n![atom](/images/hole.jpg)\n\n> 记录一次去年底的踩坑过程\n\n### 起因介绍\n业务系统正在稳当的跑着，结果半夜报警电话不停，机器load报警，起来看到cpu使用率很低，报警是由于内存导致的，非常奇怪本身系统的逻辑很简单，\n就是保险系统的生单和出保逻辑对外提供一套dubbo的api服务。\n\n### 逐层分析\n按理推断即便系统有问题有也应该是业务系统应该报警才对，怎么会是机器在报警，为了验证自己的想法，\n去看tomcat的gc日志，和自己预期一致，没有发现有fullgc, 系统日志也没有OOM异常，那就奇怪，4g内存，\njvm申请3g最大的堆内存，按道理机器不应该报内存不够啊，折腾了半天还是没有发现有什么异常的地方，\n但是load的报警还在持续，回到刚刚的gc日志，忽然意识到一个问题居然一天之内一次fullgc都没发现，\n很奇怪啊，按道理系统稳定运行一段时间后，fullgc应该是按照一个稳定的频率出现才对，\n到服务器上sudo jstat -gcutil pid看了下gc统计日志，居然真是一次都木有啊\n\n### 推理演变\n把自己收集到的素材整理下： \n\n* 系统没有`FullGC`\n* tomcat 内存足够\n* 虚机load报警\n\n> 这么说来推测一下，一定是有什么地方申请了一块内存但是没有释放，最起码是System.gc()没起效果\n\n如果系统本身一直是在年轻代进行垃圾回收,那就意味着一定不会触发fullGC, 通过观察gc日志和对系统本身使用的\n了解,我推断是由于使用了堆外内存导致的, 公司所有的中间件里面底层都是依赖netty来构建的,dubbo,asynchttp,\n而系统本身就是犹如一个高速公路一样,只是做数据的传输工作,应用本身基本上没有本地缓存,而且强依赖外部接口(保险平台),\ndubbo,asynchttp这些中间件的使用率非常频繁, \n\nnetty本身是会显式的调用System.gc()进行垃圾回收的,再联想到公司默认的jvm配置-XX:+DisableExplicitGC,这就不奇怪了, \n本身如果系统自己有fullGC的话,那就是系统自身的fullGC来回收,但是这条路也不同,这就导致来堆外内存没有释放, \n\n所以结论是: netty不停的申请堆外内存,而又得不到释放,导致系统load压力一致在涨\n\n### 验证\n`-XX:+DisableExplicitGC` 将这个参数去掉, 观察系统10分钟,`sudo jstat -gcutil pid` 发现有fullGC了, 系统的load慢慢也下来了\n \n### 批评自己\n其实上面的验证方法不太符合工程学实现的要求, 我们是通过推理来验证自己的想法, 还应该讲tomcat的gc dump出来,通过分析工具分析系统的哪一个线程和代码会有可能有问题,这才是比较科学的分析方法\n\n\n","slug":"记录一次踩坑","published":1,"updated":"2016-08-29T13:52:06.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cisgxyz57000jr7cbxly3y8x6","content":"<p><img src=\"/images/hole.jpg\" alt=\"atom\"></p>\n<blockquote>\n<p>记录一次去年底的踩坑过程</p>\n</blockquote>\n<h3 id=\"起因介绍\"><a href=\"#起因介绍\" class=\"headerlink\" title=\"起因介绍\"></a>起因介绍</h3><p>业务系统正在稳当的跑着，结果半夜报警电话不停，机器load报警，起来看到cpu使用率很低，报警是由于内存导致的，非常奇怪本身系统的逻辑很简单，<br>就是保险系统的生单和出保逻辑对外提供一套dubbo的api服务。</p>\n<h3 id=\"逐层分析\"><a href=\"#逐层分析\" class=\"headerlink\" title=\"逐层分析\"></a>逐层分析</h3><p>按理推断即便系统有问题有也应该是业务系统应该报警才对，怎么会是机器在报警，为了验证自己的想法，<br>去看tomcat的gc日志，和自己预期一致，没有发现有fullgc, 系统日志也没有OOM异常，那就奇怪，4g内存，<br>jvm申请3g最大的堆内存，按道理机器不应该报内存不够啊，折腾了半天还是没有发现有什么异常的地方，<br>但是load的报警还在持续，回到刚刚的gc日志，忽然意识到一个问题居然一天之内一次fullgc都没发现，<br>很奇怪啊，按道理系统稳定运行一段时间后，fullgc应该是按照一个稳定的频率出现才对，<br>到服务器上sudo jstat -gcutil pid看了下gc统计日志，居然真是一次都木有啊</p>\n<h3 id=\"推理演变\"><a href=\"#推理演变\" class=\"headerlink\" title=\"推理演变\"></a>推理演变</h3><p>把自己收集到的素材整理下： </p>\n<ul>\n<li>系统没有<code>FullGC</code></li>\n<li>tomcat 内存足够</li>\n<li>虚机load报警</li>\n</ul>\n<blockquote>\n<p>这么说来推测一下，一定是有什么地方申请了一块内存但是没有释放，最起码是System.gc()没起效果</p>\n</blockquote>\n<p>如果系统本身一直是在年轻代进行垃圾回收,那就意味着一定不会触发fullGC, 通过观察gc日志和对系统本身使用的<br>了解,我推断是由于使用了堆外内存导致的, 公司所有的中间件里面底层都是依赖netty来构建的,dubbo,asynchttp,<br>而系统本身就是犹如一个高速公路一样,只是做数据的传输工作,应用本身基本上没有本地缓存,而且强依赖外部接口(保险平台),<br>dubbo,asynchttp这些中间件的使用率非常频繁, </p>\n<p>netty本身是会显式的调用System.gc()进行垃圾回收的,再联想到公司默认的jvm配置-XX:+DisableExplicitGC,这就不奇怪了,<br>本身如果系统自己有fullGC的话,那就是系统自身的fullGC来回收,但是这条路也不同,这就导致来堆外内存没有释放, </p>\n<p>所以结论是: netty不停的申请堆外内存,而又得不到释放,导致系统load压力一致在涨</p>\n<h3 id=\"验证\"><a href=\"#验证\" class=\"headerlink\" title=\"验证\"></a>验证</h3><p><code>-XX:+DisableExplicitGC</code> 将这个参数去掉, 观察系统10分钟,<code>sudo jstat -gcutil pid</code> 发现有fullGC了, 系统的load慢慢也下来了</p>\n<h3 id=\"批评自己\"><a href=\"#批评自己\" class=\"headerlink\" title=\"批评自己\"></a>批评自己</h3><p>其实上面的验证方法不太符合工程学实现的要求, 我们是通过推理来验证自己的想法, 还应该讲tomcat的gc dump出来,通过分析工具分析系统的哪一个线程和代码会有可能有问题,这才是比较科学的分析方法</p>\n","excerpt":"","more":"<p><img src=\"/images/hole.jpg\" alt=\"atom\"></p>\n<blockquote>\n<p>记录一次去年底的踩坑过程</p>\n</blockquote>\n<h3 id=\"起因介绍\"><a href=\"#起因介绍\" class=\"headerlink\" title=\"起因介绍\"></a>起因介绍</h3><p>业务系统正在稳当的跑着，结果半夜报警电话不停，机器load报警，起来看到cpu使用率很低，报警是由于内存导致的，非常奇怪本身系统的逻辑很简单，<br>就是保险系统的生单和出保逻辑对外提供一套dubbo的api服务。</p>\n<h3 id=\"逐层分析\"><a href=\"#逐层分析\" class=\"headerlink\" title=\"逐层分析\"></a>逐层分析</h3><p>按理推断即便系统有问题有也应该是业务系统应该报警才对，怎么会是机器在报警，为了验证自己的想法，<br>去看tomcat的gc日志，和自己预期一致，没有发现有fullgc, 系统日志也没有OOM异常，那就奇怪，4g内存，<br>jvm申请3g最大的堆内存，按道理机器不应该报内存不够啊，折腾了半天还是没有发现有什么异常的地方，<br>但是load的报警还在持续，回到刚刚的gc日志，忽然意识到一个问题居然一天之内一次fullgc都没发现，<br>很奇怪啊，按道理系统稳定运行一段时间后，fullgc应该是按照一个稳定的频率出现才对，<br>到服务器上sudo jstat -gcutil pid看了下gc统计日志，居然真是一次都木有啊</p>\n<h3 id=\"推理演变\"><a href=\"#推理演变\" class=\"headerlink\" title=\"推理演变\"></a>推理演变</h3><p>把自己收集到的素材整理下： </p>\n<ul>\n<li>系统没有<code>FullGC</code></li>\n<li>tomcat 内存足够</li>\n<li>虚机load报警</li>\n</ul>\n<blockquote>\n<p>这么说来推测一下，一定是有什么地方申请了一块内存但是没有释放，最起码是System.gc()没起效果</p>\n</blockquote>\n<p>如果系统本身一直是在年轻代进行垃圾回收,那就意味着一定不会触发fullGC, 通过观察gc日志和对系统本身使用的<br>了解,我推断是由于使用了堆外内存导致的, 公司所有的中间件里面底层都是依赖netty来构建的,dubbo,asynchttp,<br>而系统本身就是犹如一个高速公路一样,只是做数据的传输工作,应用本身基本上没有本地缓存,而且强依赖外部接口(保险平台),<br>dubbo,asynchttp这些中间件的使用率非常频繁, </p>\n<p>netty本身是会显式的调用System.gc()进行垃圾回收的,再联想到公司默认的jvm配置-XX:+DisableExplicitGC,这就不奇怪了,<br>本身如果系统自己有fullGC的话,那就是系统自身的fullGC来回收,但是这条路也不同,这就导致来堆外内存没有释放, </p>\n<p>所以结论是: netty不停的申请堆外内存,而又得不到释放,导致系统load压力一致在涨</p>\n<h3 id=\"验证\"><a href=\"#验证\" class=\"headerlink\" title=\"验证\"></a>验证</h3><p><code>-XX:+DisableExplicitGC</code> 将这个参数去掉, 观察系统10分钟,<code>sudo jstat -gcutil pid</code> 发现有fullGC了, 系统的load慢慢也下来了</p>\n<h3 id=\"批评自己\"><a href=\"#批评自己\" class=\"headerlink\" title=\"批评自己\"></a>批评自己</h3><p>其实上面的验证方法不太符合工程学实现的要求, 我们是通过推理来验证自己的想法, 还应该讲tomcat的gc dump出来,通过分析工具分析系统的哪一个线程和代码会有可能有问题,这才是比较科学的分析方法</p>\n"}],"PostAsset":[{"_id":"source/_posts/关于流控RateLimit/water-flow.jpg","slug":"water-flow.jpg","post":"cisgxyz51000dr7cbgn6tusz3","modified":0,"renderable":0}],"PostCategory":[{"post_id":"cisgxyz4h0001r7cbpbrkijbw","category_id":"cisgxyz4s0006r7cbs6cnq0km","_id":"cisgxyz52000er7cb2w689rht"},{"post_id":"cisgxyz4o0003r7cbitlms3ym","category_id":"cisgxyz50000br7cbbtktitic","_id":"cisgxyz59000kr7cbmxfbloez"},{"post_id":"cisgxyz4t0007r7cbpgxri13a","category_id":"cisgxyz4s0006r7cbs6cnq0km","_id":"cisgxyz5a000or7cbufatzt2s"},{"post_id":"cisgxyz4v0008r7cbbqiv9k59","category_id":"cisgxyz59000mr7cboq1ndr0u","_id":"cisgxyz5b000rr7cbwyc27x26"},{"post_id":"cisgxyz4x000ar7cb6xfl3jz9","category_id":"cisgxyz5b000qr7cb0fo71pr8","_id":"cisgxyz5c000ur7cbfwv2rs2g"},{"post_id":"cisgxyz51000dr7cbgn6tusz3","category_id":"cisgxyz5c000tr7cba01prs9b","_id":"cisgxyz5d000zr7cbgq2fxekx"},{"post_id":"cisgxyz53000fr7cbxlkbjjdb","category_id":"cisgxyz5d000wr7cbvj0zdavw","_id":"cisgxyz5e0013r7cbbzkoy0t8"},{"post_id":"cisgxyz57000jr7cbxly3y8x6","category_id":"cisgxyz5c000tr7cba01prs9b","_id":"cisgxyz5f0017r7cb9od290d8"}],"PostTag":[{"post_id":"cisgxyz4h0001r7cbpbrkijbw","tag_id":"cisgxyz4q0005r7cbjlujq38e","_id":"cisgxyz51000cr7cbka4ifb7p"},{"post_id":"cisgxyz4o0003r7cbitlms3ym","tag_id":"cisgxyz4w0009r7cbnogh7zli","_id":"cisgxyz56000ir7cbl2jxxi2o"},{"post_id":"cisgxyz4t0007r7cbpgxri13a","tag_id":"cisgxyz4q0005r7cbjlujq38e","_id":"cisgxyz5a000nr7cbw3slj6lo"},{"post_id":"cisgxyz4v0008r7cbbqiv9k59","tag_id":"cisgxyz59000lr7cbcnudv3ih","_id":"cisgxyz5d000xr7cbg65nyrab"},{"post_id":"cisgxyz4v0008r7cbbqiv9k59","tag_id":"cisgxyz5a000pr7cbo06akdvx","_id":"cisgxyz5d000yr7cbt7dw2x4e"},{"post_id":"cisgxyz4v0008r7cbbqiv9k59","tag_id":"cisgxyz5b000sr7cbrub21dh2","_id":"cisgxyz5e0012r7cbid3bbot1"},{"post_id":"cisgxyz4x000ar7cb6xfl3jz9","tag_id":"cisgxyz59000lr7cbcnudv3ih","_id":"cisgxyz5e0015r7cbolsg5tm6"},{"post_id":"cisgxyz4x000ar7cb6xfl3jz9","tag_id":"cisgxyz5d0010r7cbha1d10be","_id":"cisgxyz5f0016r7cb548zasrg"},{"post_id":"cisgxyz51000dr7cbgn6tusz3","tag_id":"cisgxyz59000lr7cbcnudv3ih","_id":"cisgxyz5g001ar7cbnlttv0rp"},{"post_id":"cisgxyz51000dr7cbgn6tusz3","tag_id":"cisgxyz5f0018r7cbixqtf01e","_id":"cisgxyz5g001br7cbj1y3wqp9"},{"post_id":"cisgxyz53000fr7cbxlkbjjdb","tag_id":"cisgxyz5g0019r7cb0eyb3olj","_id":"cisgxyz5g001dr7cb29gua953"},{"post_id":"cisgxyz57000jr7cbxly3y8x6","tag_id":"cisgxyz59000lr7cbcnudv3ih","_id":"cisgxyz5h001er7cbby6yoc33"}],"Tag":[{"name":"DevTools","_id":"cisgxyz4q0005r7cbjlujq38e"},{"name":"hexo","_id":"cisgxyz4w0009r7cbnogh7zli"},{"name":"Java","_id":"cisgxyz59000lr7cbcnudv3ih"},{"name":"翻译","_id":"cisgxyz5a000pr7cbo06akdvx"},{"name":"DougLee","_id":"cisgxyz5b000sr7cbrub21dh2"},{"name":"数据结构","_id":"cisgxyz5d0010r7cbha1d10be"},{"name":"Guava","_id":"cisgxyz5f0018r7cbixqtf01e"},{"name":"分布式","_id":"cisgxyz5g0019r7cb0eyb3olj"}]}}